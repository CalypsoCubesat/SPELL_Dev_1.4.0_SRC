/*
 * generated by Xtext
 */
package lu.ses.engineering.spell.controlflow.formatting

import com.google.inject.Inject
import lu.ses.engineering.spell.controlflow.services.SpellGrammarGrammarAccess
import org.eclipse.xtext.formatting.IIndentationInformation
import org.eclipse.xtext.formatting.impl.AbstractDeclarativeFormatter
import org.eclipse.xtext.formatting.impl.FormattingConfig
import org.eclipse.xtext.parsetree.reconstr.ITokenStream
import org.eclipse.emf.ecore.EObject

/**
 * This class contains custom formatting description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation.html#formatting
 * on how and when to use it 
 * 
 * Also see {@link org.eclipse.xtext.xtext.XtextFormattingTokenSerializer} as an example
 */
public class SpellGrammarFormatter extends AbstractDeclarativeFormatter {
	
	@Inject extension SpellGrammarGrammarAccess
	
	override protected configureFormatting(FormattingConfig c) {
		
		c.setAutoLinewrap(Integer.MAX_VALUE / 8);
		for(keyword: findKeywords()) {
			c.setSpace(" ").after(keyword)
		}
	}
	
		
	override protected FormattingConfig createFormattingConfig() {
		var FormattingConfig cfg = new FormattingConfig(this.getGrammarAccess(), this.getHiddenTokenHelper(), 
				new IIndentationInformation.Default() {
					override public String getIndentString() {
						// Use four spaces instead of tabs for indentation.
						return "    ";
					}			
				}
		);
		return cfg;
	}
	
	override public ITokenStream createFormatterStream(EObject context, String indent, ITokenStream out, boolean preserveWhitespaces){
		return new SPELLFormattingStream(out, indent, getConfig(), createMatcher(), this.getHiddenTokenHelper(),
				preserveWhitespaces);
	}
	
	
	override public ITokenStream createFormatterStream(String indent, ITokenStream out,boolean preserveWhitespaces) {
		return new SPELLFormattingStream(out, indent, getConfig(), createMatcher(), this.getHiddenTokenHelper(),
				preserveWhitespaces);
	}	
}
