// automatically generated by Xtext
grammar lu.ses.engineering.spell.controlflow.SpellGrammar hidden(WS, ML_COMMENT, SL_COMMENT)

import "http://lu.ses.engineering.controlflow.grammar" 
//generate spell "http://lu.ses.engineering.controlflow.grammar"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

// Grammar for Python

// Note:  Changing the grammar specified in this file will most likely
//        require corresponding changes in the parser module
//        (../Modules/parsermodule.c).  If you can't make the changes to
//        that module yourself, please co-ordinate the required changes
//        with someone who can; ask around on python-dev for help.  Fred
//        Drake <fdrake@acm.org> will probably be listening there.

// NOTE WELL: You should also follow all the steps listed in PEP 306,
// "How to Change Python's Grammar"

// Start symbols for the grammar:
//       single_input is a single interactive statement;
//       file_input is a module or sequence of commands read from an input file;
//       eval_input is the input for the eval() and input() functions.
// NB: compound_stmt in single_input is followed by extra NEWLINE!
file_input: {file_input} (stmts+=stmt )* ;

python_input:
	single_input |
	file_input | 
	eval_input
;

single_input: {single_input}
	(
		stmt=simple_stmt |
		stmt=compound_stmt 
	) 
;
eval_input: {eval_input} testlist=testlist ;



decorator: '@' dotted_name=dotted_name (roundBracket?='(' (arglist=arglist)? ')')?;
decorators: (decorators+=decorator)+;
decorated: decorators=decorators (def=classdef | def=funcdef);
funcdef: 'def' name=NAME parameters=parameters ':' suite=suite ENDDEF;
parameters: {parameters} '(' (varargslist=varargslist)? ','? ')';
varargslist_element:
	fpdef=fpdef ('=' test=test)? 
;
varargslist: ((varargs1+=varargslist_element ',')*
              (('*' dot1Name=NAME (',' '**' dot2Name=NAME)?) | ('**' dot2Name=NAME))
              |              
              (vararg2=varargslist_element (',' varargs3+=varargslist_element)* (additionalComma?=',')?))
;

fpdef: name=NAME | ('(' fplist=fplist ')');
fplist: def1=fpdef (',' definitions+=fpdef)* (optionalSemicolon?=';')?;

stmt: (simple_stmt | compound_stmt);
simple_stmt : small_stmt ({simple_stmt.stmt+=current} (';' stmt+=small_stmt)+ (additionalComma?=',')?)? ';'?;
small_stmt: (
	expr_stmt | 
	del_stmt | 
	pass_stmt | 
	flow_stmt |
    import_stmt | 
    global_stmt | 
    exec_stmt | 
    assert_stmt
  	);
expr_stmt: testlist (({expr_stmt.left=current} symbol=augassign right=yield_or_testlist) |
                    ({assignment_stmt.left=current} (symbol='=' assignments+=yield_or_testlist)+))?;
                     
yield_or_testlist:
	yield_expr|testlist
;
augassign: (('+' '=') | '-=' | '*=' | '/=' | '%=' | '&=' | '|=' | '^=' |
            '<<=' | '>>=' | '**=' | '//=');
// For normal assignments, additional restrictions enforced by the interpreter
del_stmt: 'del' exprlist=exprlist;
pass_stmt: {pass_stmt}'pass';
flow_stmt: 
	break_stmt |
	continue_stmt | 
	return_stmt | 
	raise_stmt | 
	yield_stmt
;
break_stmt:{break_stmt} 'break';
continue_stmt:{continue_stmt} 'continue';
return_stmt: {return_stmt}'return' (testlist=testlist)?;
yield_stmt: yield_expr=yield_expr;
raise_stmt: {raise_stmt} 'raise' (tests+=test (',' tests+=test (',' tests+=test)?)?)?;
import_stmt: 
	import_name | 
	import_from
;
import_name: 'import' dotted_as_names=dotted_as_names;
import_from: ('from' (((dots+='.')* dotted_name=dotted_name) | (dots2+='.')+)
              'import' ('*' | (roundBracket?='(' import_as_names=import_as_names ')') | import_as_names=import_as_names));
import_as_name: name=NAME ('as' identifier=NAME)?;
dotted_as_name: name=dotted_name ('as' identifier=NAME)?;
import_as_names: imports+=import_as_name (',' imports+=import_as_name)* (optionalComma?=',')?;
dotted_as_names: dotted_names+=dotted_as_name (',' dotted_names+=dotted_as_name)*;
dotted_name returns ecore::EString:
	NAME ('.' NAME)*
;
global_stmt: 'global' globals+=NAME (',' globals+=NAME)*;
exec_stmt: 'exec' expr=expr ('in' tests+=test (',' tests+=test)?)?;
assert_stmt: 'assert' assers+=test (',' assers+=test)?;

compound_stmt: 
	if_stmt |
	while_stmt | 
	for_stmt | 
	try_stmt | 
	with_stmt | 
	funcdef | 
	classdef | 
	decorated
;
else_if_stmt:
	'elif' test=test ':' suite=suite
;
if_stmt: 'if' test=test ':' suite=suite (else_if_stmts+=else_if_stmt)* ('else' ':' else=suite)? ENDIF;
while_stmt: 'while' test=test ':' suite=suite ('else' ':' else=suite)? ENDWHILE;
for_stmt: 'for' exprlist=exprlist 'in' testlist=testlist ':' suite=suite ('else' ':' else=suite)? (ENDFOR | ENDIF);
try_stmt: ('try' ':' suite=suite ENDTRY?
           (
           ((except_clause+=except_clause)+
            ('else' ':' else=suite)?
            ('finally' ':' finally=suite)?) 
          |
            ('finally' ':' finally=suite))) ENDTRY;
with_stmt: 'with' with_item+=with_item (',' with_item+=with_item)*  ':' suite=suite ENDWITH;
with_item: test=test ('as' expr=expr)?;
// NB compile.c makes sure that the default except clause is last
except_clause: 'except' (test=test (sign=('as' | ',') next_test=test)?)? ':' suite=suite;
suite: (=>stmts+=stmt)+
;


// Backward compatibility cruft to support:
// [ x for x in lambda: True, lambda: False if x() ]
// even while also allowing:
// lambda x: 5 if x else 2
// (But not a mix of the two)
testlist_safe: old_test+=test ((',' old_test+=test)+ (optionalComa?=',')?)?;

test: (or_test ({test.left=current} 'if' if_test=or_test 'else' if_else_test=test)?) | 
	lambdef
;
or_test: and_test ({or_test.left=current} sign='or' NL? right=and_test)*;
and_test: not_test ({and_test.left=current}  sign='and' NL? right=not_test)*;
not_test: ((not+='not')+ comparison=comparison ) | comparison;
comparison: expr ({comparison.left=current} comp_op=comp_op right=expr)*;
comp_op: '<'|'>'|'=='|'>='|'<='|'<>'|'!='|'in'|('not' 'in')|'is'|('is' 'not');
expr: xor_expr ({expr.left=current} sign='|' right=xor_expr)*;
xor_expr: and_expr ({xor_expr.left=current} sign='^' right=and_expr)*;
and_expr: shift_expr ({and_expr.left=current} sign='&' right=shift_expr)*;
shift_expr: arith_expr ({shift_expr.left=current} sign=('<<'|'>>') right=arith_expr)*;
arith_expr: term ({arith_expr.left=current} sign=('+'|'-') right=term)*;
term: factor ({term.left=current} sign=('*'|'/'|'%'|'//'|'**') right=factor)*;
factor: (sign=('+'|'-'|'~') factor=factor) | power;

power: ({Step} ('Step') '(' id=atom (',' description=arith_expr)? ','? ')') |
		({DisplayStep} ('DisplayStep') '(' id=arith_expr (',' description=arith_expr)? ','? ')') |
		({ShowTM} 'ShowTM' '(' args+=arglist ','? ')') |
		({Send} 'Send' '(' args+=arglist ','? ')' (trailer+=trailer)*) |
		({BuildTC} 'BuildTC' '(' args+=arglist ','?  ')' (trailer+=trailer)*) |
		({SetLimits} 'SetLimits' '(' tm=test  (','? args+=arglist)* ','?  ')' (trailer+=trailer)*) |
		({SetLimits} 'GetLimits' '(' tm=test  (','? args+=arglist)* ','?  ')' (trailer+=trailer)*) |
		({GetTM} 'GetTM' '(' tm=test  (','? args+=arglist)* ','?  ')' (trailer+=trailer)*) |
		({Goto} 'Goto' '(' (target=STRING) ')' (trailer+=trailer)*) |
		({Goto} 'Goto' '(' (expr=test) ')' (trailer+=trailer)*) |
		({Verify} 'Verify' '(' args=arglist ','? ')' (trailer+=trailer)*) |
		({Verify} 'WaitFor' '(' args=arglist ','? ')' (trailer+=trailer)*) |
		({ChangeLanguageConfig}'ChangeLanguageConfig' '(' statement=Python_Statement ',' args=arglist  ')')
		 |
	(atom ({power.atom=current} (trailer+=trailer)+ ('**' factor=factor)?)?)
;

yield_or_testlist_comp:
	yield_expr|testlist_comp
;
atom: ((roundBracket?='(' (yield_or_testlist_comp=yield_or_testlist_comp)? ')') |
       (squareBracket?='[' (listmaker=listmaker)? ']' )|
       (curlyBracket?='{' (dictorsetmaker=dictorsetmaker)? '}') |
       ('`' testlist1=testlist1 '`') |
       name=NAME | name=NumberWithPlusOrMinus | (strings+=STRING WS?)+);
listmaker: test=test ( list_for=list_for | ((',' additionalTests+=test)* (optionalComma?=',')?) )?;
testlist_comp: test=test ( comp_for=comp_for | ((',' additionalTests+=test)* (optionalComma?=',')?) )?;
lambdef: {lambdef} 'lambda' (varargslist=varargslist)? ':' test=test;
trailer: 
	
	(roundBracket?='(' (arglist=arglist)? ','?  ')') | 
	(squareBracket?='[' subscriptlist=subscriptlist ']') | 
	('.' dotName=NAME)
;
subscriptlist: subscript+=subscript (',' subscript+=subscript)* (optionalComma?=',')?;
subscript: {subscript}
	(
		('.' '.' '.') |
		((subscript1=test)? (symbol=':' (subscript2=test)? (sliceop=sliceop)?)?)
	)
;
sliceop: {sliceop} ':' (test=test)?;
exprlist: exprs+=expr (',' exprs+=expr)* (optionalComma?=',')?;
testlist: test ({testlist.tests+=current} ',' tests+=test)* (optionalComma?=',')?;
dictorset_entry:
	test1=test ':' test2=test
;
dictorsetmaker: ( (entries+=dictorset_entry 
					(
						comp_for=comp_for|
						((',' entries+=dictorset_entry)* (optionalComma?=',')?)
					)
				) 
				/* |
                  (tests+=test (
                  	comp_for=comp_for |
                  	((',' tests+=test)* (optionalComma?=',')?)
                  ) 
                )*/
             )
;

classdef : 'class' name=NAME (roundBrackets?='(' (testlist=testlist) ')')? ':' suite=suite ENDCLASS;

arglist: (arguments+=argument ',')* ((arguments+=argument (optionalComma?=',')?)
                         |('*' dot1_test=test (',' dot1_arguments+=argument)* (',' '**' dot2_test=test)?) 
                         |('**' dot2_test=test)) ','?;
// The reason that keywords are test nodes instead of NAME is that using NAME
// results in an ambiguity. ast.c makes sure it's a NAME.
argument: test (({argument.test=current} comp_for=comp_for) | 
			({argument.test=current} '=' test2=test))?
;

list_iter: list_for | list_if;
list_for: 'for' exprlist=exprlist 'in' testlist_safe=testlist_safe (list_iter=list_iter)?;
list_if: 'if' old_test=test  (list_iter=list_iter)?;

comp_iter: comp_for | comp_if;
comp_for: 'for' exprlist=exprlist 'in' or_test=or_test (comp_iter=comp_iter)?;
comp_if: 'if' test=test (comp_iter=comp_iter)?;

testlist1: {testlist1} tests+=test (',' tests+=test)*;

yield_expr: {yield_expr}'yield' (testlist=testlist)?
	
;
Python_Statement	returns ecore::EString:	
	'Step' | 'ShowTM' | 'Verify' | 'Send' | 'GetTM' | 'Goto'|  'SetLimits'| 'GetLimits'| 'BuildTC' | 'DisplayStep' | 'WaitFor' | NAME_TERMINAL
;

NumberWithPlusOrMinus returns ecore::EString:
	('+'|'-')? ('.')?  NUMBER
;

NAME returns ecore::EString:
	Python_Statement
;

NL returns ecore::EString:
	'\\' WS
;

terminal ENDIF				:   '#' 'ENDIF'  !('\n'|'\r')* ;
terminal ENDWHILE			:   '#' 'ENDWHILE' !('\n'|'\r')*;
terminal ENDFOR				:   '#' 'ENDFOR'   !('\n'|'\r')*;
terminal ENDWITH			:   '#' 'ENDWITH'  !('\n'|'\r')* ;
terminal ENDDEF				:   ('#' ('ENDDEF' )   !('\n'|'\r')*) ;
terminal ENDTRY				:   ('#' 'ENDTRY'   !('\n'|'\r')*) 
;
terminal ENDCLASS			:   '#' 'ENDCLASS' !('\n'|'\r')* ;

terminal STRING	: 
			'"' ( '\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') | !('\\'|'"') )* '"' |
			"'" ( '\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') | !('\\'|"'") )* "'"
		; 
terminal ML_COMMENT	: 
		
		"'''" -> "'''";
		 
terminal SL_COMMENT 	: '#' !('\n'|'\r')*;

terminal WS			: (' '|'\t'|('\\'? '\r'? '\n'))+;


terminal NAME_TERMINAL:
	('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*
;

terminal NUMBER:
	('0'..'9')+(('x'|'X'|'b'|'O'|'o'|'B') ('0'..'9' | 'a'..'f' | 'A'..'F')+)? ('.' ('0'..'9')+ )?(('E'|'e')('-' | '+' )?('0'..'9')+)? ('L')?
;

terminal ANY_OTHER: 
	.
	
;