/*
 * generated by Xtext
 */
package lu.ses.engineering.spell.controlflow.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;


@Singleton
public class SpellGrammarGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class File_inputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.controlflow.SpellGrammar.file_input");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFile_inputAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cStmtsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStmtsStmtParserRuleCall_1_0 = (RuleCall)cStmtsAssignment_1.eContents().get(0);
		
		//// Grammar for Python
		//// Note:  Changing the grammar specified in this file will most likely
		////        require corresponding changes in the parser module
		////        (../Modules/parsermodule.c).  If you can't make the changes to
		////        that module yourself, please co-ordinate the required changes
		////        with someone who can; ask around on python-dev for help.  Fred
		////        Drake <fdrake@acm.org> will probably be listening there.
		//// NOTE WELL: You should also follow all the steps listed in PEP 306,
		//// "How to Change Python's Grammar"
		//// Start symbols for the grammar:
		////       single_input is a single interactive statement;
		////       file_input is a module or sequence of commands read from an input file;
		////       eval_input is the input for the eval() and input() functions.
		//// NB: compound_stmt in single_input is followed by extra NEWLINE!
		//file_input:
		//	{file_input} stmts+=stmt*;
		@Override public ParserRule getRule() { return rule; }

		//{file_input} stmts+=stmt*
		public Group getGroup() { return cGroup; }

		//{file_input}
		public Action getFile_inputAction_0() { return cFile_inputAction_0; }

		//stmts+=stmt*
		public Assignment getStmtsAssignment_1() { return cStmtsAssignment_1; }

		//stmt
		public RuleCall getStmtsStmtParserRuleCall_1_0() { return cStmtsStmtParserRuleCall_1_0; }
	}

	public class Python_inputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.controlflow.SpellGrammar.python_input");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSingle_inputParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFile_inputParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cEval_inputParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//python_input:
		//	single_input | file_input | eval_input;
		@Override public ParserRule getRule() { return rule; }

		//single_input | file_input | eval_input
		public Alternatives getAlternatives() { return cAlternatives; }

		//single_input
		public RuleCall getSingle_inputParserRuleCall_0() { return cSingle_inputParserRuleCall_0; }

		//file_input
		public RuleCall getFile_inputParserRuleCall_1() { return cFile_inputParserRuleCall_1; }

		//eval_input
		public RuleCall getEval_inputParserRuleCall_2() { return cEval_inputParserRuleCall_2; }
	}

	public class Single_inputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.controlflow.SpellGrammar.single_input");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSingle_inputAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cStmtAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cStmtSimple_stmtParserRuleCall_1_0_0 = (RuleCall)cStmtAssignment_1_0.eContents().get(0);
		private final Assignment cStmtAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cStmtCompound_stmtParserRuleCall_1_1_0 = (RuleCall)cStmtAssignment_1_1.eContents().get(0);
		
		//single_input:
		//	{single_input} (stmt=simple_stmt | stmt=compound_stmt);
		@Override public ParserRule getRule() { return rule; }

		//{single_input} (stmt=simple_stmt | stmt=compound_stmt)
		public Group getGroup() { return cGroup; }

		//{single_input}
		public Action getSingle_inputAction_0() { return cSingle_inputAction_0; }

		//(stmt=simple_stmt | stmt=compound_stmt)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//stmt=simple_stmt
		public Assignment getStmtAssignment_1_0() { return cStmtAssignment_1_0; }

		//simple_stmt
		public RuleCall getStmtSimple_stmtParserRuleCall_1_0_0() { return cStmtSimple_stmtParserRuleCall_1_0_0; }

		//stmt=compound_stmt
		public Assignment getStmtAssignment_1_1() { return cStmtAssignment_1_1; }

		//compound_stmt
		public RuleCall getStmtCompound_stmtParserRuleCall_1_1_0() { return cStmtCompound_stmtParserRuleCall_1_1_0; }
	}

	public class Eval_inputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.controlflow.SpellGrammar.eval_input");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEval_inputAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTestlistAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTestlistTestlistParserRuleCall_1_0 = (RuleCall)cTestlistAssignment_1.eContents().get(0);
		
		//eval_input:
		//	{eval_input} testlist=testlist;
		@Override public ParserRule getRule() { return rule; }

		//{eval_input} testlist=testlist
		public Group getGroup() { return cGroup; }

		//{eval_input}
		public Action getEval_inputAction_0() { return cEval_inputAction_0; }

		//testlist=testlist
		public Assignment getTestlistAssignment_1() { return cTestlistAssignment_1; }

		//testlist
		public RuleCall getTestlistTestlistParserRuleCall_1_0() { return cTestlistTestlistParserRuleCall_1_0; }
	}

	public class DecoratorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.controlflow.SpellGrammar.decorator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCommercialAtKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDotted_nameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDotted_nameDotted_nameParserRuleCall_1_0 = (RuleCall)cDotted_nameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cRoundBracketAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Keyword cRoundBracketLeftParenthesisKeyword_2_0_0 = (Keyword)cRoundBracketAssignment_2_0.eContents().get(0);
		private final Assignment cArglistAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cArglistArglistParserRuleCall_2_1_0 = (RuleCall)cArglistAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//decorator:
		//	'@' dotted_name=dotted_name (roundBracket?='(' arglist=arglist? ')')?;
		@Override public ParserRule getRule() { return rule; }

		//'@' dotted_name=dotted_name (roundBracket?='(' arglist=arglist? ')')?
		public Group getGroup() { return cGroup; }

		//'@'
		public Keyword getCommercialAtKeyword_0() { return cCommercialAtKeyword_0; }

		//dotted_name=dotted_name
		public Assignment getDotted_nameAssignment_1() { return cDotted_nameAssignment_1; }

		//dotted_name
		public RuleCall getDotted_nameDotted_nameParserRuleCall_1_0() { return cDotted_nameDotted_nameParserRuleCall_1_0; }

		//(roundBracket?='(' arglist=arglist? ')')?
		public Group getGroup_2() { return cGroup_2; }

		//roundBracket?='('
		public Assignment getRoundBracketAssignment_2_0() { return cRoundBracketAssignment_2_0; }

		//'('
		public Keyword getRoundBracketLeftParenthesisKeyword_2_0_0() { return cRoundBracketLeftParenthesisKeyword_2_0_0; }

		//arglist=arglist?
		public Assignment getArglistAssignment_2_1() { return cArglistAssignment_2_1; }

		//arglist
		public RuleCall getArglistArglistParserRuleCall_2_1_0() { return cArglistArglistParserRuleCall_2_1_0; }

		//')'
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
	}

	public class DecoratorsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.controlflow.SpellGrammar.decorators");
		private final Assignment cDecoratorsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cDecoratorsDecoratorParserRuleCall_0 = (RuleCall)cDecoratorsAssignment.eContents().get(0);
		
		//decorators:
		//	decorators+=decorator+;
		@Override public ParserRule getRule() { return rule; }

		//decorators+=decorator+
		public Assignment getDecoratorsAssignment() { return cDecoratorsAssignment; }

		//decorator
		public RuleCall getDecoratorsDecoratorParserRuleCall_0() { return cDecoratorsDecoratorParserRuleCall_0; }
	}

	public class DecoratedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.controlflow.SpellGrammar.decorated");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDecoratorsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDecoratorsDecoratorsParserRuleCall_0_0 = (RuleCall)cDecoratorsAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cDefAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cDefClassdefParserRuleCall_1_0_0 = (RuleCall)cDefAssignment_1_0.eContents().get(0);
		private final Assignment cDefAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cDefFuncdefParserRuleCall_1_1_0 = (RuleCall)cDefAssignment_1_1.eContents().get(0);
		
		//decorated:
		//	decorators=decorators (def=classdef | def=funcdef);
		@Override public ParserRule getRule() { return rule; }

		//decorators=decorators (def=classdef | def=funcdef)
		public Group getGroup() { return cGroup; }

		//decorators=decorators
		public Assignment getDecoratorsAssignment_0() { return cDecoratorsAssignment_0; }

		//decorators
		public RuleCall getDecoratorsDecoratorsParserRuleCall_0_0() { return cDecoratorsDecoratorsParserRuleCall_0_0; }

		//(def=classdef | def=funcdef)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//def=classdef
		public Assignment getDefAssignment_1_0() { return cDefAssignment_1_0; }

		//classdef
		public RuleCall getDefClassdefParserRuleCall_1_0_0() { return cDefClassdefParserRuleCall_1_0_0; }

		//def=funcdef
		public Assignment getDefAssignment_1_1() { return cDefAssignment_1_1; }

		//funcdef
		public RuleCall getDefFuncdefParserRuleCall_1_1_0() { return cDefFuncdefParserRuleCall_1_1_0; }
	}

	public class FuncdefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.controlflow.SpellGrammar.funcdef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDefKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameNAMEParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cParametersAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParametersParametersParserRuleCall_2_0 = (RuleCall)cParametersAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cSuiteAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cSuiteSuiteParserRuleCall_4_0 = (RuleCall)cSuiteAssignment_4.eContents().get(0);
		private final RuleCall cENDDEFTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//funcdef:
		//	'def' name=NAME parameters=parameters ':' suite=suite ENDDEF;
		@Override public ParserRule getRule() { return rule; }

		//'def' name=NAME parameters=parameters ':' suite=suite ENDDEF
		public Group getGroup() { return cGroup; }

		//'def'
		public Keyword getDefKeyword_0() { return cDefKeyword_0; }

		//name=NAME
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//NAME
		public RuleCall getNameNAMEParserRuleCall_1_0() { return cNameNAMEParserRuleCall_1_0; }

		//parameters=parameters
		public Assignment getParametersAssignment_2() { return cParametersAssignment_2; }

		//parameters
		public RuleCall getParametersParametersParserRuleCall_2_0() { return cParametersParametersParserRuleCall_2_0; }

		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }

		//suite=suite
		public Assignment getSuiteAssignment_4() { return cSuiteAssignment_4; }

		//suite
		public RuleCall getSuiteSuiteParserRuleCall_4_0() { return cSuiteSuiteParserRuleCall_4_0; }

		//ENDDEF
		public RuleCall getENDDEFTerminalRuleCall_5() { return cENDDEFTerminalRuleCall_5; }
	}

	public class ParametersElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.controlflow.SpellGrammar.parameters");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cParametersAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cVarargslistAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVarargslistVarargslistParserRuleCall_2_0 = (RuleCall)cVarargslistAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//parameters:
		//	{parameters} '(' varargslist=varargslist? ','? ')';
		@Override public ParserRule getRule() { return rule; }

		//{parameters} '(' varargslist=varargslist? ','? ')'
		public Group getGroup() { return cGroup; }

		//{parameters}
		public Action getParametersAction_0() { return cParametersAction_0; }

		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//varargslist=varargslist?
		public Assignment getVarargslistAssignment_2() { return cVarargslistAssignment_2; }

		//varargslist
		public RuleCall getVarargslistVarargslistParserRuleCall_2_0() { return cVarargslistVarargslistParserRuleCall_2_0; }

		//','?
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }

		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class Varargslist_elementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.controlflow.SpellGrammar.varargslist_element");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFpdefAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFpdefFpdefParserRuleCall_0_0 = (RuleCall)cFpdefAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cTestAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTestTestParserRuleCall_1_1_0 = (RuleCall)cTestAssignment_1_1.eContents().get(0);
		
		//varargslist_element:
		//	fpdef=fpdef ('=' test=test)?;
		@Override public ParserRule getRule() { return rule; }

		//fpdef=fpdef ('=' test=test)?
		public Group getGroup() { return cGroup; }

		//fpdef=fpdef
		public Assignment getFpdefAssignment_0() { return cFpdefAssignment_0; }

		//fpdef
		public RuleCall getFpdefFpdefParserRuleCall_0_0() { return cFpdefFpdefParserRuleCall_0_0; }

		//('=' test=test)?
		public Group getGroup_1() { return cGroup_1; }

		//'='
		public Keyword getEqualsSignKeyword_1_0() { return cEqualsSignKeyword_1_0; }

		//test=test
		public Assignment getTestAssignment_1_1() { return cTestAssignment_1_1; }

		//test
		public RuleCall getTestTestParserRuleCall_1_1_0() { return cTestTestParserRuleCall_1_1_0; }
	}

	public class VarargslistElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.controlflow.SpellGrammar.varargslist");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cGroup_0.eContents().get(0);
		private final Assignment cVarargs1Assignment_0_0_0 = (Assignment)cGroup_0_0.eContents().get(0);
		private final RuleCall cVarargs1Varargslist_elementParserRuleCall_0_0_0_0 = (RuleCall)cVarargs1Assignment_0_0_0.eContents().get(0);
		private final Keyword cCommaKeyword_0_0_1 = (Keyword)cGroup_0_0.eContents().get(1);
		private final Alternatives cAlternatives_0_1 = (Alternatives)cGroup_0.eContents().get(1);
		private final Group cGroup_0_1_0 = (Group)cAlternatives_0_1.eContents().get(0);
		private final Keyword cAsteriskKeyword_0_1_0_0 = (Keyword)cGroup_0_1_0.eContents().get(0);
		private final Assignment cDot1NameAssignment_0_1_0_1 = (Assignment)cGroup_0_1_0.eContents().get(1);
		private final RuleCall cDot1NameNAMEParserRuleCall_0_1_0_1_0 = (RuleCall)cDot1NameAssignment_0_1_0_1.eContents().get(0);
		private final Group cGroup_0_1_0_2 = (Group)cGroup_0_1_0.eContents().get(2);
		private final Keyword cCommaKeyword_0_1_0_2_0 = (Keyword)cGroup_0_1_0_2.eContents().get(0);
		private final Keyword cAsteriskAsteriskKeyword_0_1_0_2_1 = (Keyword)cGroup_0_1_0_2.eContents().get(1);
		private final Assignment cDot2NameAssignment_0_1_0_2_2 = (Assignment)cGroup_0_1_0_2.eContents().get(2);
		private final RuleCall cDot2NameNAMEParserRuleCall_0_1_0_2_2_0 = (RuleCall)cDot2NameAssignment_0_1_0_2_2.eContents().get(0);
		private final Group cGroup_0_1_1 = (Group)cAlternatives_0_1.eContents().get(1);
		private final Keyword cAsteriskAsteriskKeyword_0_1_1_0 = (Keyword)cGroup_0_1_1.eContents().get(0);
		private final Assignment cDot2NameAssignment_0_1_1_1 = (Assignment)cGroup_0_1_1.eContents().get(1);
		private final RuleCall cDot2NameNAMEParserRuleCall_0_1_1_1_0 = (RuleCall)cDot2NameAssignment_0_1_1_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cVararg2Assignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cVararg2Varargslist_elementParserRuleCall_1_0_0 = (RuleCall)cVararg2Assignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cVarargs3Assignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cVarargs3Varargslist_elementParserRuleCall_1_1_1_0 = (RuleCall)cVarargs3Assignment_1_1_1.eContents().get(0);
		private final Assignment cAdditionalCommaAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final Keyword cAdditionalCommaCommaKeyword_1_2_0 = (Keyword)cAdditionalCommaAssignment_1_2.eContents().get(0);
		
		//varargslist:
		//	(varargs1+=varargslist_element ',')* ('*' dot1Name=NAME (',' '**' dot2Name=NAME)? | '**' dot2Name=NAME) |
		//	vararg2=varargslist_element (',' varargs3+=varargslist_element)* additionalComma?=','?;
		@Override public ParserRule getRule() { return rule; }

		//(varargs1+=varargslist_element ',')* ('*' dot1Name=NAME (',' '**' dot2Name=NAME)? | '**' dot2Name=NAME) |
		//vararg2=varargslist_element (',' varargs3+=varargslist_element)* additionalComma?=','?
		public Alternatives getAlternatives() { return cAlternatives; }

		//(varargs1+=varargslist_element ',')* ('*' dot1Name=NAME (',' '**' dot2Name=NAME)? | '**' dot2Name=NAME)
		public Group getGroup_0() { return cGroup_0; }

		//(varargs1+=varargslist_element ',')*
		public Group getGroup_0_0() { return cGroup_0_0; }

		//varargs1+=varargslist_element
		public Assignment getVarargs1Assignment_0_0_0() { return cVarargs1Assignment_0_0_0; }

		//varargslist_element
		public RuleCall getVarargs1Varargslist_elementParserRuleCall_0_0_0_0() { return cVarargs1Varargslist_elementParserRuleCall_0_0_0_0; }

		//','
		public Keyword getCommaKeyword_0_0_1() { return cCommaKeyword_0_0_1; }

		//('*' dot1Name=NAME (',' '**' dot2Name=NAME)? | '**' dot2Name=NAME)
		public Alternatives getAlternatives_0_1() { return cAlternatives_0_1; }

		//'*' dot1Name=NAME (',' '**' dot2Name=NAME)?
		public Group getGroup_0_1_0() { return cGroup_0_1_0; }

		//'*'
		public Keyword getAsteriskKeyword_0_1_0_0() { return cAsteriskKeyword_0_1_0_0; }

		//dot1Name=NAME
		public Assignment getDot1NameAssignment_0_1_0_1() { return cDot1NameAssignment_0_1_0_1; }

		//NAME
		public RuleCall getDot1NameNAMEParserRuleCall_0_1_0_1_0() { return cDot1NameNAMEParserRuleCall_0_1_0_1_0; }

		//(',' '**' dot2Name=NAME)?
		public Group getGroup_0_1_0_2() { return cGroup_0_1_0_2; }

		//','
		public Keyword getCommaKeyword_0_1_0_2_0() { return cCommaKeyword_0_1_0_2_0; }

		//'**'
		public Keyword getAsteriskAsteriskKeyword_0_1_0_2_1() { return cAsteriskAsteriskKeyword_0_1_0_2_1; }

		//dot2Name=NAME
		public Assignment getDot2NameAssignment_0_1_0_2_2() { return cDot2NameAssignment_0_1_0_2_2; }

		//NAME
		public RuleCall getDot2NameNAMEParserRuleCall_0_1_0_2_2_0() { return cDot2NameNAMEParserRuleCall_0_1_0_2_2_0; }

		//'**' dot2Name=NAME
		public Group getGroup_0_1_1() { return cGroup_0_1_1; }

		//'**'
		public Keyword getAsteriskAsteriskKeyword_0_1_1_0() { return cAsteriskAsteriskKeyword_0_1_1_0; }

		//dot2Name=NAME
		public Assignment getDot2NameAssignment_0_1_1_1() { return cDot2NameAssignment_0_1_1_1; }

		//NAME
		public RuleCall getDot2NameNAMEParserRuleCall_0_1_1_1_0() { return cDot2NameNAMEParserRuleCall_0_1_1_1_0; }

		//vararg2=varargslist_element (',' varargs3+=varargslist_element)* additionalComma?=','?
		public Group getGroup_1() { return cGroup_1; }

		//vararg2=varargslist_element
		public Assignment getVararg2Assignment_1_0() { return cVararg2Assignment_1_0; }

		//varargslist_element
		public RuleCall getVararg2Varargslist_elementParserRuleCall_1_0_0() { return cVararg2Varargslist_elementParserRuleCall_1_0_0; }

		//(',' varargs3+=varargslist_element)*
		public Group getGroup_1_1() { return cGroup_1_1; }

		//','
		public Keyword getCommaKeyword_1_1_0() { return cCommaKeyword_1_1_0; }

		//varargs3+=varargslist_element
		public Assignment getVarargs3Assignment_1_1_1() { return cVarargs3Assignment_1_1_1; }

		//varargslist_element
		public RuleCall getVarargs3Varargslist_elementParserRuleCall_1_1_1_0() { return cVarargs3Varargslist_elementParserRuleCall_1_1_1_0; }

		//additionalComma?=','?
		public Assignment getAdditionalCommaAssignment_1_2() { return cAdditionalCommaAssignment_1_2; }

		//','
		public Keyword getAdditionalCommaCommaKeyword_1_2_0() { return cAdditionalCommaCommaKeyword_1_2_0; }
	}

	public class FpdefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.controlflow.SpellGrammar.fpdef");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cNameNAMEParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cFplistAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cFplistFplistParserRuleCall_1_1_0 = (RuleCall)cFplistAssignment_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//fpdef:
		//	name=NAME | '(' fplist=fplist ')';
		@Override public ParserRule getRule() { return rule; }

		//name=NAME | '(' fplist=fplist ')'
		public Alternatives getAlternatives() { return cAlternatives; }

		//name=NAME
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//NAME
		public RuleCall getNameNAMEParserRuleCall_0_0() { return cNameNAMEParserRuleCall_0_0; }

		//'(' fplist=fplist ')'
		public Group getGroup_1() { return cGroup_1; }

		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }

		//fplist=fplist
		public Assignment getFplistAssignment_1_1() { return cFplistAssignment_1_1; }

		//fplist
		public RuleCall getFplistFplistParserRuleCall_1_1_0() { return cFplistFplistParserRuleCall_1_1_0; }

		//')'
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}

	public class FplistElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.controlflow.SpellGrammar.fplist");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDef1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDef1FpdefParserRuleCall_0_0 = (RuleCall)cDef1Assignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cDefinitionsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cDefinitionsFpdefParserRuleCall_1_1_0 = (RuleCall)cDefinitionsAssignment_1_1.eContents().get(0);
		private final Assignment cOptionalSemicolonAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cOptionalSemicolonSemicolonKeyword_2_0 = (Keyword)cOptionalSemicolonAssignment_2.eContents().get(0);
		
		//fplist:
		//	def1=fpdef (',' definitions+=fpdef)* optionalSemicolon?=';'?;
		@Override public ParserRule getRule() { return rule; }

		//def1=fpdef (',' definitions+=fpdef)* optionalSemicolon?=';'?
		public Group getGroup() { return cGroup; }

		//def1=fpdef
		public Assignment getDef1Assignment_0() { return cDef1Assignment_0; }

		//fpdef
		public RuleCall getDef1FpdefParserRuleCall_0_0() { return cDef1FpdefParserRuleCall_0_0; }

		//(',' definitions+=fpdef)*
		public Group getGroup_1() { return cGroup_1; }

		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//definitions+=fpdef
		public Assignment getDefinitionsAssignment_1_1() { return cDefinitionsAssignment_1_1; }

		//fpdef
		public RuleCall getDefinitionsFpdefParserRuleCall_1_1_0() { return cDefinitionsFpdefParserRuleCall_1_1_0; }

		//optionalSemicolon?=';'?
		public Assignment getOptionalSemicolonAssignment_2() { return cOptionalSemicolonAssignment_2; }

		//';'
		public Keyword getOptionalSemicolonSemicolonKeyword_2_0() { return cOptionalSemicolonSemicolonKeyword_2_0; }
	}

	public class StmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.controlflow.SpellGrammar.stmt");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSimple_stmtParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCompound_stmtParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//stmt:
		//	simple_stmt | compound_stmt;
		@Override public ParserRule getRule() { return rule; }

		//simple_stmt | compound_stmt
		public Alternatives getAlternatives() { return cAlternatives; }

		//simple_stmt
		public RuleCall getSimple_stmtParserRuleCall_0() { return cSimple_stmtParserRuleCall_0; }

		//compound_stmt
		public RuleCall getCompound_stmtParserRuleCall_1() { return cCompound_stmtParserRuleCall_1; }
	}

	public class Simple_stmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.controlflow.SpellGrammar.simple_stmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSmall_stmtParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cSimple_stmtStmtAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cSemicolonKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cStmtAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cStmtSmall_stmtParserRuleCall_1_1_1_0 = (RuleCall)cStmtAssignment_1_1_1.eContents().get(0);
		private final Assignment cAdditionalCommaAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final Keyword cAdditionalCommaCommaKeyword_1_2_0 = (Keyword)cAdditionalCommaAssignment_1_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//simple_stmt:
		//	small_stmt ({simple_stmt.stmt+=current} (';' stmt+=small_stmt)+ additionalComma?=','?)? ';'?;
		@Override public ParserRule getRule() { return rule; }

		//small_stmt ({simple_stmt.stmt+=current} (';' stmt+=small_stmt)+ additionalComma?=','?)? ';'?
		public Group getGroup() { return cGroup; }

		//small_stmt
		public RuleCall getSmall_stmtParserRuleCall_0() { return cSmall_stmtParserRuleCall_0; }

		//({simple_stmt.stmt+=current} (';' stmt+=small_stmt)+ additionalComma?=','?)?
		public Group getGroup_1() { return cGroup_1; }

		//{simple_stmt.stmt+=current}
		public Action getSimple_stmtStmtAction_1_0() { return cSimple_stmtStmtAction_1_0; }

		//(';' stmt+=small_stmt)+
		public Group getGroup_1_1() { return cGroup_1_1; }

		//';'
		public Keyword getSemicolonKeyword_1_1_0() { return cSemicolonKeyword_1_1_0; }

		//stmt+=small_stmt
		public Assignment getStmtAssignment_1_1_1() { return cStmtAssignment_1_1_1; }

		//small_stmt
		public RuleCall getStmtSmall_stmtParserRuleCall_1_1_1_0() { return cStmtSmall_stmtParserRuleCall_1_1_1_0; }

		//additionalComma?=','?
		public Assignment getAdditionalCommaAssignment_1_2() { return cAdditionalCommaAssignment_1_2; }

		//','
		public Keyword getAdditionalCommaCommaKeyword_1_2_0() { return cAdditionalCommaCommaKeyword_1_2_0; }

		//';'?
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class Small_stmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.controlflow.SpellGrammar.small_stmt");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExpr_stmtParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDel_stmtParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPass_stmtParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cFlow_stmtParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cImport_stmtParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cGlobal_stmtParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cExec_stmtParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cAssert_stmtParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		
		//small_stmt:
		//	expr_stmt | del_stmt | pass_stmt | flow_stmt | import_stmt | global_stmt | exec_stmt | assert_stmt;
		@Override public ParserRule getRule() { return rule; }

		//expr_stmt | del_stmt | pass_stmt | flow_stmt | import_stmt | global_stmt | exec_stmt | assert_stmt
		public Alternatives getAlternatives() { return cAlternatives; }

		//expr_stmt
		public RuleCall getExpr_stmtParserRuleCall_0() { return cExpr_stmtParserRuleCall_0; }

		//del_stmt
		public RuleCall getDel_stmtParserRuleCall_1() { return cDel_stmtParserRuleCall_1; }

		//pass_stmt
		public RuleCall getPass_stmtParserRuleCall_2() { return cPass_stmtParserRuleCall_2; }

		//flow_stmt
		public RuleCall getFlow_stmtParserRuleCall_3() { return cFlow_stmtParserRuleCall_3; }

		//import_stmt
		public RuleCall getImport_stmtParserRuleCall_4() { return cImport_stmtParserRuleCall_4; }

		//global_stmt
		public RuleCall getGlobal_stmtParserRuleCall_5() { return cGlobal_stmtParserRuleCall_5; }

		//exec_stmt
		public RuleCall getExec_stmtParserRuleCall_6() { return cExec_stmtParserRuleCall_6; }

		//assert_stmt
		public RuleCall getAssert_stmtParserRuleCall_7() { return cAssert_stmtParserRuleCall_7; }
	}

	public class Expr_stmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.controlflow.SpellGrammar.expr_stmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTestlistParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Action cExpr_stmtLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Assignment cSymbolAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cSymbolAugassignParserRuleCall_1_0_1_0 = (RuleCall)cSymbolAssignment_1_0_1.eContents().get(0);
		private final Assignment cRightAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cRightYield_or_testlistParserRuleCall_1_0_2_0 = (RuleCall)cRightAssignment_1_0_2.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Action cAssignment_stmtLeftAction_1_1_0 = (Action)cGroup_1_1.eContents().get(0);
		private final Group cGroup_1_1_1 = (Group)cGroup_1_1.eContents().get(1);
		private final Assignment cSymbolAssignment_1_1_1_0 = (Assignment)cGroup_1_1_1.eContents().get(0);
		private final Keyword cSymbolEqualsSignKeyword_1_1_1_0_0 = (Keyword)cSymbolAssignment_1_1_1_0.eContents().get(0);
		private final Assignment cAssignmentsAssignment_1_1_1_1 = (Assignment)cGroup_1_1_1.eContents().get(1);
		private final RuleCall cAssignmentsYield_or_testlistParserRuleCall_1_1_1_1_0 = (RuleCall)cAssignmentsAssignment_1_1_1_1.eContents().get(0);
		
		//expr_stmt:
		//	testlist ({expr_stmt.left=current} symbol=augassign right=yield_or_testlist | {assignment_stmt.left=current}
		//	(symbol='=' assignments+=yield_or_testlist)+)?;
		@Override public ParserRule getRule() { return rule; }

		//testlist ({expr_stmt.left=current} symbol=augassign right=yield_or_testlist | {assignment_stmt.left=current} (symbol='='
		//assignments+=yield_or_testlist)+)?
		public Group getGroup() { return cGroup; }

		//testlist
		public RuleCall getTestlistParserRuleCall_0() { return cTestlistParserRuleCall_0; }

		//({expr_stmt.left=current} symbol=augassign right=yield_or_testlist | {assignment_stmt.left=current} (symbol='='
		//assignments+=yield_or_testlist)+)?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//{expr_stmt.left=current} symbol=augassign right=yield_or_testlist
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{expr_stmt.left=current}
		public Action getExpr_stmtLeftAction_1_0_0() { return cExpr_stmtLeftAction_1_0_0; }

		//symbol=augassign
		public Assignment getSymbolAssignment_1_0_1() { return cSymbolAssignment_1_0_1; }

		//augassign
		public RuleCall getSymbolAugassignParserRuleCall_1_0_1_0() { return cSymbolAugassignParserRuleCall_1_0_1_0; }

		//right=yield_or_testlist
		public Assignment getRightAssignment_1_0_2() { return cRightAssignment_1_0_2; }

		//yield_or_testlist
		public RuleCall getRightYield_or_testlistParserRuleCall_1_0_2_0() { return cRightYield_or_testlistParserRuleCall_1_0_2_0; }

		//{assignment_stmt.left=current} (symbol='=' assignments+=yield_or_testlist)+
		public Group getGroup_1_1() { return cGroup_1_1; }

		//{assignment_stmt.left=current}
		public Action getAssignment_stmtLeftAction_1_1_0() { return cAssignment_stmtLeftAction_1_1_0; }

		//(symbol='=' assignments+=yield_or_testlist)+
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }

		//symbol='='
		public Assignment getSymbolAssignment_1_1_1_0() { return cSymbolAssignment_1_1_1_0; }

		//'='
		public Keyword getSymbolEqualsSignKeyword_1_1_1_0_0() { return cSymbolEqualsSignKeyword_1_1_1_0_0; }

		//assignments+=yield_or_testlist
		public Assignment getAssignmentsAssignment_1_1_1_1() { return cAssignmentsAssignment_1_1_1_1; }

		//yield_or_testlist
		public RuleCall getAssignmentsYield_or_testlistParserRuleCall_1_1_1_1_0() { return cAssignmentsYield_or_testlistParserRuleCall_1_1_1_1_0; }
	}

	public class Yield_or_testlistElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.controlflow.SpellGrammar.yield_or_testlist");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cYield_exprParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTestlistParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//yield_or_testlist:
		//	yield_expr | testlist;
		@Override public ParserRule getRule() { return rule; }

		//yield_expr | testlist
		public Alternatives getAlternatives() { return cAlternatives; }

		//yield_expr
		public RuleCall getYield_exprParserRuleCall_0() { return cYield_exprParserRuleCall_0; }

		//testlist
		public RuleCall getTestlistParserRuleCall_1() { return cTestlistParserRuleCall_1; }
	}

	public class AugassignElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.controlflow.SpellGrammar.augassign");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cPlusSignKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Keyword cHyphenMinusEqualsSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cAsteriskEqualsSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cSolidusEqualsSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cPercentSignEqualsSignKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cAmpersandEqualsSignKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cVerticalLineEqualsSignKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cCircumflexAccentEqualsSignKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cLessThanSignLessThanSignEqualsSignKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cGreaterThanSignGreaterThanSignEqualsSignKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cAsteriskAsteriskEqualsSignKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final Keyword cSolidusSolidusEqualsSignKeyword_11 = (Keyword)cAlternatives.eContents().get(11);
		
		//augassign:
		//	'+' '=' | '-=' | '*=' | '/=' | '%=' | '&=' | '|=' | '^=' |
		//	'<<=' | '>>=' | '**=' | '//=';
		@Override public ParserRule getRule() { return rule; }

		//'+' '=' | '-=' | '*=' | '/=' | '%=' | '&=' | '|=' | '^=' | '<<=' | '>>=' | '**=' | '//='
		public Alternatives getAlternatives() { return cAlternatives; }

		//'+' '='
		public Group getGroup_0() { return cGroup_0; }

		//'+'
		public Keyword getPlusSignKeyword_0_0() { return cPlusSignKeyword_0_0; }

		//'='
		public Keyword getEqualsSignKeyword_0_1() { return cEqualsSignKeyword_0_1; }

		//'-='
		public Keyword getHyphenMinusEqualsSignKeyword_1() { return cHyphenMinusEqualsSignKeyword_1; }

		//'*='
		public Keyword getAsteriskEqualsSignKeyword_2() { return cAsteriskEqualsSignKeyword_2; }

		//'/='
		public Keyword getSolidusEqualsSignKeyword_3() { return cSolidusEqualsSignKeyword_3; }

		//'%='
		public Keyword getPercentSignEqualsSignKeyword_4() { return cPercentSignEqualsSignKeyword_4; }

		//'&='
		public Keyword getAmpersandEqualsSignKeyword_5() { return cAmpersandEqualsSignKeyword_5; }

		//'|='
		public Keyword getVerticalLineEqualsSignKeyword_6() { return cVerticalLineEqualsSignKeyword_6; }

		//'^='
		public Keyword getCircumflexAccentEqualsSignKeyword_7() { return cCircumflexAccentEqualsSignKeyword_7; }

		//'<<='
		public Keyword getLessThanSignLessThanSignEqualsSignKeyword_8() { return cLessThanSignLessThanSignEqualsSignKeyword_8; }

		//'>>='
		public Keyword getGreaterThanSignGreaterThanSignEqualsSignKeyword_9() { return cGreaterThanSignGreaterThanSignEqualsSignKeyword_9; }

		//'**='
		public Keyword getAsteriskAsteriskEqualsSignKeyword_10() { return cAsteriskAsteriskEqualsSignKeyword_10; }

		//'//='
		public Keyword getSolidusSolidusEqualsSignKeyword_11() { return cSolidusSolidusEqualsSignKeyword_11; }
	}

	public class Del_stmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.controlflow.SpellGrammar.del_stmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDelKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExprlistAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprlistExprlistParserRuleCall_1_0 = (RuleCall)cExprlistAssignment_1.eContents().get(0);
		
		//// For normal assignments, additional restrictions enforced by the interpreter
		//del_stmt:
		//	'del' exprlist=exprlist;
		@Override public ParserRule getRule() { return rule; }

		//'del' exprlist=exprlist
		public Group getGroup() { return cGroup; }

		//'del'
		public Keyword getDelKeyword_0() { return cDelKeyword_0; }

		//exprlist=exprlist
		public Assignment getExprlistAssignment_1() { return cExprlistAssignment_1; }

		//exprlist
		public RuleCall getExprlistExprlistParserRuleCall_1_0() { return cExprlistExprlistParserRuleCall_1_0; }
	}

	public class Pass_stmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.controlflow.SpellGrammar.pass_stmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPass_stmtAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPassKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//pass_stmt:
		//	{pass_stmt} 'pass';
		@Override public ParserRule getRule() { return rule; }

		//{pass_stmt} 'pass'
		public Group getGroup() { return cGroup; }

		//{pass_stmt}
		public Action getPass_stmtAction_0() { return cPass_stmtAction_0; }

		//'pass'
		public Keyword getPassKeyword_1() { return cPassKeyword_1; }
	}

	public class Flow_stmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.controlflow.SpellGrammar.flow_stmt");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBreak_stmtParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cContinue_stmtParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cReturn_stmtParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cRaise_stmtParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cYield_stmtParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//flow_stmt:
		//	break_stmt | continue_stmt | return_stmt | raise_stmt | yield_stmt;
		@Override public ParserRule getRule() { return rule; }

		//break_stmt | continue_stmt | return_stmt | raise_stmt | yield_stmt
		public Alternatives getAlternatives() { return cAlternatives; }

		//break_stmt
		public RuleCall getBreak_stmtParserRuleCall_0() { return cBreak_stmtParserRuleCall_0; }

		//continue_stmt
		public RuleCall getContinue_stmtParserRuleCall_1() { return cContinue_stmtParserRuleCall_1; }

		//return_stmt
		public RuleCall getReturn_stmtParserRuleCall_2() { return cReturn_stmtParserRuleCall_2; }

		//raise_stmt
		public RuleCall getRaise_stmtParserRuleCall_3() { return cRaise_stmtParserRuleCall_3; }

		//yield_stmt
		public RuleCall getYield_stmtParserRuleCall_4() { return cYield_stmtParserRuleCall_4; }
	}

	public class Break_stmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.controlflow.SpellGrammar.break_stmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBreak_stmtAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cBreakKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//break_stmt:
		//	{break_stmt} 'break';
		@Override public ParserRule getRule() { return rule; }

		//{break_stmt} 'break'
		public Group getGroup() { return cGroup; }

		//{break_stmt}
		public Action getBreak_stmtAction_0() { return cBreak_stmtAction_0; }

		//'break'
		public Keyword getBreakKeyword_1() { return cBreakKeyword_1; }
	}

	public class Continue_stmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.controlflow.SpellGrammar.continue_stmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cContinue_stmtAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cContinueKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//continue_stmt:
		//	{continue_stmt} 'continue';
		@Override public ParserRule getRule() { return rule; }

		//{continue_stmt} 'continue'
		public Group getGroup() { return cGroup; }

		//{continue_stmt}
		public Action getContinue_stmtAction_0() { return cContinue_stmtAction_0; }

		//'continue'
		public Keyword getContinueKeyword_1() { return cContinueKeyword_1; }
	}

	public class Return_stmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.controlflow.SpellGrammar.return_stmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cReturn_stmtAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cReturnKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTestlistAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTestlistTestlistParserRuleCall_2_0 = (RuleCall)cTestlistAssignment_2.eContents().get(0);
		
		//return_stmt:
		//	{return_stmt} 'return' testlist=testlist?;
		@Override public ParserRule getRule() { return rule; }

		//{return_stmt} 'return' testlist=testlist?
		public Group getGroup() { return cGroup; }

		//{return_stmt}
		public Action getReturn_stmtAction_0() { return cReturn_stmtAction_0; }

		//'return'
		public Keyword getReturnKeyword_1() { return cReturnKeyword_1; }

		//testlist=testlist?
		public Assignment getTestlistAssignment_2() { return cTestlistAssignment_2; }

		//testlist
		public RuleCall getTestlistTestlistParserRuleCall_2_0() { return cTestlistTestlistParserRuleCall_2_0; }
	}

	public class Yield_stmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.controlflow.SpellGrammar.yield_stmt");
		private final Assignment cYield_exprAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cYield_exprYield_exprParserRuleCall_0 = (RuleCall)cYield_exprAssignment.eContents().get(0);
		
		//yield_stmt:
		//	yield_expr=yield_expr;
		@Override public ParserRule getRule() { return rule; }

		//yield_expr=yield_expr
		public Assignment getYield_exprAssignment() { return cYield_exprAssignment; }

		//yield_expr
		public RuleCall getYield_exprYield_exprParserRuleCall_0() { return cYield_exprYield_exprParserRuleCall_0; }
	}

	public class Raise_stmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.controlflow.SpellGrammar.raise_stmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRaise_stmtAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRaiseKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cTestsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cTestsTestParserRuleCall_2_0_0 = (RuleCall)cTestsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cTestsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cTestsTestParserRuleCall_2_1_1_0 = (RuleCall)cTestsAssignment_2_1_1.eContents().get(0);
		private final Group cGroup_2_1_2 = (Group)cGroup_2_1.eContents().get(2);
		private final Keyword cCommaKeyword_2_1_2_0 = (Keyword)cGroup_2_1_2.eContents().get(0);
		private final Assignment cTestsAssignment_2_1_2_1 = (Assignment)cGroup_2_1_2.eContents().get(1);
		private final RuleCall cTestsTestParserRuleCall_2_1_2_1_0 = (RuleCall)cTestsAssignment_2_1_2_1.eContents().get(0);
		
		//raise_stmt:
		//	{raise_stmt} 'raise' (tests+=test (',' tests+=test (',' tests+=test)?)?)?;
		@Override public ParserRule getRule() { return rule; }

		//{raise_stmt} 'raise' (tests+=test (',' tests+=test (',' tests+=test)?)?)?
		public Group getGroup() { return cGroup; }

		//{raise_stmt}
		public Action getRaise_stmtAction_0() { return cRaise_stmtAction_0; }

		//'raise'
		public Keyword getRaiseKeyword_1() { return cRaiseKeyword_1; }

		//(tests+=test (',' tests+=test (',' tests+=test)?)?)?
		public Group getGroup_2() { return cGroup_2; }

		//tests+=test
		public Assignment getTestsAssignment_2_0() { return cTestsAssignment_2_0; }

		//test
		public RuleCall getTestsTestParserRuleCall_2_0_0() { return cTestsTestParserRuleCall_2_0_0; }

		//(',' tests+=test (',' tests+=test)?)?
		public Group getGroup_2_1() { return cGroup_2_1; }

		//','
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//tests+=test
		public Assignment getTestsAssignment_2_1_1() { return cTestsAssignment_2_1_1; }

		//test
		public RuleCall getTestsTestParserRuleCall_2_1_1_0() { return cTestsTestParserRuleCall_2_1_1_0; }

		//(',' tests+=test)?
		public Group getGroup_2_1_2() { return cGroup_2_1_2; }

		//','
		public Keyword getCommaKeyword_2_1_2_0() { return cCommaKeyword_2_1_2_0; }

		//tests+=test
		public Assignment getTestsAssignment_2_1_2_1() { return cTestsAssignment_2_1_2_1; }

		//test
		public RuleCall getTestsTestParserRuleCall_2_1_2_1_0() { return cTestsTestParserRuleCall_2_1_2_1_0; }
	}

	public class Import_stmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.controlflow.SpellGrammar.import_stmt");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cImport_nameParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cImport_fromParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//import_stmt:
		//	import_name | import_from;
		@Override public ParserRule getRule() { return rule; }

		//import_name | import_from
		public Alternatives getAlternatives() { return cAlternatives; }

		//import_name
		public RuleCall getImport_nameParserRuleCall_0() { return cImport_nameParserRuleCall_0; }

		//import_from
		public RuleCall getImport_fromParserRuleCall_1() { return cImport_fromParserRuleCall_1; }
	}

	public class Import_nameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.controlflow.SpellGrammar.import_name");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDotted_as_namesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDotted_as_namesDotted_as_namesParserRuleCall_1_0 = (RuleCall)cDotted_as_namesAssignment_1.eContents().get(0);
		
		//import_name:
		//	'import' dotted_as_names=dotted_as_names;
		@Override public ParserRule getRule() { return rule; }

		//'import' dotted_as_names=dotted_as_names
		public Group getGroup() { return cGroup; }

		//'import'
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }

		//dotted_as_names=dotted_as_names
		public Assignment getDotted_as_namesAssignment_1() { return cDotted_as_namesAssignment_1; }

		//dotted_as_names
		public RuleCall getDotted_as_namesDotted_as_namesParserRuleCall_1_0() { return cDotted_as_namesDotted_as_namesParserRuleCall_1_0; }
	}

	public class Import_fromElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.controlflow.SpellGrammar.import_from");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFromKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Assignment cDotsAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final Keyword cDotsFullStopKeyword_1_0_0_0 = (Keyword)cDotsAssignment_1_0_0.eContents().get(0);
		private final Assignment cDotted_nameAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cDotted_nameDotted_nameParserRuleCall_1_0_1_0 = (RuleCall)cDotted_nameAssignment_1_0_1.eContents().get(0);
		private final Assignment cDots2Assignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final Keyword cDots2FullStopKeyword_1_1_0 = (Keyword)cDots2Assignment_1_1.eContents().get(0);
		private final Keyword cImportKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Keyword cAsteriskKeyword_3_0 = (Keyword)cAlternatives_3.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final Assignment cRoundBracketAssignment_3_1_0 = (Assignment)cGroup_3_1.eContents().get(0);
		private final Keyword cRoundBracketLeftParenthesisKeyword_3_1_0_0 = (Keyword)cRoundBracketAssignment_3_1_0.eContents().get(0);
		private final Assignment cImport_as_namesAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cImport_as_namesImport_as_namesParserRuleCall_3_1_1_0 = (RuleCall)cImport_as_namesAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_1_2 = (Keyword)cGroup_3_1.eContents().get(2);
		private final Assignment cImport_as_namesAssignment_3_2 = (Assignment)cAlternatives_3.eContents().get(2);
		private final RuleCall cImport_as_namesImport_as_namesParserRuleCall_3_2_0 = (RuleCall)cImport_as_namesAssignment_3_2.eContents().get(0);
		
		//import_from:
		//	'from' (dots+='.'* dotted_name=dotted_name | dots2+='.'+)
		//	'import' ('*' | roundBracket?='(' import_as_names=import_as_names ')' | import_as_names=import_as_names);
		@Override public ParserRule getRule() { return rule; }

		//'from' (dots+='.'* dotted_name=dotted_name | dots2+='.'+) 'import' ('*' | roundBracket?='('
		//import_as_names=import_as_names ')' | import_as_names=import_as_names)
		public Group getGroup() { return cGroup; }

		//'from'
		public Keyword getFromKeyword_0() { return cFromKeyword_0; }

		//(dots+='.'* dotted_name=dotted_name | dots2+='.'+)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//dots+='.'* dotted_name=dotted_name
		public Group getGroup_1_0() { return cGroup_1_0; }

		//dots+='.'*
		public Assignment getDotsAssignment_1_0_0() { return cDotsAssignment_1_0_0; }

		//'.'
		public Keyword getDotsFullStopKeyword_1_0_0_0() { return cDotsFullStopKeyword_1_0_0_0; }

		//dotted_name=dotted_name
		public Assignment getDotted_nameAssignment_1_0_1() { return cDotted_nameAssignment_1_0_1; }

		//dotted_name
		public RuleCall getDotted_nameDotted_nameParserRuleCall_1_0_1_0() { return cDotted_nameDotted_nameParserRuleCall_1_0_1_0; }

		//dots2+='.'+
		public Assignment getDots2Assignment_1_1() { return cDots2Assignment_1_1; }

		//'.'
		public Keyword getDots2FullStopKeyword_1_1_0() { return cDots2FullStopKeyword_1_1_0; }

		//'import'
		public Keyword getImportKeyword_2() { return cImportKeyword_2; }

		//('*' | roundBracket?='(' import_as_names=import_as_names ')' | import_as_names=import_as_names)
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//'*'
		public Keyword getAsteriskKeyword_3_0() { return cAsteriskKeyword_3_0; }

		//roundBracket?='(' import_as_names=import_as_names ')'
		public Group getGroup_3_1() { return cGroup_3_1; }

		//roundBracket?='('
		public Assignment getRoundBracketAssignment_3_1_0() { return cRoundBracketAssignment_3_1_0; }

		//'('
		public Keyword getRoundBracketLeftParenthesisKeyword_3_1_0_0() { return cRoundBracketLeftParenthesisKeyword_3_1_0_0; }

		//import_as_names=import_as_names
		public Assignment getImport_as_namesAssignment_3_1_1() { return cImport_as_namesAssignment_3_1_1; }

		//import_as_names
		public RuleCall getImport_as_namesImport_as_namesParserRuleCall_3_1_1_0() { return cImport_as_namesImport_as_namesParserRuleCall_3_1_1_0; }

		//')'
		public Keyword getRightParenthesisKeyword_3_1_2() { return cRightParenthesisKeyword_3_1_2; }

		//import_as_names=import_as_names
		public Assignment getImport_as_namesAssignment_3_2() { return cImport_as_namesAssignment_3_2; }

		//import_as_names
		public RuleCall getImport_as_namesImport_as_namesParserRuleCall_3_2_0() { return cImport_as_namesImport_as_namesParserRuleCall_3_2_0; }
	}

	public class Import_as_nameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.controlflow.SpellGrammar.import_as_name");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameNAMEParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cAsKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cIdentifierAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cIdentifierNAMEParserRuleCall_1_1_0 = (RuleCall)cIdentifierAssignment_1_1.eContents().get(0);
		
		//import_as_name:
		//	name=NAME ('as' identifier=NAME)?;
		@Override public ParserRule getRule() { return rule; }

		//name=NAME ('as' identifier=NAME)?
		public Group getGroup() { return cGroup; }

		//name=NAME
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//NAME
		public RuleCall getNameNAMEParserRuleCall_0_0() { return cNameNAMEParserRuleCall_0_0; }

		//('as' identifier=NAME)?
		public Group getGroup_1() { return cGroup_1; }

		//'as'
		public Keyword getAsKeyword_1_0() { return cAsKeyword_1_0; }

		//identifier=NAME
		public Assignment getIdentifierAssignment_1_1() { return cIdentifierAssignment_1_1; }

		//NAME
		public RuleCall getIdentifierNAMEParserRuleCall_1_1_0() { return cIdentifierNAMEParserRuleCall_1_1_0; }
	}

	public class Dotted_as_nameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.controlflow.SpellGrammar.dotted_as_name");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameDotted_nameParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cAsKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cIdentifierAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cIdentifierNAMEParserRuleCall_1_1_0 = (RuleCall)cIdentifierAssignment_1_1.eContents().get(0);
		
		//dotted_as_name:
		//	name=dotted_name ('as' identifier=NAME)?;
		@Override public ParserRule getRule() { return rule; }

		//name=dotted_name ('as' identifier=NAME)?
		public Group getGroup() { return cGroup; }

		//name=dotted_name
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//dotted_name
		public RuleCall getNameDotted_nameParserRuleCall_0_0() { return cNameDotted_nameParserRuleCall_0_0; }

		//('as' identifier=NAME)?
		public Group getGroup_1() { return cGroup_1; }

		//'as'
		public Keyword getAsKeyword_1_0() { return cAsKeyword_1_0; }

		//identifier=NAME
		public Assignment getIdentifierAssignment_1_1() { return cIdentifierAssignment_1_1; }

		//NAME
		public RuleCall getIdentifierNAMEParserRuleCall_1_1_0() { return cIdentifierNAMEParserRuleCall_1_1_0; }
	}

	public class Import_as_namesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.controlflow.SpellGrammar.import_as_names");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cImportsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cImportsImport_as_nameParserRuleCall_0_0 = (RuleCall)cImportsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cImportsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cImportsImport_as_nameParserRuleCall_1_1_0 = (RuleCall)cImportsAssignment_1_1.eContents().get(0);
		private final Assignment cOptionalCommaAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cOptionalCommaCommaKeyword_2_0 = (Keyword)cOptionalCommaAssignment_2.eContents().get(0);
		
		//import_as_names:
		//	imports+=import_as_name (',' imports+=import_as_name)* optionalComma?=','?;
		@Override public ParserRule getRule() { return rule; }

		//imports+=import_as_name (',' imports+=import_as_name)* optionalComma?=','?
		public Group getGroup() { return cGroup; }

		//imports+=import_as_name
		public Assignment getImportsAssignment_0() { return cImportsAssignment_0; }

		//import_as_name
		public RuleCall getImportsImport_as_nameParserRuleCall_0_0() { return cImportsImport_as_nameParserRuleCall_0_0; }

		//(',' imports+=import_as_name)*
		public Group getGroup_1() { return cGroup_1; }

		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//imports+=import_as_name
		public Assignment getImportsAssignment_1_1() { return cImportsAssignment_1_1; }

		//import_as_name
		public RuleCall getImportsImport_as_nameParserRuleCall_1_1_0() { return cImportsImport_as_nameParserRuleCall_1_1_0; }

		//optionalComma?=','?
		public Assignment getOptionalCommaAssignment_2() { return cOptionalCommaAssignment_2; }

		//','
		public Keyword getOptionalCommaCommaKeyword_2_0() { return cOptionalCommaCommaKeyword_2_0; }
	}

	public class Dotted_as_namesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.controlflow.SpellGrammar.dotted_as_names");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDotted_namesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDotted_namesDotted_as_nameParserRuleCall_0_0 = (RuleCall)cDotted_namesAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cDotted_namesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cDotted_namesDotted_as_nameParserRuleCall_1_1_0 = (RuleCall)cDotted_namesAssignment_1_1.eContents().get(0);
		
		//dotted_as_names:
		//	dotted_names+=dotted_as_name (',' dotted_names+=dotted_as_name)*;
		@Override public ParserRule getRule() { return rule; }

		//dotted_names+=dotted_as_name (',' dotted_names+=dotted_as_name)*
		public Group getGroup() { return cGroup; }

		//dotted_names+=dotted_as_name
		public Assignment getDotted_namesAssignment_0() { return cDotted_namesAssignment_0; }

		//dotted_as_name
		public RuleCall getDotted_namesDotted_as_nameParserRuleCall_0_0() { return cDotted_namesDotted_as_nameParserRuleCall_0_0; }

		//(',' dotted_names+=dotted_as_name)*
		public Group getGroup_1() { return cGroup_1; }

		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//dotted_names+=dotted_as_name
		public Assignment getDotted_namesAssignment_1_1() { return cDotted_namesAssignment_1_1; }

		//dotted_as_name
		public RuleCall getDotted_namesDotted_as_nameParserRuleCall_1_1_0() { return cDotted_namesDotted_as_nameParserRuleCall_1_1_0; }
	}

	public class Dotted_nameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.controlflow.SpellGrammar.dotted_name");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNAMEParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cNAMEParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//dotted_name:
		//	NAME ('.' NAME)*;
		@Override public ParserRule getRule() { return rule; }

		//NAME ('.' NAME)*
		public Group getGroup() { return cGroup; }

		//NAME
		public RuleCall getNAMEParserRuleCall_0() { return cNAMEParserRuleCall_0; }

		//('.' NAME)*
		public Group getGroup_1() { return cGroup_1; }

		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//NAME
		public RuleCall getNAMEParserRuleCall_1_1() { return cNAMEParserRuleCall_1_1; }
	}

	public class Global_stmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.controlflow.SpellGrammar.global_stmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGlobalKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cGlobalsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cGlobalsNAMEParserRuleCall_1_0 = (RuleCall)cGlobalsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cGlobalsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cGlobalsNAMEParserRuleCall_2_1_0 = (RuleCall)cGlobalsAssignment_2_1.eContents().get(0);
		
		//global_stmt:
		//	'global' globals+=NAME (',' globals+=NAME)*;
		@Override public ParserRule getRule() { return rule; }

		//'global' globals+=NAME (',' globals+=NAME)*
		public Group getGroup() { return cGroup; }

		//'global'
		public Keyword getGlobalKeyword_0() { return cGlobalKeyword_0; }

		//globals+=NAME
		public Assignment getGlobalsAssignment_1() { return cGlobalsAssignment_1; }

		//NAME
		public RuleCall getGlobalsNAMEParserRuleCall_1_0() { return cGlobalsNAMEParserRuleCall_1_0; }

		//(',' globals+=NAME)*
		public Group getGroup_2() { return cGroup_2; }

		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//globals+=NAME
		public Assignment getGlobalsAssignment_2_1() { return cGlobalsAssignment_2_1; }

		//NAME
		public RuleCall getGlobalsNAMEParserRuleCall_2_1_0() { return cGlobalsNAMEParserRuleCall_2_1_0; }
	}

	public class Exec_stmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.controlflow.SpellGrammar.exec_stmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExecKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprExprParserRuleCall_1_0 = (RuleCall)cExprAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cInKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cTestsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cTestsTestParserRuleCall_2_1_0 = (RuleCall)cTestsAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cTestsAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cTestsTestParserRuleCall_2_2_1_0 = (RuleCall)cTestsAssignment_2_2_1.eContents().get(0);
		
		//exec_stmt:
		//	'exec' expr=expr ('in' tests+=test (',' tests+=test)?)?;
		@Override public ParserRule getRule() { return rule; }

		//'exec' expr=expr ('in' tests+=test (',' tests+=test)?)?
		public Group getGroup() { return cGroup; }

		//'exec'
		public Keyword getExecKeyword_0() { return cExecKeyword_0; }

		//expr=expr
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }

		//expr
		public RuleCall getExprExprParserRuleCall_1_0() { return cExprExprParserRuleCall_1_0; }

		//('in' tests+=test (',' tests+=test)?)?
		public Group getGroup_2() { return cGroup_2; }

		//'in'
		public Keyword getInKeyword_2_0() { return cInKeyword_2_0; }

		//tests+=test
		public Assignment getTestsAssignment_2_1() { return cTestsAssignment_2_1; }

		//test
		public RuleCall getTestsTestParserRuleCall_2_1_0() { return cTestsTestParserRuleCall_2_1_0; }

		//(',' tests+=test)?
		public Group getGroup_2_2() { return cGroup_2_2; }

		//','
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }

		//tests+=test
		public Assignment getTestsAssignment_2_2_1() { return cTestsAssignment_2_2_1; }

		//test
		public RuleCall getTestsTestParserRuleCall_2_2_1_0() { return cTestsTestParserRuleCall_2_2_1_0; }
	}

	public class Assert_stmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.controlflow.SpellGrammar.assert_stmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAssertKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAssersAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAssersTestParserRuleCall_1_0 = (RuleCall)cAssersAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cAssersAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cAssersTestParserRuleCall_2_1_0 = (RuleCall)cAssersAssignment_2_1.eContents().get(0);
		
		//assert_stmt:
		//	'assert' assers+=test (',' assers+=test)?;
		@Override public ParserRule getRule() { return rule; }

		//'assert' assers+=test (',' assers+=test)?
		public Group getGroup() { return cGroup; }

		//'assert'
		public Keyword getAssertKeyword_0() { return cAssertKeyword_0; }

		//assers+=test
		public Assignment getAssersAssignment_1() { return cAssersAssignment_1; }

		//test
		public RuleCall getAssersTestParserRuleCall_1_0() { return cAssersTestParserRuleCall_1_0; }

		//(',' assers+=test)?
		public Group getGroup_2() { return cGroup_2; }

		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//assers+=test
		public Assignment getAssersAssignment_2_1() { return cAssersAssignment_2_1; }

		//test
		public RuleCall getAssersTestParserRuleCall_2_1_0() { return cAssersTestParserRuleCall_2_1_0; }
	}

	public class Compound_stmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.controlflow.SpellGrammar.compound_stmt");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIf_stmtParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cWhile_stmtParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFor_stmtParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cTry_stmtParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cWith_stmtParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cFuncdefParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cClassdefParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cDecoratedParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		
		//compound_stmt:
		//	if_stmt | while_stmt | for_stmt | try_stmt | with_stmt | funcdef | classdef | decorated;
		@Override public ParserRule getRule() { return rule; }

		//if_stmt | while_stmt | for_stmt | try_stmt | with_stmt | funcdef | classdef | decorated
		public Alternatives getAlternatives() { return cAlternatives; }

		//if_stmt
		public RuleCall getIf_stmtParserRuleCall_0() { return cIf_stmtParserRuleCall_0; }

		//while_stmt
		public RuleCall getWhile_stmtParserRuleCall_1() { return cWhile_stmtParserRuleCall_1; }

		//for_stmt
		public RuleCall getFor_stmtParserRuleCall_2() { return cFor_stmtParserRuleCall_2; }

		//try_stmt
		public RuleCall getTry_stmtParserRuleCall_3() { return cTry_stmtParserRuleCall_3; }

		//with_stmt
		public RuleCall getWith_stmtParserRuleCall_4() { return cWith_stmtParserRuleCall_4; }

		//funcdef
		public RuleCall getFuncdefParserRuleCall_5() { return cFuncdefParserRuleCall_5; }

		//classdef
		public RuleCall getClassdefParserRuleCall_6() { return cClassdefParserRuleCall_6; }

		//decorated
		public RuleCall getDecoratedParserRuleCall_7() { return cDecoratedParserRuleCall_7; }
	}

	public class Else_if_stmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.controlflow.SpellGrammar.else_if_stmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cElifKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTestAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTestTestParserRuleCall_1_0 = (RuleCall)cTestAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSuiteAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSuiteSuiteParserRuleCall_3_0 = (RuleCall)cSuiteAssignment_3.eContents().get(0);
		
		//else_if_stmt:
		//	'elif' test=test ':' suite=suite;
		@Override public ParserRule getRule() { return rule; }

		//'elif' test=test ':' suite=suite
		public Group getGroup() { return cGroup; }

		//'elif'
		public Keyword getElifKeyword_0() { return cElifKeyword_0; }

		//test=test
		public Assignment getTestAssignment_1() { return cTestAssignment_1; }

		//test
		public RuleCall getTestTestParserRuleCall_1_0() { return cTestTestParserRuleCall_1_0; }

		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//suite=suite
		public Assignment getSuiteAssignment_3() { return cSuiteAssignment_3; }

		//suite
		public RuleCall getSuiteSuiteParserRuleCall_3_0() { return cSuiteSuiteParserRuleCall_3_0; }
	}

	public class If_stmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.controlflow.SpellGrammar.if_stmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTestAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTestTestParserRuleCall_1_0 = (RuleCall)cTestAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSuiteAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSuiteSuiteParserRuleCall_3_0 = (RuleCall)cSuiteAssignment_3.eContents().get(0);
		private final Assignment cElse_if_stmtsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cElse_if_stmtsElse_if_stmtParserRuleCall_4_0 = (RuleCall)cElse_if_stmtsAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cElseKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cColonKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cElseAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cElseSuiteParserRuleCall_5_2_0 = (RuleCall)cElseAssignment_5_2.eContents().get(0);
		private final RuleCall cENDIFTerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		
		//if_stmt:
		//	'if' test=test ':' suite=suite else_if_stmts+=else_if_stmt* ('else' ':' else=suite)? ENDIF;
		@Override public ParserRule getRule() { return rule; }

		//'if' test=test ':' suite=suite else_if_stmts+=else_if_stmt* ('else' ':' else=suite)? ENDIF
		public Group getGroup() { return cGroup; }

		//'if'
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }

		//test=test
		public Assignment getTestAssignment_1() { return cTestAssignment_1; }

		//test
		public RuleCall getTestTestParserRuleCall_1_0() { return cTestTestParserRuleCall_1_0; }

		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//suite=suite
		public Assignment getSuiteAssignment_3() { return cSuiteAssignment_3; }

		//suite
		public RuleCall getSuiteSuiteParserRuleCall_3_0() { return cSuiteSuiteParserRuleCall_3_0; }

		//else_if_stmts+=else_if_stmt*
		public Assignment getElse_if_stmtsAssignment_4() { return cElse_if_stmtsAssignment_4; }

		//else_if_stmt
		public RuleCall getElse_if_stmtsElse_if_stmtParserRuleCall_4_0() { return cElse_if_stmtsElse_if_stmtParserRuleCall_4_0; }

		//('else' ':' else=suite)?
		public Group getGroup_5() { return cGroup_5; }

		//'else'
		public Keyword getElseKeyword_5_0() { return cElseKeyword_5_0; }

		//':'
		public Keyword getColonKeyword_5_1() { return cColonKeyword_5_1; }

		//else=suite
		public Assignment getElseAssignment_5_2() { return cElseAssignment_5_2; }

		//suite
		public RuleCall getElseSuiteParserRuleCall_5_2_0() { return cElseSuiteParserRuleCall_5_2_0; }

		//ENDIF
		public RuleCall getENDIFTerminalRuleCall_6() { return cENDIFTerminalRuleCall_6; }
	}

	public class While_stmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.controlflow.SpellGrammar.while_stmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhileKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTestAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTestTestParserRuleCall_1_0 = (RuleCall)cTestAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSuiteAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSuiteSuiteParserRuleCall_3_0 = (RuleCall)cSuiteAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cElseKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cColonKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cElseAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cElseSuiteParserRuleCall_4_2_0 = (RuleCall)cElseAssignment_4_2.eContents().get(0);
		private final RuleCall cENDWHILETerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//while_stmt:
		//	'while' test=test ':' suite=suite ('else' ':' else=suite)? ENDWHILE;
		@Override public ParserRule getRule() { return rule; }

		//'while' test=test ':' suite=suite ('else' ':' else=suite)? ENDWHILE
		public Group getGroup() { return cGroup; }

		//'while'
		public Keyword getWhileKeyword_0() { return cWhileKeyword_0; }

		//test=test
		public Assignment getTestAssignment_1() { return cTestAssignment_1; }

		//test
		public RuleCall getTestTestParserRuleCall_1_0() { return cTestTestParserRuleCall_1_0; }

		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//suite=suite
		public Assignment getSuiteAssignment_3() { return cSuiteAssignment_3; }

		//suite
		public RuleCall getSuiteSuiteParserRuleCall_3_0() { return cSuiteSuiteParserRuleCall_3_0; }

		//('else' ':' else=suite)?
		public Group getGroup_4() { return cGroup_4; }

		//'else'
		public Keyword getElseKeyword_4_0() { return cElseKeyword_4_0; }

		//':'
		public Keyword getColonKeyword_4_1() { return cColonKeyword_4_1; }

		//else=suite
		public Assignment getElseAssignment_4_2() { return cElseAssignment_4_2; }

		//suite
		public RuleCall getElseSuiteParserRuleCall_4_2_0() { return cElseSuiteParserRuleCall_4_2_0; }

		//ENDWHILE
		public RuleCall getENDWHILETerminalRuleCall_5() { return cENDWHILETerminalRuleCall_5; }
	}

	public class For_stmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.controlflow.SpellGrammar.for_stmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExprlistAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprlistExprlistParserRuleCall_1_0 = (RuleCall)cExprlistAssignment_1.eContents().get(0);
		private final Keyword cInKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTestlistAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTestlistTestlistParserRuleCall_3_0 = (RuleCall)cTestlistAssignment_3.eContents().get(0);
		private final Keyword cColonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cSuiteAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cSuiteSuiteParserRuleCall_5_0 = (RuleCall)cSuiteAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cElseKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cColonKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cElseAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cElseSuiteParserRuleCall_6_2_0 = (RuleCall)cElseAssignment_6_2.eContents().get(0);
		private final Alternatives cAlternatives_7 = (Alternatives)cGroup.eContents().get(7);
		private final RuleCall cENDFORTerminalRuleCall_7_0 = (RuleCall)cAlternatives_7.eContents().get(0);
		private final RuleCall cENDIFTerminalRuleCall_7_1 = (RuleCall)cAlternatives_7.eContents().get(1);
		
		//for_stmt:
		//	'for' exprlist=exprlist 'in' testlist=testlist ':' suite=suite ('else' ':' else=suite)? (ENDFOR | ENDIF);
		@Override public ParserRule getRule() { return rule; }

		//'for' exprlist=exprlist 'in' testlist=testlist ':' suite=suite ('else' ':' else=suite)? (ENDFOR | ENDIF)
		public Group getGroup() { return cGroup; }

		//'for'
		public Keyword getForKeyword_0() { return cForKeyword_0; }

		//exprlist=exprlist
		public Assignment getExprlistAssignment_1() { return cExprlistAssignment_1; }

		//exprlist
		public RuleCall getExprlistExprlistParserRuleCall_1_0() { return cExprlistExprlistParserRuleCall_1_0; }

		//'in'
		public Keyword getInKeyword_2() { return cInKeyword_2; }

		//testlist=testlist
		public Assignment getTestlistAssignment_3() { return cTestlistAssignment_3; }

		//testlist
		public RuleCall getTestlistTestlistParserRuleCall_3_0() { return cTestlistTestlistParserRuleCall_3_0; }

		//':'
		public Keyword getColonKeyword_4() { return cColonKeyword_4; }

		//suite=suite
		public Assignment getSuiteAssignment_5() { return cSuiteAssignment_5; }

		//suite
		public RuleCall getSuiteSuiteParserRuleCall_5_0() { return cSuiteSuiteParserRuleCall_5_0; }

		//('else' ':' else=suite)?
		public Group getGroup_6() { return cGroup_6; }

		//'else'
		public Keyword getElseKeyword_6_0() { return cElseKeyword_6_0; }

		//':'
		public Keyword getColonKeyword_6_1() { return cColonKeyword_6_1; }

		//else=suite
		public Assignment getElseAssignment_6_2() { return cElseAssignment_6_2; }

		//suite
		public RuleCall getElseSuiteParserRuleCall_6_2_0() { return cElseSuiteParserRuleCall_6_2_0; }

		//(ENDFOR | ENDIF)
		public Alternatives getAlternatives_7() { return cAlternatives_7; }

		//ENDFOR
		public RuleCall getENDFORTerminalRuleCall_7_0() { return cENDFORTerminalRuleCall_7_0; }

		//ENDIF
		public RuleCall getENDIFTerminalRuleCall_7_1() { return cENDIFTerminalRuleCall_7_1; }
	}

	public class Try_stmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.controlflow.SpellGrammar.try_stmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cTryKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cColonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cSuiteAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cSuiteSuiteParserRuleCall_0_2_0 = (RuleCall)cSuiteAssignment_0_2.eContents().get(0);
		private final RuleCall cENDTRYTerminalRuleCall_0_3 = (RuleCall)cGroup_0.eContents().get(3);
		private final Alternatives cAlternatives_0_4 = (Alternatives)cGroup_0.eContents().get(4);
		private final Group cGroup_0_4_0 = (Group)cAlternatives_0_4.eContents().get(0);
		private final Assignment cExcept_clauseAssignment_0_4_0_0 = (Assignment)cGroup_0_4_0.eContents().get(0);
		private final RuleCall cExcept_clauseExcept_clauseParserRuleCall_0_4_0_0_0 = (RuleCall)cExcept_clauseAssignment_0_4_0_0.eContents().get(0);
		private final Group cGroup_0_4_0_1 = (Group)cGroup_0_4_0.eContents().get(1);
		private final Keyword cElseKeyword_0_4_0_1_0 = (Keyword)cGroup_0_4_0_1.eContents().get(0);
		private final Keyword cColonKeyword_0_4_0_1_1 = (Keyword)cGroup_0_4_0_1.eContents().get(1);
		private final Assignment cElseAssignment_0_4_0_1_2 = (Assignment)cGroup_0_4_0_1.eContents().get(2);
		private final RuleCall cElseSuiteParserRuleCall_0_4_0_1_2_0 = (RuleCall)cElseAssignment_0_4_0_1_2.eContents().get(0);
		private final Group cGroup_0_4_0_2 = (Group)cGroup_0_4_0.eContents().get(2);
		private final Keyword cFinallyKeyword_0_4_0_2_0 = (Keyword)cGroup_0_4_0_2.eContents().get(0);
		private final Keyword cColonKeyword_0_4_0_2_1 = (Keyword)cGroup_0_4_0_2.eContents().get(1);
		private final Assignment cFinallyAssignment_0_4_0_2_2 = (Assignment)cGroup_0_4_0_2.eContents().get(2);
		private final RuleCall cFinallySuiteParserRuleCall_0_4_0_2_2_0 = (RuleCall)cFinallyAssignment_0_4_0_2_2.eContents().get(0);
		private final Group cGroup_0_4_1 = (Group)cAlternatives_0_4.eContents().get(1);
		private final Keyword cFinallyKeyword_0_4_1_0 = (Keyword)cGroup_0_4_1.eContents().get(0);
		private final Keyword cColonKeyword_0_4_1_1 = (Keyword)cGroup_0_4_1.eContents().get(1);
		private final Assignment cFinallyAssignment_0_4_1_2 = (Assignment)cGroup_0_4_1.eContents().get(2);
		private final RuleCall cFinallySuiteParserRuleCall_0_4_1_2_0 = (RuleCall)cFinallyAssignment_0_4_1_2.eContents().get(0);
		private final RuleCall cENDTRYTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//try_stmt:
		//	('try' ':' suite=suite ENDTRY? (except_clause+=except_clause+ ('else' ':' else=suite)? ('finally' ':' finally=suite)?
		//	| 'finally' ':' finally=suite)) ENDTRY;
		@Override public ParserRule getRule() { return rule; }

		//('try' ':' suite=suite ENDTRY? (except_clause+=except_clause+ ('else' ':' else=suite)? ('finally' ':' finally=suite)? |
		//'finally' ':' finally=suite)) ENDTRY
		public Group getGroup() { return cGroup; }

		//('try' ':' suite=suite ENDTRY? (except_clause+=except_clause+ ('else' ':' else=suite)? ('finally' ':' finally=suite)? |
		//'finally' ':' finally=suite))
		public Group getGroup_0() { return cGroup_0; }

		//'try'
		public Keyword getTryKeyword_0_0() { return cTryKeyword_0_0; }

		//':'
		public Keyword getColonKeyword_0_1() { return cColonKeyword_0_1; }

		//suite=suite
		public Assignment getSuiteAssignment_0_2() { return cSuiteAssignment_0_2; }

		//suite
		public RuleCall getSuiteSuiteParserRuleCall_0_2_0() { return cSuiteSuiteParserRuleCall_0_2_0; }

		//ENDTRY?
		public RuleCall getENDTRYTerminalRuleCall_0_3() { return cENDTRYTerminalRuleCall_0_3; }

		//(except_clause+=except_clause+ ('else' ':' else=suite)? ('finally' ':' finally=suite)? | 'finally' ':' finally=suite)
		public Alternatives getAlternatives_0_4() { return cAlternatives_0_4; }

		//except_clause+=except_clause+ ('else' ':' else=suite)? ('finally' ':' finally=suite)?
		public Group getGroup_0_4_0() { return cGroup_0_4_0; }

		//except_clause+=except_clause+
		public Assignment getExcept_clauseAssignment_0_4_0_0() { return cExcept_clauseAssignment_0_4_0_0; }

		//except_clause
		public RuleCall getExcept_clauseExcept_clauseParserRuleCall_0_4_0_0_0() { return cExcept_clauseExcept_clauseParserRuleCall_0_4_0_0_0; }

		//('else' ':' else=suite)?
		public Group getGroup_0_4_0_1() { return cGroup_0_4_0_1; }

		//'else'
		public Keyword getElseKeyword_0_4_0_1_0() { return cElseKeyword_0_4_0_1_0; }

		//':'
		public Keyword getColonKeyword_0_4_0_1_1() { return cColonKeyword_0_4_0_1_1; }

		//else=suite
		public Assignment getElseAssignment_0_4_0_1_2() { return cElseAssignment_0_4_0_1_2; }

		//suite
		public RuleCall getElseSuiteParserRuleCall_0_4_0_1_2_0() { return cElseSuiteParserRuleCall_0_4_0_1_2_0; }

		//('finally' ':' finally=suite)?
		public Group getGroup_0_4_0_2() { return cGroup_0_4_0_2; }

		//'finally'
		public Keyword getFinallyKeyword_0_4_0_2_0() { return cFinallyKeyword_0_4_0_2_0; }

		//':'
		public Keyword getColonKeyword_0_4_0_2_1() { return cColonKeyword_0_4_0_2_1; }

		//finally=suite
		public Assignment getFinallyAssignment_0_4_0_2_2() { return cFinallyAssignment_0_4_0_2_2; }

		//suite
		public RuleCall getFinallySuiteParserRuleCall_0_4_0_2_2_0() { return cFinallySuiteParserRuleCall_0_4_0_2_2_0; }

		//'finally' ':' finally=suite
		public Group getGroup_0_4_1() { return cGroup_0_4_1; }

		//'finally'
		public Keyword getFinallyKeyword_0_4_1_0() { return cFinallyKeyword_0_4_1_0; }

		//':'
		public Keyword getColonKeyword_0_4_1_1() { return cColonKeyword_0_4_1_1; }

		//finally=suite
		public Assignment getFinallyAssignment_0_4_1_2() { return cFinallyAssignment_0_4_1_2; }

		//suite
		public RuleCall getFinallySuiteParserRuleCall_0_4_1_2_0() { return cFinallySuiteParserRuleCall_0_4_1_2_0; }

		//ENDTRY
		public RuleCall getENDTRYTerminalRuleCall_1() { return cENDTRYTerminalRuleCall_1; }
	}

	public class With_stmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.controlflow.SpellGrammar.with_stmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWithKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cWith_itemAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cWith_itemWith_itemParserRuleCall_1_0 = (RuleCall)cWith_itemAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cWith_itemAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cWith_itemWith_itemParserRuleCall_2_1_0 = (RuleCall)cWith_itemAssignment_2_1.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cSuiteAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cSuiteSuiteParserRuleCall_4_0 = (RuleCall)cSuiteAssignment_4.eContents().get(0);
		private final RuleCall cENDWITHTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//with_stmt:
		//	'with' with_item+=with_item (',' with_item+=with_item)* ':' suite=suite ENDWITH;
		@Override public ParserRule getRule() { return rule; }

		//'with' with_item+=with_item (',' with_item+=with_item)* ':' suite=suite ENDWITH
		public Group getGroup() { return cGroup; }

		//'with'
		public Keyword getWithKeyword_0() { return cWithKeyword_0; }

		//with_item+=with_item
		public Assignment getWith_itemAssignment_1() { return cWith_itemAssignment_1; }

		//with_item
		public RuleCall getWith_itemWith_itemParserRuleCall_1_0() { return cWith_itemWith_itemParserRuleCall_1_0; }

		//(',' with_item+=with_item)*
		public Group getGroup_2() { return cGroup_2; }

		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//with_item+=with_item
		public Assignment getWith_itemAssignment_2_1() { return cWith_itemAssignment_2_1; }

		//with_item
		public RuleCall getWith_itemWith_itemParserRuleCall_2_1_0() { return cWith_itemWith_itemParserRuleCall_2_1_0; }

		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }

		//suite=suite
		public Assignment getSuiteAssignment_4() { return cSuiteAssignment_4; }

		//suite
		public RuleCall getSuiteSuiteParserRuleCall_4_0() { return cSuiteSuiteParserRuleCall_4_0; }

		//ENDWITH
		public RuleCall getENDWITHTerminalRuleCall_5() { return cENDWITHTerminalRuleCall_5; }
	}

	public class With_itemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.controlflow.SpellGrammar.with_item");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTestAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTestTestParserRuleCall_0_0 = (RuleCall)cTestAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cAsKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cExprAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExprExprParserRuleCall_1_1_0 = (RuleCall)cExprAssignment_1_1.eContents().get(0);
		
		//with_item:
		//	test=test ('as' expr=expr)?;
		@Override public ParserRule getRule() { return rule; }

		//test=test ('as' expr=expr)?
		public Group getGroup() { return cGroup; }

		//test=test
		public Assignment getTestAssignment_0() { return cTestAssignment_0; }

		//test
		public RuleCall getTestTestParserRuleCall_0_0() { return cTestTestParserRuleCall_0_0; }

		//('as' expr=expr)?
		public Group getGroup_1() { return cGroup_1; }

		//'as'
		public Keyword getAsKeyword_1_0() { return cAsKeyword_1_0; }

		//expr=expr
		public Assignment getExprAssignment_1_1() { return cExprAssignment_1_1; }

		//expr
		public RuleCall getExprExprParserRuleCall_1_1_0() { return cExprExprParserRuleCall_1_1_0; }
	}

	public class Except_clauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.controlflow.SpellGrammar.except_clause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExceptKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cTestAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cTestTestParserRuleCall_1_0_0 = (RuleCall)cTestAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Assignment cSignAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final Alternatives cSignAlternatives_1_1_0_0 = (Alternatives)cSignAssignment_1_1_0.eContents().get(0);
		private final Keyword cSignAsKeyword_1_1_0_0_0 = (Keyword)cSignAlternatives_1_1_0_0.eContents().get(0);
		private final Keyword cSignCommaKeyword_1_1_0_0_1 = (Keyword)cSignAlternatives_1_1_0_0.eContents().get(1);
		private final Assignment cNext_testAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cNext_testTestParserRuleCall_1_1_1_0 = (RuleCall)cNext_testAssignment_1_1_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSuiteAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSuiteSuiteParserRuleCall_3_0 = (RuleCall)cSuiteAssignment_3.eContents().get(0);
		
		//// NB compile.c makes sure that the default except clause is last
		//except_clause:
		//	'except' (test=test (sign=('as' | ',') next_test=test)?)? ':' suite=suite;
		@Override public ParserRule getRule() { return rule; }

		//'except' (test=test (sign=('as' | ',') next_test=test)?)? ':' suite=suite
		public Group getGroup() { return cGroup; }

		//'except'
		public Keyword getExceptKeyword_0() { return cExceptKeyword_0; }

		//(test=test (sign=('as' | ',') next_test=test)?)?
		public Group getGroup_1() { return cGroup_1; }

		//test=test
		public Assignment getTestAssignment_1_0() { return cTestAssignment_1_0; }

		//test
		public RuleCall getTestTestParserRuleCall_1_0_0() { return cTestTestParserRuleCall_1_0_0; }

		//(sign=('as' | ',') next_test=test)?
		public Group getGroup_1_1() { return cGroup_1_1; }

		//sign=('as' | ',')
		public Assignment getSignAssignment_1_1_0() { return cSignAssignment_1_1_0; }

		//('as' | ',')
		public Alternatives getSignAlternatives_1_1_0_0() { return cSignAlternatives_1_1_0_0; }

		//'as'
		public Keyword getSignAsKeyword_1_1_0_0_0() { return cSignAsKeyword_1_1_0_0_0; }

		//','
		public Keyword getSignCommaKeyword_1_1_0_0_1() { return cSignCommaKeyword_1_1_0_0_1; }

		//next_test=test
		public Assignment getNext_testAssignment_1_1_1() { return cNext_testAssignment_1_1_1; }

		//test
		public RuleCall getNext_testTestParserRuleCall_1_1_1_0() { return cNext_testTestParserRuleCall_1_1_1_0; }

		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//suite=suite
		public Assignment getSuiteAssignment_3() { return cSuiteAssignment_3; }

		//suite
		public RuleCall getSuiteSuiteParserRuleCall_3_0() { return cSuiteSuiteParserRuleCall_3_0; }
	}

	public class SuiteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.controlflow.SpellGrammar.suite");
		private final Assignment cStmtsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cStmtsStmtParserRuleCall_0 = (RuleCall)cStmtsAssignment.eContents().get(0);
		
		//suite:
		//	=> stmts+=stmt+;
		@Override public ParserRule getRule() { return rule; }

		//=> stmts+=stmt+
		public Assignment getStmtsAssignment() { return cStmtsAssignment; }

		//stmt
		public RuleCall getStmtsStmtParserRuleCall_0() { return cStmtsStmtParserRuleCall_0; }
	}

	public class Testlist_safeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.controlflow.SpellGrammar.testlist_safe");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOld_testAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOld_testTestParserRuleCall_0_0 = (RuleCall)cOld_testAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Keyword cCommaKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Assignment cOld_testAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cOld_testTestParserRuleCall_1_0_1_0 = (RuleCall)cOld_testAssignment_1_0_1.eContents().get(0);
		private final Assignment cOptionalComaAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOptionalComaCommaKeyword_1_1_0 = (Keyword)cOptionalComaAssignment_1_1.eContents().get(0);
		
		//// Backward compatibility cruft to support:
		//// [ x for x in lambda: True, lambda: False if x() ]
		//// even while also allowing:
		//// lambda x: 5 if x else 2
		//// (But not a mix of the two)
		//testlist_safe:
		//	old_test+=test ((',' old_test+=test)+ optionalComa?=','?)?;
		@Override public ParserRule getRule() { return rule; }

		//old_test+=test ((',' old_test+=test)+ optionalComa?=','?)?
		public Group getGroup() { return cGroup; }

		//old_test+=test
		public Assignment getOld_testAssignment_0() { return cOld_testAssignment_0; }

		//test
		public RuleCall getOld_testTestParserRuleCall_0_0() { return cOld_testTestParserRuleCall_0_0; }

		//((',' old_test+=test)+ optionalComa?=','?)?
		public Group getGroup_1() { return cGroup_1; }

		//(',' old_test+=test)+
		public Group getGroup_1_0() { return cGroup_1_0; }

		//','
		public Keyword getCommaKeyword_1_0_0() { return cCommaKeyword_1_0_0; }

		//old_test+=test
		public Assignment getOld_testAssignment_1_0_1() { return cOld_testAssignment_1_0_1; }

		//test
		public RuleCall getOld_testTestParserRuleCall_1_0_1_0() { return cOld_testTestParserRuleCall_1_0_1_0; }

		//optionalComa?=','?
		public Assignment getOptionalComaAssignment_1_1() { return cOptionalComaAssignment_1_1; }

		//','
		public Keyword getOptionalComaCommaKeyword_1_1_0() { return cOptionalComaCommaKeyword_1_1_0; }
	}

	public class TestElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.controlflow.SpellGrammar.test");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cOr_testParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Action cTestLeftAction_0_1_0 = (Action)cGroup_0_1.eContents().get(0);
		private final Keyword cIfKeyword_0_1_1 = (Keyword)cGroup_0_1.eContents().get(1);
		private final Assignment cIf_testAssignment_0_1_2 = (Assignment)cGroup_0_1.eContents().get(2);
		private final RuleCall cIf_testOr_testParserRuleCall_0_1_2_0 = (RuleCall)cIf_testAssignment_0_1_2.eContents().get(0);
		private final Keyword cElseKeyword_0_1_3 = (Keyword)cGroup_0_1.eContents().get(3);
		private final Assignment cIf_else_testAssignment_0_1_4 = (Assignment)cGroup_0_1.eContents().get(4);
		private final RuleCall cIf_else_testTestParserRuleCall_0_1_4_0 = (RuleCall)cIf_else_testAssignment_0_1_4.eContents().get(0);
		private final RuleCall cLambdefParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//test:
		//	or_test ({test.left=current} 'if' if_test=or_test 'else' if_else_test=test)? | lambdef;
		@Override public ParserRule getRule() { return rule; }

		//or_test ({test.left=current} 'if' if_test=or_test 'else' if_else_test=test)? | lambdef
		public Alternatives getAlternatives() { return cAlternatives; }

		//or_test ({test.left=current} 'if' if_test=or_test 'else' if_else_test=test)?
		public Group getGroup_0() { return cGroup_0; }

		//or_test
		public RuleCall getOr_testParserRuleCall_0_0() { return cOr_testParserRuleCall_0_0; }

		//({test.left=current} 'if' if_test=or_test 'else' if_else_test=test)?
		public Group getGroup_0_1() { return cGroup_0_1; }

		//{test.left=current}
		public Action getTestLeftAction_0_1_0() { return cTestLeftAction_0_1_0; }

		//'if'
		public Keyword getIfKeyword_0_1_1() { return cIfKeyword_0_1_1; }

		//if_test=or_test
		public Assignment getIf_testAssignment_0_1_2() { return cIf_testAssignment_0_1_2; }

		//or_test
		public RuleCall getIf_testOr_testParserRuleCall_0_1_2_0() { return cIf_testOr_testParserRuleCall_0_1_2_0; }

		//'else'
		public Keyword getElseKeyword_0_1_3() { return cElseKeyword_0_1_3; }

		//if_else_test=test
		public Assignment getIf_else_testAssignment_0_1_4() { return cIf_else_testAssignment_0_1_4; }

		//test
		public RuleCall getIf_else_testTestParserRuleCall_0_1_4_0() { return cIf_else_testTestParserRuleCall_0_1_4_0; }

		//lambdef
		public RuleCall getLambdefParserRuleCall_1() { return cLambdefParserRuleCall_1; }
	}

	public class Or_testElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.controlflow.SpellGrammar.or_test");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAnd_testParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOr_testLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cSignAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cSignOrKeyword_1_1_0 = (Keyword)cSignAssignment_1_1.eContents().get(0);
		private final RuleCall cNLParserRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final Assignment cRightAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cRightAnd_testParserRuleCall_1_3_0 = (RuleCall)cRightAssignment_1_3.eContents().get(0);
		
		//or_test:
		//	and_test ({or_test.left=current} sign='or' NL? right=and_test)*;
		@Override public ParserRule getRule() { return rule; }

		//and_test ({or_test.left=current} sign='or' NL? right=and_test)*
		public Group getGroup() { return cGroup; }

		//and_test
		public RuleCall getAnd_testParserRuleCall_0() { return cAnd_testParserRuleCall_0; }

		//({or_test.left=current} sign='or' NL? right=and_test)*
		public Group getGroup_1() { return cGroup_1; }

		//{or_test.left=current}
		public Action getOr_testLeftAction_1_0() { return cOr_testLeftAction_1_0; }

		//sign='or'
		public Assignment getSignAssignment_1_1() { return cSignAssignment_1_1; }

		//'or'
		public Keyword getSignOrKeyword_1_1_0() { return cSignOrKeyword_1_1_0; }

		//NL?
		public RuleCall getNLParserRuleCall_1_2() { return cNLParserRuleCall_1_2; }

		//right=and_test
		public Assignment getRightAssignment_1_3() { return cRightAssignment_1_3; }

		//and_test
		public RuleCall getRightAnd_testParserRuleCall_1_3_0() { return cRightAnd_testParserRuleCall_1_3_0; }
	}

	public class And_testElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.controlflow.SpellGrammar.and_test");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNot_testParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAnd_testLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cSignAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cSignAndKeyword_1_1_0 = (Keyword)cSignAssignment_1_1.eContents().get(0);
		private final RuleCall cNLParserRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final Assignment cRightAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cRightNot_testParserRuleCall_1_3_0 = (RuleCall)cRightAssignment_1_3.eContents().get(0);
		
		//and_test:
		//	not_test ({and_test.left=current} sign='and' NL? right=not_test)*;
		@Override public ParserRule getRule() { return rule; }

		//not_test ({and_test.left=current} sign='and' NL? right=not_test)*
		public Group getGroup() { return cGroup; }

		//not_test
		public RuleCall getNot_testParserRuleCall_0() { return cNot_testParserRuleCall_0; }

		//({and_test.left=current} sign='and' NL? right=not_test)*
		public Group getGroup_1() { return cGroup_1; }

		//{and_test.left=current}
		public Action getAnd_testLeftAction_1_0() { return cAnd_testLeftAction_1_0; }

		//sign='and'
		public Assignment getSignAssignment_1_1() { return cSignAssignment_1_1; }

		//'and'
		public Keyword getSignAndKeyword_1_1_0() { return cSignAndKeyword_1_1_0; }

		//NL?
		public RuleCall getNLParserRuleCall_1_2() { return cNLParserRuleCall_1_2; }

		//right=not_test
		public Assignment getRightAssignment_1_3() { return cRightAssignment_1_3; }

		//not_test
		public RuleCall getRightNot_testParserRuleCall_1_3_0() { return cRightNot_testParserRuleCall_1_3_0; }
	}

	public class Not_testElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.controlflow.SpellGrammar.not_test");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cNotAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final Keyword cNotNotKeyword_0_0_0 = (Keyword)cNotAssignment_0_0.eContents().get(0);
		private final Assignment cComparisonAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cComparisonComparisonParserRuleCall_0_1_0 = (RuleCall)cComparisonAssignment_0_1.eContents().get(0);
		private final RuleCall cComparisonParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//not_test:
		//	not+='not'+ comparison=comparison | comparison;
		@Override public ParserRule getRule() { return rule; }

		//not+='not'+ comparison=comparison | comparison
		public Alternatives getAlternatives() { return cAlternatives; }

		//not+='not'+ comparison=comparison
		public Group getGroup_0() { return cGroup_0; }

		//not+='not'+
		public Assignment getNotAssignment_0_0() { return cNotAssignment_0_0; }

		//'not'
		public Keyword getNotNotKeyword_0_0_0() { return cNotNotKeyword_0_0_0; }

		//comparison=comparison
		public Assignment getComparisonAssignment_0_1() { return cComparisonAssignment_0_1; }

		//comparison
		public RuleCall getComparisonComparisonParserRuleCall_0_1_0() { return cComparisonComparisonParserRuleCall_0_1_0; }

		//comparison
		public RuleCall getComparisonParserRuleCall_1() { return cComparisonParserRuleCall_1; }
	}

	public class ComparisonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.controlflow.SpellGrammar.comparison");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cComparisonLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cComp_opAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cComp_opComp_opParserRuleCall_1_1_0 = (RuleCall)cComp_opAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightExprParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//comparison:
		//	expr ({comparison.left=current} comp_op=comp_op right=expr)*;
		@Override public ParserRule getRule() { return rule; }

		//expr ({comparison.left=current} comp_op=comp_op right=expr)*
		public Group getGroup() { return cGroup; }

		//expr
		public RuleCall getExprParserRuleCall_0() { return cExprParserRuleCall_0; }

		//({comparison.left=current} comp_op=comp_op right=expr)*
		public Group getGroup_1() { return cGroup_1; }

		//{comparison.left=current}
		public Action getComparisonLeftAction_1_0() { return cComparisonLeftAction_1_0; }

		//comp_op=comp_op
		public Assignment getComp_opAssignment_1_1() { return cComp_opAssignment_1_1; }

		//comp_op
		public RuleCall getComp_opComp_opParserRuleCall_1_1_0() { return cComp_opComp_opParserRuleCall_1_1_0; }

		//right=expr
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//expr
		public RuleCall getRightExprParserRuleCall_1_2_0() { return cRightExprParserRuleCall_1_2_0; }
	}

	public class Comp_opElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.controlflow.SpellGrammar.comp_op");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cLessThanSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cEqualsSignEqualsSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cGreaterThanSignEqualsSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cLessThanSignEqualsSignKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cLessThanSignGreaterThanSignKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cExclamationMarkEqualsSignKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cInKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Group cGroup_8 = (Group)cAlternatives.eContents().get(8);
		private final Keyword cNotKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Keyword cInKeyword_8_1 = (Keyword)cGroup_8.eContents().get(1);
		private final Keyword cIsKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Group cGroup_10 = (Group)cAlternatives.eContents().get(10);
		private final Keyword cIsKeyword_10_0 = (Keyword)cGroup_10.eContents().get(0);
		private final Keyword cNotKeyword_10_1 = (Keyword)cGroup_10.eContents().get(1);
		
		//comp_op:
		//	'<' | '>' | '==' | '>=' | '<=' | '<>' | '!=' | 'in' | 'not' 'in' | 'is' | 'is' 'not';
		@Override public ParserRule getRule() { return rule; }

		//'<' | '>' | '==' | '>=' | '<=' | '<>' | '!=' | 'in' | 'not' 'in' | 'is' | 'is' 'not'
		public Alternatives getAlternatives() { return cAlternatives; }

		//'<'
		public Keyword getLessThanSignKeyword_0() { return cLessThanSignKeyword_0; }

		//'>'
		public Keyword getGreaterThanSignKeyword_1() { return cGreaterThanSignKeyword_1; }

		//'=='
		public Keyword getEqualsSignEqualsSignKeyword_2() { return cEqualsSignEqualsSignKeyword_2; }

		//'>='
		public Keyword getGreaterThanSignEqualsSignKeyword_3() { return cGreaterThanSignEqualsSignKeyword_3; }

		//'<='
		public Keyword getLessThanSignEqualsSignKeyword_4() { return cLessThanSignEqualsSignKeyword_4; }

		//'<>'
		public Keyword getLessThanSignGreaterThanSignKeyword_5() { return cLessThanSignGreaterThanSignKeyword_5; }

		//'!='
		public Keyword getExclamationMarkEqualsSignKeyword_6() { return cExclamationMarkEqualsSignKeyword_6; }

		//'in'
		public Keyword getInKeyword_7() { return cInKeyword_7; }

		//'not' 'in'
		public Group getGroup_8() { return cGroup_8; }

		//'not'
		public Keyword getNotKeyword_8_0() { return cNotKeyword_8_0; }

		//'in'
		public Keyword getInKeyword_8_1() { return cInKeyword_8_1; }

		//'is'
		public Keyword getIsKeyword_9() { return cIsKeyword_9; }

		//'is' 'not'
		public Group getGroup_10() { return cGroup_10; }

		//'is'
		public Keyword getIsKeyword_10_0() { return cIsKeyword_10_0; }

		//'not'
		public Keyword getNotKeyword_10_1() { return cNotKeyword_10_1; }
	}

	public class ExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.controlflow.SpellGrammar.expr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cXor_exprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cExprLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cSignAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cSignVerticalLineKeyword_1_1_0 = (Keyword)cSignAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightXor_exprParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//expr:
		//	xor_expr ({expr.left=current} sign='|' right=xor_expr)*;
		@Override public ParserRule getRule() { return rule; }

		//xor_expr ({expr.left=current} sign='|' right=xor_expr)*
		public Group getGroup() { return cGroup; }

		//xor_expr
		public RuleCall getXor_exprParserRuleCall_0() { return cXor_exprParserRuleCall_0; }

		//({expr.left=current} sign='|' right=xor_expr)*
		public Group getGroup_1() { return cGroup_1; }

		//{expr.left=current}
		public Action getExprLeftAction_1_0() { return cExprLeftAction_1_0; }

		//sign='|'
		public Assignment getSignAssignment_1_1() { return cSignAssignment_1_1; }

		//'|'
		public Keyword getSignVerticalLineKeyword_1_1_0() { return cSignVerticalLineKeyword_1_1_0; }

		//right=xor_expr
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//xor_expr
		public RuleCall getRightXor_exprParserRuleCall_1_2_0() { return cRightXor_exprParserRuleCall_1_2_0; }
	}

	public class Xor_exprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.controlflow.SpellGrammar.xor_expr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAnd_exprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cXor_exprLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cSignAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cSignCircumflexAccentKeyword_1_1_0 = (Keyword)cSignAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAnd_exprParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//xor_expr:
		//	and_expr ({xor_expr.left=current} sign='^' right=and_expr)*;
		@Override public ParserRule getRule() { return rule; }

		//and_expr ({xor_expr.left=current} sign='^' right=and_expr)*
		public Group getGroup() { return cGroup; }

		//and_expr
		public RuleCall getAnd_exprParserRuleCall_0() { return cAnd_exprParserRuleCall_0; }

		//({xor_expr.left=current} sign='^' right=and_expr)*
		public Group getGroup_1() { return cGroup_1; }

		//{xor_expr.left=current}
		public Action getXor_exprLeftAction_1_0() { return cXor_exprLeftAction_1_0; }

		//sign='^'
		public Assignment getSignAssignment_1_1() { return cSignAssignment_1_1; }

		//'^'
		public Keyword getSignCircumflexAccentKeyword_1_1_0() { return cSignCircumflexAccentKeyword_1_1_0; }

		//right=and_expr
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//and_expr
		public RuleCall getRightAnd_exprParserRuleCall_1_2_0() { return cRightAnd_exprParserRuleCall_1_2_0; }
	}

	public class And_exprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.controlflow.SpellGrammar.and_expr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cShift_exprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAnd_exprLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cSignAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cSignAmpersandKeyword_1_1_0 = (Keyword)cSignAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightShift_exprParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//and_expr:
		//	shift_expr ({and_expr.left=current} sign='&' right=shift_expr)*;
		@Override public ParserRule getRule() { return rule; }

		//shift_expr ({and_expr.left=current} sign='&' right=shift_expr)*
		public Group getGroup() { return cGroup; }

		//shift_expr
		public RuleCall getShift_exprParserRuleCall_0() { return cShift_exprParserRuleCall_0; }

		//({and_expr.left=current} sign='&' right=shift_expr)*
		public Group getGroup_1() { return cGroup_1; }

		//{and_expr.left=current}
		public Action getAnd_exprLeftAction_1_0() { return cAnd_exprLeftAction_1_0; }

		//sign='&'
		public Assignment getSignAssignment_1_1() { return cSignAssignment_1_1; }

		//'&'
		public Keyword getSignAmpersandKeyword_1_1_0() { return cSignAmpersandKeyword_1_1_0; }

		//right=shift_expr
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//shift_expr
		public RuleCall getRightShift_exprParserRuleCall_1_2_0() { return cRightShift_exprParserRuleCall_1_2_0; }
	}

	public class Shift_exprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.controlflow.SpellGrammar.shift_expr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cArith_exprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cShift_exprLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cSignAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cSignAlternatives_1_1_0 = (Alternatives)cSignAssignment_1_1.eContents().get(0);
		private final Keyword cSignLessThanSignLessThanSignKeyword_1_1_0_0 = (Keyword)cSignAlternatives_1_1_0.eContents().get(0);
		private final Keyword cSignGreaterThanSignGreaterThanSignKeyword_1_1_0_1 = (Keyword)cSignAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightArith_exprParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//shift_expr:
		//	arith_expr ({shift_expr.left=current} sign=('<<' | '>>') right=arith_expr)*;
		@Override public ParserRule getRule() { return rule; }

		//arith_expr ({shift_expr.left=current} sign=('<<' | '>>') right=arith_expr)*
		public Group getGroup() { return cGroup; }

		//arith_expr
		public RuleCall getArith_exprParserRuleCall_0() { return cArith_exprParserRuleCall_0; }

		//({shift_expr.left=current} sign=('<<' | '>>') right=arith_expr)*
		public Group getGroup_1() { return cGroup_1; }

		//{shift_expr.left=current}
		public Action getShift_exprLeftAction_1_0() { return cShift_exprLeftAction_1_0; }

		//sign=('<<' | '>>')
		public Assignment getSignAssignment_1_1() { return cSignAssignment_1_1; }

		//('<<' | '>>')
		public Alternatives getSignAlternatives_1_1_0() { return cSignAlternatives_1_1_0; }

		//'<<'
		public Keyword getSignLessThanSignLessThanSignKeyword_1_1_0_0() { return cSignLessThanSignLessThanSignKeyword_1_1_0_0; }

		//'>>'
		public Keyword getSignGreaterThanSignGreaterThanSignKeyword_1_1_0_1() { return cSignGreaterThanSignGreaterThanSignKeyword_1_1_0_1; }

		//right=arith_expr
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//arith_expr
		public RuleCall getRightArith_exprParserRuleCall_1_2_0() { return cRightArith_exprParserRuleCall_1_2_0; }
	}

	public class Arith_exprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.controlflow.SpellGrammar.arith_expr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTermParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cArith_exprLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cSignAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cSignAlternatives_1_1_0 = (Alternatives)cSignAssignment_1_1.eContents().get(0);
		private final Keyword cSignPlusSignKeyword_1_1_0_0 = (Keyword)cSignAlternatives_1_1_0.eContents().get(0);
		private final Keyword cSignHyphenMinusKeyword_1_1_0_1 = (Keyword)cSignAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightTermParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//arith_expr:
		//	term ({arith_expr.left=current} sign=('+' | '-') right=term)*;
		@Override public ParserRule getRule() { return rule; }

		//term ({arith_expr.left=current} sign=('+' | '-') right=term)*
		public Group getGroup() { return cGroup; }

		//term
		public RuleCall getTermParserRuleCall_0() { return cTermParserRuleCall_0; }

		//({arith_expr.left=current} sign=('+' | '-') right=term)*
		public Group getGroup_1() { return cGroup_1; }

		//{arith_expr.left=current}
		public Action getArith_exprLeftAction_1_0() { return cArith_exprLeftAction_1_0; }

		//sign=('+' | '-')
		public Assignment getSignAssignment_1_1() { return cSignAssignment_1_1; }

		//('+' | '-')
		public Alternatives getSignAlternatives_1_1_0() { return cSignAlternatives_1_1_0; }

		//'+'
		public Keyword getSignPlusSignKeyword_1_1_0_0() { return cSignPlusSignKeyword_1_1_0_0; }

		//'-'
		public Keyword getSignHyphenMinusKeyword_1_1_0_1() { return cSignHyphenMinusKeyword_1_1_0_1; }

		//right=term
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//term
		public RuleCall getRightTermParserRuleCall_1_2_0() { return cRightTermParserRuleCall_1_2_0; }
	}

	public class TermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.controlflow.SpellGrammar.term");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cFactorParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cTermLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cSignAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cSignAlternatives_1_1_0 = (Alternatives)cSignAssignment_1_1.eContents().get(0);
		private final Keyword cSignAsteriskKeyword_1_1_0_0 = (Keyword)cSignAlternatives_1_1_0.eContents().get(0);
		private final Keyword cSignSolidusKeyword_1_1_0_1 = (Keyword)cSignAlternatives_1_1_0.eContents().get(1);
		private final Keyword cSignPercentSignKeyword_1_1_0_2 = (Keyword)cSignAlternatives_1_1_0.eContents().get(2);
		private final Keyword cSignSolidusSolidusKeyword_1_1_0_3 = (Keyword)cSignAlternatives_1_1_0.eContents().get(3);
		private final Keyword cSignAsteriskAsteriskKeyword_1_1_0_4 = (Keyword)cSignAlternatives_1_1_0.eContents().get(4);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightFactorParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//term:
		//	factor ({term.left=current} sign=('*' | '/' | '%' | '//' | '**') right=factor)*;
		@Override public ParserRule getRule() { return rule; }

		//factor ({term.left=current} sign=('*' | '/' | '%' | '//' | '**') right=factor)*
		public Group getGroup() { return cGroup; }

		//factor
		public RuleCall getFactorParserRuleCall_0() { return cFactorParserRuleCall_0; }

		//({term.left=current} sign=('*' | '/' | '%' | '//' | '**') right=factor)*
		public Group getGroup_1() { return cGroup_1; }

		//{term.left=current}
		public Action getTermLeftAction_1_0() { return cTermLeftAction_1_0; }

		//sign=('*' | '/' | '%' | '//' | '**')
		public Assignment getSignAssignment_1_1() { return cSignAssignment_1_1; }

		//('*' | '/' | '%' | '//' | '**')
		public Alternatives getSignAlternatives_1_1_0() { return cSignAlternatives_1_1_0; }

		//'*'
		public Keyword getSignAsteriskKeyword_1_1_0_0() { return cSignAsteriskKeyword_1_1_0_0; }

		//'/'
		public Keyword getSignSolidusKeyword_1_1_0_1() { return cSignSolidusKeyword_1_1_0_1; }

		//'%'
		public Keyword getSignPercentSignKeyword_1_1_0_2() { return cSignPercentSignKeyword_1_1_0_2; }

		//'//'
		public Keyword getSignSolidusSolidusKeyword_1_1_0_3() { return cSignSolidusSolidusKeyword_1_1_0_3; }

		//'**'
		public Keyword getSignAsteriskAsteriskKeyword_1_1_0_4() { return cSignAsteriskAsteriskKeyword_1_1_0_4; }

		//right=factor
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//factor
		public RuleCall getRightFactorParserRuleCall_1_2_0() { return cRightFactorParserRuleCall_1_2_0; }
	}

	public class FactorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.controlflow.SpellGrammar.factor");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cSignAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final Alternatives cSignAlternatives_0_0_0 = (Alternatives)cSignAssignment_0_0.eContents().get(0);
		private final Keyword cSignPlusSignKeyword_0_0_0_0 = (Keyword)cSignAlternatives_0_0_0.eContents().get(0);
		private final Keyword cSignHyphenMinusKeyword_0_0_0_1 = (Keyword)cSignAlternatives_0_0_0.eContents().get(1);
		private final Keyword cSignTildeKeyword_0_0_0_2 = (Keyword)cSignAlternatives_0_0_0.eContents().get(2);
		private final Assignment cFactorAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cFactorFactorParserRuleCall_0_1_0 = (RuleCall)cFactorAssignment_0_1.eContents().get(0);
		private final RuleCall cPowerParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//factor:
		//	sign=('+' | '-' | '~') factor=factor | power;
		@Override public ParserRule getRule() { return rule; }

		//sign=('+' | '-' | '~') factor=factor | power
		public Alternatives getAlternatives() { return cAlternatives; }

		//sign=('+' | '-' | '~') factor=factor
		public Group getGroup_0() { return cGroup_0; }

		//sign=('+' | '-' | '~')
		public Assignment getSignAssignment_0_0() { return cSignAssignment_0_0; }

		//('+' | '-' | '~')
		public Alternatives getSignAlternatives_0_0_0() { return cSignAlternatives_0_0_0; }

		//'+'
		public Keyword getSignPlusSignKeyword_0_0_0_0() { return cSignPlusSignKeyword_0_0_0_0; }

		//'-'
		public Keyword getSignHyphenMinusKeyword_0_0_0_1() { return cSignHyphenMinusKeyword_0_0_0_1; }

		//'~'
		public Keyword getSignTildeKeyword_0_0_0_2() { return cSignTildeKeyword_0_0_0_2; }

		//factor=factor
		public Assignment getFactorAssignment_0_1() { return cFactorAssignment_0_1; }

		//factor
		public RuleCall getFactorFactorParserRuleCall_0_1_0() { return cFactorFactorParserRuleCall_0_1_0; }

		//power
		public RuleCall getPowerParserRuleCall_1() { return cPowerParserRuleCall_1; }
	}

	public class PowerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.controlflow.SpellGrammar.power");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cStepAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cStepKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cIdAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cIdAtomParserRuleCall_0_3_0 = (RuleCall)cIdAssignment_0_3.eContents().get(0);
		private final Group cGroup_0_4 = (Group)cGroup_0.eContents().get(4);
		private final Keyword cCommaKeyword_0_4_0 = (Keyword)cGroup_0_4.eContents().get(0);
		private final Assignment cDescriptionAssignment_0_4_1 = (Assignment)cGroup_0_4.eContents().get(1);
		private final RuleCall cDescriptionArith_exprParserRuleCall_0_4_1_0 = (RuleCall)cDescriptionAssignment_0_4_1.eContents().get(0);
		private final Keyword cCommaKeyword_0_5 = (Keyword)cGroup_0.eContents().get(5);
		private final Keyword cRightParenthesisKeyword_0_6 = (Keyword)cGroup_0.eContents().get(6);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cDisplayStepAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cDisplayStepKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cIdAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cIdArith_exprParserRuleCall_1_3_0 = (RuleCall)cIdAssignment_1_3.eContents().get(0);
		private final Group cGroup_1_4 = (Group)cGroup_1.eContents().get(4);
		private final Keyword cCommaKeyword_1_4_0 = (Keyword)cGroup_1_4.eContents().get(0);
		private final Assignment cDescriptionAssignment_1_4_1 = (Assignment)cGroup_1_4.eContents().get(1);
		private final RuleCall cDescriptionArith_exprParserRuleCall_1_4_1_0 = (RuleCall)cDescriptionAssignment_1_4_1.eContents().get(0);
		private final Keyword cCommaKeyword_1_5 = (Keyword)cGroup_1.eContents().get(5);
		private final Keyword cRightParenthesisKeyword_1_6 = (Keyword)cGroup_1.eContents().get(6);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cShowTMAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cShowTMKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cArgsAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cArgsArglistParserRuleCall_2_3_0 = (RuleCall)cArgsAssignment_2_3.eContents().get(0);
		private final Keyword cCommaKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		private final Keyword cRightParenthesisKeyword_2_5 = (Keyword)cGroup_2.eContents().get(5);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cSendAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Keyword cSendKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Assignment cArgsAssignment_3_3 = (Assignment)cGroup_3.eContents().get(3);
		private final RuleCall cArgsArglistParserRuleCall_3_3_0 = (RuleCall)cArgsAssignment_3_3.eContents().get(0);
		private final Keyword cCommaKeyword_3_4 = (Keyword)cGroup_3.eContents().get(4);
		private final Keyword cRightParenthesisKeyword_3_5 = (Keyword)cGroup_3.eContents().get(5);
		private final Assignment cTrailerAssignment_3_6 = (Assignment)cGroup_3.eContents().get(6);
		private final RuleCall cTrailerTrailerParserRuleCall_3_6_0 = (RuleCall)cTrailerAssignment_3_6.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cBuildTCAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Keyword cBuildTCKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Assignment cArgsAssignment_4_3 = (Assignment)cGroup_4.eContents().get(3);
		private final RuleCall cArgsArglistParserRuleCall_4_3_0 = (RuleCall)cArgsAssignment_4_3.eContents().get(0);
		private final Keyword cCommaKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final Keyword cRightParenthesisKeyword_4_5 = (Keyword)cGroup_4.eContents().get(5);
		private final Assignment cTrailerAssignment_4_6 = (Assignment)cGroup_4.eContents().get(6);
		private final RuleCall cTrailerTrailerParserRuleCall_4_6_0 = (RuleCall)cTrailerAssignment_4_6.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cSetLimitsAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final Keyword cSetLimitsKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		private final Assignment cTmAssignment_5_3 = (Assignment)cGroup_5.eContents().get(3);
		private final RuleCall cTmTestParserRuleCall_5_3_0 = (RuleCall)cTmAssignment_5_3.eContents().get(0);
		private final Group cGroup_5_4 = (Group)cGroup_5.eContents().get(4);
		private final Keyword cCommaKeyword_5_4_0 = (Keyword)cGroup_5_4.eContents().get(0);
		private final Assignment cArgsAssignment_5_4_1 = (Assignment)cGroup_5_4.eContents().get(1);
		private final RuleCall cArgsArglistParserRuleCall_5_4_1_0 = (RuleCall)cArgsAssignment_5_4_1.eContents().get(0);
		private final Keyword cCommaKeyword_5_5 = (Keyword)cGroup_5.eContents().get(5);
		private final Keyword cRightParenthesisKeyword_5_6 = (Keyword)cGroup_5.eContents().get(6);
		private final Assignment cTrailerAssignment_5_7 = (Assignment)cGroup_5.eContents().get(7);
		private final RuleCall cTrailerTrailerParserRuleCall_5_7_0 = (RuleCall)cTrailerAssignment_5_7.eContents().get(0);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Action cSetLimitsAction_6_0 = (Action)cGroup_6.eContents().get(0);
		private final Keyword cGetLimitsKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_6_2 = (Keyword)cGroup_6.eContents().get(2);
		private final Assignment cTmAssignment_6_3 = (Assignment)cGroup_6.eContents().get(3);
		private final RuleCall cTmTestParserRuleCall_6_3_0 = (RuleCall)cTmAssignment_6_3.eContents().get(0);
		private final Group cGroup_6_4 = (Group)cGroup_6.eContents().get(4);
		private final Keyword cCommaKeyword_6_4_0 = (Keyword)cGroup_6_4.eContents().get(0);
		private final Assignment cArgsAssignment_6_4_1 = (Assignment)cGroup_6_4.eContents().get(1);
		private final RuleCall cArgsArglistParserRuleCall_6_4_1_0 = (RuleCall)cArgsAssignment_6_4_1.eContents().get(0);
		private final Keyword cCommaKeyword_6_5 = (Keyword)cGroup_6.eContents().get(5);
		private final Keyword cRightParenthesisKeyword_6_6 = (Keyword)cGroup_6.eContents().get(6);
		private final Assignment cTrailerAssignment_6_7 = (Assignment)cGroup_6.eContents().get(7);
		private final RuleCall cTrailerTrailerParserRuleCall_6_7_0 = (RuleCall)cTrailerAssignment_6_7.eContents().get(0);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Action cGetTMAction_7_0 = (Action)cGroup_7.eContents().get(0);
		private final Keyword cGetTMKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_7_2 = (Keyword)cGroup_7.eContents().get(2);
		private final Assignment cTmAssignment_7_3 = (Assignment)cGroup_7.eContents().get(3);
		private final RuleCall cTmTestParserRuleCall_7_3_0 = (RuleCall)cTmAssignment_7_3.eContents().get(0);
		private final Group cGroup_7_4 = (Group)cGroup_7.eContents().get(4);
		private final Keyword cCommaKeyword_7_4_0 = (Keyword)cGroup_7_4.eContents().get(0);
		private final Assignment cArgsAssignment_7_4_1 = (Assignment)cGroup_7_4.eContents().get(1);
		private final RuleCall cArgsArglistParserRuleCall_7_4_1_0 = (RuleCall)cArgsAssignment_7_4_1.eContents().get(0);
		private final Keyword cCommaKeyword_7_5 = (Keyword)cGroup_7.eContents().get(5);
		private final Keyword cRightParenthesisKeyword_7_6 = (Keyword)cGroup_7.eContents().get(6);
		private final Assignment cTrailerAssignment_7_7 = (Assignment)cGroup_7.eContents().get(7);
		private final RuleCall cTrailerTrailerParserRuleCall_7_7_0 = (RuleCall)cTrailerAssignment_7_7.eContents().get(0);
		private final Group cGroup_8 = (Group)cAlternatives.eContents().get(8);
		private final Action cGotoAction_8_0 = (Action)cGroup_8.eContents().get(0);
		private final Keyword cGotoKeyword_8_1 = (Keyword)cGroup_8.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_8_2 = (Keyword)cGroup_8.eContents().get(2);
		private final Assignment cTargetAssignment_8_3 = (Assignment)cGroup_8.eContents().get(3);
		private final RuleCall cTargetSTRINGTerminalRuleCall_8_3_0 = (RuleCall)cTargetAssignment_8_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_8_4 = (Keyword)cGroup_8.eContents().get(4);
		private final Assignment cTrailerAssignment_8_5 = (Assignment)cGroup_8.eContents().get(5);
		private final RuleCall cTrailerTrailerParserRuleCall_8_5_0 = (RuleCall)cTrailerAssignment_8_5.eContents().get(0);
		private final Group cGroup_9 = (Group)cAlternatives.eContents().get(9);
		private final Action cGotoAction_9_0 = (Action)cGroup_9.eContents().get(0);
		private final Keyword cGotoKeyword_9_1 = (Keyword)cGroup_9.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_9_2 = (Keyword)cGroup_9.eContents().get(2);
		private final Assignment cExprAssignment_9_3 = (Assignment)cGroup_9.eContents().get(3);
		private final RuleCall cExprTestParserRuleCall_9_3_0 = (RuleCall)cExprAssignment_9_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_9_4 = (Keyword)cGroup_9.eContents().get(4);
		private final Assignment cTrailerAssignment_9_5 = (Assignment)cGroup_9.eContents().get(5);
		private final RuleCall cTrailerTrailerParserRuleCall_9_5_0 = (RuleCall)cTrailerAssignment_9_5.eContents().get(0);
		private final Group cGroup_10 = (Group)cAlternatives.eContents().get(10);
		private final Action cVerifyAction_10_0 = (Action)cGroup_10.eContents().get(0);
		private final Keyword cVerifyKeyword_10_1 = (Keyword)cGroup_10.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_10_2 = (Keyword)cGroup_10.eContents().get(2);
		private final Assignment cArgsAssignment_10_3 = (Assignment)cGroup_10.eContents().get(3);
		private final RuleCall cArgsArglistParserRuleCall_10_3_0 = (RuleCall)cArgsAssignment_10_3.eContents().get(0);
		private final Keyword cCommaKeyword_10_4 = (Keyword)cGroup_10.eContents().get(4);
		private final Keyword cRightParenthesisKeyword_10_5 = (Keyword)cGroup_10.eContents().get(5);
		private final Assignment cTrailerAssignment_10_6 = (Assignment)cGroup_10.eContents().get(6);
		private final RuleCall cTrailerTrailerParserRuleCall_10_6_0 = (RuleCall)cTrailerAssignment_10_6.eContents().get(0);
		private final Group cGroup_11 = (Group)cAlternatives.eContents().get(11);
		private final Action cVerifyAction_11_0 = (Action)cGroup_11.eContents().get(0);
		private final Keyword cWaitForKeyword_11_1 = (Keyword)cGroup_11.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_11_2 = (Keyword)cGroup_11.eContents().get(2);
		private final Assignment cArgsAssignment_11_3 = (Assignment)cGroup_11.eContents().get(3);
		private final RuleCall cArgsArglistParserRuleCall_11_3_0 = (RuleCall)cArgsAssignment_11_3.eContents().get(0);
		private final Keyword cCommaKeyword_11_4 = (Keyword)cGroup_11.eContents().get(4);
		private final Keyword cRightParenthesisKeyword_11_5 = (Keyword)cGroup_11.eContents().get(5);
		private final Assignment cTrailerAssignment_11_6 = (Assignment)cGroup_11.eContents().get(6);
		private final RuleCall cTrailerTrailerParserRuleCall_11_6_0 = (RuleCall)cTrailerAssignment_11_6.eContents().get(0);
		private final Group cGroup_12 = (Group)cAlternatives.eContents().get(12);
		private final Action cChangeLanguageConfigAction_12_0 = (Action)cGroup_12.eContents().get(0);
		private final Keyword cChangeLanguageConfigKeyword_12_1 = (Keyword)cGroup_12.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_12_2 = (Keyword)cGroup_12.eContents().get(2);
		private final Assignment cStatementAssignment_12_3 = (Assignment)cGroup_12.eContents().get(3);
		private final RuleCall cStatementPython_StatementParserRuleCall_12_3_0 = (RuleCall)cStatementAssignment_12_3.eContents().get(0);
		private final Keyword cCommaKeyword_12_4 = (Keyword)cGroup_12.eContents().get(4);
		private final Assignment cArgsAssignment_12_5 = (Assignment)cGroup_12.eContents().get(5);
		private final RuleCall cArgsArglistParserRuleCall_12_5_0 = (RuleCall)cArgsAssignment_12_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_12_6 = (Keyword)cGroup_12.eContents().get(6);
		private final Group cGroup_13 = (Group)cAlternatives.eContents().get(13);
		private final RuleCall cAtomParserRuleCall_13_0 = (RuleCall)cGroup_13.eContents().get(0);
		private final Group cGroup_13_1 = (Group)cGroup_13.eContents().get(1);
		private final Action cPowerAtomAction_13_1_0 = (Action)cGroup_13_1.eContents().get(0);
		private final Assignment cTrailerAssignment_13_1_1 = (Assignment)cGroup_13_1.eContents().get(1);
		private final RuleCall cTrailerTrailerParserRuleCall_13_1_1_0 = (RuleCall)cTrailerAssignment_13_1_1.eContents().get(0);
		private final Group cGroup_13_1_2 = (Group)cGroup_13_1.eContents().get(2);
		private final Keyword cAsteriskAsteriskKeyword_13_1_2_0 = (Keyword)cGroup_13_1_2.eContents().get(0);
		private final Assignment cFactorAssignment_13_1_2_1 = (Assignment)cGroup_13_1_2.eContents().get(1);
		private final RuleCall cFactorFactorParserRuleCall_13_1_2_1_0 = (RuleCall)cFactorAssignment_13_1_2_1.eContents().get(0);
		
		//power:
		//	{Step} 'Step' '(' id=atom (',' description=arith_expr)? ','? ')' | {DisplayStep} 'DisplayStep' '(' id=arith_expr (','
		//	description=arith_expr)? ','? ')' | {ShowTM} 'ShowTM' '(' args+=arglist ','? ')' | {Send} 'Send' '(' args+=arglist
		//	','? ')' trailer+=trailer* | {BuildTC} 'BuildTC' '(' args+=arglist ','? ')' trailer+=trailer* | {SetLimits}
		//	'SetLimits' '(' tm=test (','? args+=arglist)* ','? ')' trailer+=trailer* | {SetLimits} 'GetLimits' '(' tm=test (','?
		//	args+=arglist)* ','? ')' trailer+=trailer* | {GetTM} 'GetTM' '(' tm=test (','? args+=arglist)* ','? ')'
		//	trailer+=trailer* | {Goto} 'Goto' '(' target=STRING ')' trailer+=trailer* | {Goto} 'Goto' '(' expr=test ')'
		//	trailer+=trailer* | {Verify} 'Verify' '(' args=arglist ','? ')' trailer+=trailer* | {Verify} 'WaitFor' '('
		//	args=arglist ','? ')' trailer+=trailer* | {ChangeLanguageConfig} 'ChangeLanguageConfig' '('
		//	statement=Python_Statement ',' args=arglist ')' | atom ({power.atom=current} trailer+=trailer+ ('**'
		//	factor=factor)?)?;
		@Override public ParserRule getRule() { return rule; }

		//{Step} 'Step' '(' id=atom (',' description=arith_expr)? ','? ')' | {DisplayStep} 'DisplayStep' '(' id=arith_expr (','
		//description=arith_expr)? ','? ')' | {ShowTM} 'ShowTM' '(' args+=arglist ','? ')' | {Send} 'Send' '(' args+=arglist
		//','? ')' trailer+=trailer* | {BuildTC} 'BuildTC' '(' args+=arglist ','? ')' trailer+=trailer* | {SetLimits}
		//'SetLimits' '(' tm=test (','? args+=arglist)* ','? ')' trailer+=trailer* | {SetLimits} 'GetLimits' '(' tm=test (','?
		//args+=arglist)* ','? ')' trailer+=trailer* | {GetTM} 'GetTM' '(' tm=test (','? args+=arglist)* ','? ')'
		//trailer+=trailer* | {Goto} 'Goto' '(' target=STRING ')' trailer+=trailer* | {Goto} 'Goto' '(' expr=test ')'
		//trailer+=trailer* | {Verify} 'Verify' '(' args=arglist ','? ')' trailer+=trailer* | {Verify} 'WaitFor' '('
		//args=arglist ','? ')' trailer+=trailer* | {ChangeLanguageConfig} 'ChangeLanguageConfig' '(' statement=Python_Statement
		//',' args=arglist ')' | atom ({power.atom=current} trailer+=trailer+ ('**' factor=factor)?)?
		public Alternatives getAlternatives() { return cAlternatives; }

		//{Step} 'Step' '(' id=atom (',' description=arith_expr)? ','? ')'
		public Group getGroup_0() { return cGroup_0; }

		//{Step}
		public Action getStepAction_0_0() { return cStepAction_0_0; }

		//'Step'
		public Keyword getStepKeyword_0_1() { return cStepKeyword_0_1; }

		//'('
		public Keyword getLeftParenthesisKeyword_0_2() { return cLeftParenthesisKeyword_0_2; }

		//id=atom
		public Assignment getIdAssignment_0_3() { return cIdAssignment_0_3; }

		//atom
		public RuleCall getIdAtomParserRuleCall_0_3_0() { return cIdAtomParserRuleCall_0_3_0; }

		//(',' description=arith_expr)?
		public Group getGroup_0_4() { return cGroup_0_4; }

		//','
		public Keyword getCommaKeyword_0_4_0() { return cCommaKeyword_0_4_0; }

		//description=arith_expr
		public Assignment getDescriptionAssignment_0_4_1() { return cDescriptionAssignment_0_4_1; }

		//arith_expr
		public RuleCall getDescriptionArith_exprParserRuleCall_0_4_1_0() { return cDescriptionArith_exprParserRuleCall_0_4_1_0; }

		//','?
		public Keyword getCommaKeyword_0_5() { return cCommaKeyword_0_5; }

		//')'
		public Keyword getRightParenthesisKeyword_0_6() { return cRightParenthesisKeyword_0_6; }

		//{DisplayStep} 'DisplayStep' '(' id=arith_expr (',' description=arith_expr)? ','? ')'
		public Group getGroup_1() { return cGroup_1; }

		//{DisplayStep}
		public Action getDisplayStepAction_1_0() { return cDisplayStepAction_1_0; }

		//'DisplayStep'
		public Keyword getDisplayStepKeyword_1_1() { return cDisplayStepKeyword_1_1; }

		//'('
		public Keyword getLeftParenthesisKeyword_1_2() { return cLeftParenthesisKeyword_1_2; }

		//id=arith_expr
		public Assignment getIdAssignment_1_3() { return cIdAssignment_1_3; }

		//arith_expr
		public RuleCall getIdArith_exprParserRuleCall_1_3_0() { return cIdArith_exprParserRuleCall_1_3_0; }

		//(',' description=arith_expr)?
		public Group getGroup_1_4() { return cGroup_1_4; }

		//','
		public Keyword getCommaKeyword_1_4_0() { return cCommaKeyword_1_4_0; }

		//description=arith_expr
		public Assignment getDescriptionAssignment_1_4_1() { return cDescriptionAssignment_1_4_1; }

		//arith_expr
		public RuleCall getDescriptionArith_exprParserRuleCall_1_4_1_0() { return cDescriptionArith_exprParserRuleCall_1_4_1_0; }

		//','?
		public Keyword getCommaKeyword_1_5() { return cCommaKeyword_1_5; }

		//')'
		public Keyword getRightParenthesisKeyword_1_6() { return cRightParenthesisKeyword_1_6; }

		//{ShowTM} 'ShowTM' '(' args+=arglist ','? ')'
		public Group getGroup_2() { return cGroup_2; }

		//{ShowTM}
		public Action getShowTMAction_2_0() { return cShowTMAction_2_0; }

		//'ShowTM'
		public Keyword getShowTMKeyword_2_1() { return cShowTMKeyword_2_1; }

		//'('
		public Keyword getLeftParenthesisKeyword_2_2() { return cLeftParenthesisKeyword_2_2; }

		//args+=arglist
		public Assignment getArgsAssignment_2_3() { return cArgsAssignment_2_3; }

		//arglist
		public RuleCall getArgsArglistParserRuleCall_2_3_0() { return cArgsArglistParserRuleCall_2_3_0; }

		//','?
		public Keyword getCommaKeyword_2_4() { return cCommaKeyword_2_4; }

		//')'
		public Keyword getRightParenthesisKeyword_2_5() { return cRightParenthesisKeyword_2_5; }

		//{Send} 'Send' '(' args+=arglist ','? ')' trailer+=trailer*
		public Group getGroup_3() { return cGroup_3; }

		//{Send}
		public Action getSendAction_3_0() { return cSendAction_3_0; }

		//'Send'
		public Keyword getSendKeyword_3_1() { return cSendKeyword_3_1; }

		//'('
		public Keyword getLeftParenthesisKeyword_3_2() { return cLeftParenthesisKeyword_3_2; }

		//args+=arglist
		public Assignment getArgsAssignment_3_3() { return cArgsAssignment_3_3; }

		//arglist
		public RuleCall getArgsArglistParserRuleCall_3_3_0() { return cArgsArglistParserRuleCall_3_3_0; }

		//','?
		public Keyword getCommaKeyword_3_4() { return cCommaKeyword_3_4; }

		//')'
		public Keyword getRightParenthesisKeyword_3_5() { return cRightParenthesisKeyword_3_5; }

		//trailer+=trailer*
		public Assignment getTrailerAssignment_3_6() { return cTrailerAssignment_3_6; }

		//trailer
		public RuleCall getTrailerTrailerParserRuleCall_3_6_0() { return cTrailerTrailerParserRuleCall_3_6_0; }

		//{BuildTC} 'BuildTC' '(' args+=arglist ','? ')' trailer+=trailer*
		public Group getGroup_4() { return cGroup_4; }

		//{BuildTC}
		public Action getBuildTCAction_4_0() { return cBuildTCAction_4_0; }

		//'BuildTC'
		public Keyword getBuildTCKeyword_4_1() { return cBuildTCKeyword_4_1; }

		//'('
		public Keyword getLeftParenthesisKeyword_4_2() { return cLeftParenthesisKeyword_4_2; }

		//args+=arglist
		public Assignment getArgsAssignment_4_3() { return cArgsAssignment_4_3; }

		//arglist
		public RuleCall getArgsArglistParserRuleCall_4_3_0() { return cArgsArglistParserRuleCall_4_3_0; }

		//','?
		public Keyword getCommaKeyword_4_4() { return cCommaKeyword_4_4; }

		//')'
		public Keyword getRightParenthesisKeyword_4_5() { return cRightParenthesisKeyword_4_5; }

		//trailer+=trailer*
		public Assignment getTrailerAssignment_4_6() { return cTrailerAssignment_4_6; }

		//trailer
		public RuleCall getTrailerTrailerParserRuleCall_4_6_0() { return cTrailerTrailerParserRuleCall_4_6_0; }

		//{SetLimits} 'SetLimits' '(' tm=test (','? args+=arglist)* ','? ')' trailer+=trailer*
		public Group getGroup_5() { return cGroup_5; }

		//{SetLimits}
		public Action getSetLimitsAction_5_0() { return cSetLimitsAction_5_0; }

		//'SetLimits'
		public Keyword getSetLimitsKeyword_5_1() { return cSetLimitsKeyword_5_1; }

		//'('
		public Keyword getLeftParenthesisKeyword_5_2() { return cLeftParenthesisKeyword_5_2; }

		//tm=test
		public Assignment getTmAssignment_5_3() { return cTmAssignment_5_3; }

		//test
		public RuleCall getTmTestParserRuleCall_5_3_0() { return cTmTestParserRuleCall_5_3_0; }

		//(','? args+=arglist)*
		public Group getGroup_5_4() { return cGroup_5_4; }

		//','?
		public Keyword getCommaKeyword_5_4_0() { return cCommaKeyword_5_4_0; }

		//args+=arglist
		public Assignment getArgsAssignment_5_4_1() { return cArgsAssignment_5_4_1; }

		//arglist
		public RuleCall getArgsArglistParserRuleCall_5_4_1_0() { return cArgsArglistParserRuleCall_5_4_1_0; }

		//','?
		public Keyword getCommaKeyword_5_5() { return cCommaKeyword_5_5; }

		//')'
		public Keyword getRightParenthesisKeyword_5_6() { return cRightParenthesisKeyword_5_6; }

		//trailer+=trailer*
		public Assignment getTrailerAssignment_5_7() { return cTrailerAssignment_5_7; }

		//trailer
		public RuleCall getTrailerTrailerParserRuleCall_5_7_0() { return cTrailerTrailerParserRuleCall_5_7_0; }

		//{SetLimits} 'GetLimits' '(' tm=test (','? args+=arglist)* ','? ')' trailer+=trailer*
		public Group getGroup_6() { return cGroup_6; }

		//{SetLimits}
		public Action getSetLimitsAction_6_0() { return cSetLimitsAction_6_0; }

		//'GetLimits'
		public Keyword getGetLimitsKeyword_6_1() { return cGetLimitsKeyword_6_1; }

		//'('
		public Keyword getLeftParenthesisKeyword_6_2() { return cLeftParenthesisKeyword_6_2; }

		//tm=test
		public Assignment getTmAssignment_6_3() { return cTmAssignment_6_3; }

		//test
		public RuleCall getTmTestParserRuleCall_6_3_0() { return cTmTestParserRuleCall_6_3_0; }

		//(','? args+=arglist)*
		public Group getGroup_6_4() { return cGroup_6_4; }

		//','?
		public Keyword getCommaKeyword_6_4_0() { return cCommaKeyword_6_4_0; }

		//args+=arglist
		public Assignment getArgsAssignment_6_4_1() { return cArgsAssignment_6_4_1; }

		//arglist
		public RuleCall getArgsArglistParserRuleCall_6_4_1_0() { return cArgsArglistParserRuleCall_6_4_1_0; }

		//','?
		public Keyword getCommaKeyword_6_5() { return cCommaKeyword_6_5; }

		//')'
		public Keyword getRightParenthesisKeyword_6_6() { return cRightParenthesisKeyword_6_6; }

		//trailer+=trailer*
		public Assignment getTrailerAssignment_6_7() { return cTrailerAssignment_6_7; }

		//trailer
		public RuleCall getTrailerTrailerParserRuleCall_6_7_0() { return cTrailerTrailerParserRuleCall_6_7_0; }

		//{GetTM} 'GetTM' '(' tm=test (','? args+=arglist)* ','? ')' trailer+=trailer*
		public Group getGroup_7() { return cGroup_7; }

		//{GetTM}
		public Action getGetTMAction_7_0() { return cGetTMAction_7_0; }

		//'GetTM'
		public Keyword getGetTMKeyword_7_1() { return cGetTMKeyword_7_1; }

		//'('
		public Keyword getLeftParenthesisKeyword_7_2() { return cLeftParenthesisKeyword_7_2; }

		//tm=test
		public Assignment getTmAssignment_7_3() { return cTmAssignment_7_3; }

		//test
		public RuleCall getTmTestParserRuleCall_7_3_0() { return cTmTestParserRuleCall_7_3_0; }

		//(','? args+=arglist)*
		public Group getGroup_7_4() { return cGroup_7_4; }

		//','?
		public Keyword getCommaKeyword_7_4_0() { return cCommaKeyword_7_4_0; }

		//args+=arglist
		public Assignment getArgsAssignment_7_4_1() { return cArgsAssignment_7_4_1; }

		//arglist
		public RuleCall getArgsArglistParserRuleCall_7_4_1_0() { return cArgsArglistParserRuleCall_7_4_1_0; }

		//','?
		public Keyword getCommaKeyword_7_5() { return cCommaKeyword_7_5; }

		//')'
		public Keyword getRightParenthesisKeyword_7_6() { return cRightParenthesisKeyword_7_6; }

		//trailer+=trailer*
		public Assignment getTrailerAssignment_7_7() { return cTrailerAssignment_7_7; }

		//trailer
		public RuleCall getTrailerTrailerParserRuleCall_7_7_0() { return cTrailerTrailerParserRuleCall_7_7_0; }

		//{Goto} 'Goto' '(' target=STRING ')' trailer+=trailer*
		public Group getGroup_8() { return cGroup_8; }

		//{Goto}
		public Action getGotoAction_8_0() { return cGotoAction_8_0; }

		//'Goto'
		public Keyword getGotoKeyword_8_1() { return cGotoKeyword_8_1; }

		//'('
		public Keyword getLeftParenthesisKeyword_8_2() { return cLeftParenthesisKeyword_8_2; }

		//target=STRING
		public Assignment getTargetAssignment_8_3() { return cTargetAssignment_8_3; }

		//STRING
		public RuleCall getTargetSTRINGTerminalRuleCall_8_3_0() { return cTargetSTRINGTerminalRuleCall_8_3_0; }

		//')'
		public Keyword getRightParenthesisKeyword_8_4() { return cRightParenthesisKeyword_8_4; }

		//trailer+=trailer*
		public Assignment getTrailerAssignment_8_5() { return cTrailerAssignment_8_5; }

		//trailer
		public RuleCall getTrailerTrailerParserRuleCall_8_5_0() { return cTrailerTrailerParserRuleCall_8_5_0; }

		//{Goto} 'Goto' '(' expr=test ')' trailer+=trailer*
		public Group getGroup_9() { return cGroup_9; }

		//{Goto}
		public Action getGotoAction_9_0() { return cGotoAction_9_0; }

		//'Goto'
		public Keyword getGotoKeyword_9_1() { return cGotoKeyword_9_1; }

		//'('
		public Keyword getLeftParenthesisKeyword_9_2() { return cLeftParenthesisKeyword_9_2; }

		//expr=test
		public Assignment getExprAssignment_9_3() { return cExprAssignment_9_3; }

		//test
		public RuleCall getExprTestParserRuleCall_9_3_0() { return cExprTestParserRuleCall_9_3_0; }

		//')'
		public Keyword getRightParenthesisKeyword_9_4() { return cRightParenthesisKeyword_9_4; }

		//trailer+=trailer*
		public Assignment getTrailerAssignment_9_5() { return cTrailerAssignment_9_5; }

		//trailer
		public RuleCall getTrailerTrailerParserRuleCall_9_5_0() { return cTrailerTrailerParserRuleCall_9_5_0; }

		//{Verify} 'Verify' '(' args=arglist ','? ')' trailer+=trailer*
		public Group getGroup_10() { return cGroup_10; }

		//{Verify}
		public Action getVerifyAction_10_0() { return cVerifyAction_10_0; }

		//'Verify'
		public Keyword getVerifyKeyword_10_1() { return cVerifyKeyword_10_1; }

		//'('
		public Keyword getLeftParenthesisKeyword_10_2() { return cLeftParenthesisKeyword_10_2; }

		//args=arglist
		public Assignment getArgsAssignment_10_3() { return cArgsAssignment_10_3; }

		//arglist
		public RuleCall getArgsArglistParserRuleCall_10_3_0() { return cArgsArglistParserRuleCall_10_3_0; }

		//','?
		public Keyword getCommaKeyword_10_4() { return cCommaKeyword_10_4; }

		//')'
		public Keyword getRightParenthesisKeyword_10_5() { return cRightParenthesisKeyword_10_5; }

		//trailer+=trailer*
		public Assignment getTrailerAssignment_10_6() { return cTrailerAssignment_10_6; }

		//trailer
		public RuleCall getTrailerTrailerParserRuleCall_10_6_0() { return cTrailerTrailerParserRuleCall_10_6_0; }

		//{Verify} 'WaitFor' '(' args=arglist ','? ')' trailer+=trailer*
		public Group getGroup_11() { return cGroup_11; }

		//{Verify}
		public Action getVerifyAction_11_0() { return cVerifyAction_11_0; }

		//'WaitFor'
		public Keyword getWaitForKeyword_11_1() { return cWaitForKeyword_11_1; }

		//'('
		public Keyword getLeftParenthesisKeyword_11_2() { return cLeftParenthesisKeyword_11_2; }

		//args=arglist
		public Assignment getArgsAssignment_11_3() { return cArgsAssignment_11_3; }

		//arglist
		public RuleCall getArgsArglistParserRuleCall_11_3_0() { return cArgsArglistParserRuleCall_11_3_0; }

		//','?
		public Keyword getCommaKeyword_11_4() { return cCommaKeyword_11_4; }

		//')'
		public Keyword getRightParenthesisKeyword_11_5() { return cRightParenthesisKeyword_11_5; }

		//trailer+=trailer*
		public Assignment getTrailerAssignment_11_6() { return cTrailerAssignment_11_6; }

		//trailer
		public RuleCall getTrailerTrailerParserRuleCall_11_6_0() { return cTrailerTrailerParserRuleCall_11_6_0; }

		//{ChangeLanguageConfig} 'ChangeLanguageConfig' '(' statement=Python_Statement ',' args=arglist ')'
		public Group getGroup_12() { return cGroup_12; }

		//{ChangeLanguageConfig}
		public Action getChangeLanguageConfigAction_12_0() { return cChangeLanguageConfigAction_12_0; }

		//'ChangeLanguageConfig'
		public Keyword getChangeLanguageConfigKeyword_12_1() { return cChangeLanguageConfigKeyword_12_1; }

		//'('
		public Keyword getLeftParenthesisKeyword_12_2() { return cLeftParenthesisKeyword_12_2; }

		//statement=Python_Statement
		public Assignment getStatementAssignment_12_3() { return cStatementAssignment_12_3; }

		//Python_Statement
		public RuleCall getStatementPython_StatementParserRuleCall_12_3_0() { return cStatementPython_StatementParserRuleCall_12_3_0; }

		//','
		public Keyword getCommaKeyword_12_4() { return cCommaKeyword_12_4; }

		//args=arglist
		public Assignment getArgsAssignment_12_5() { return cArgsAssignment_12_5; }

		//arglist
		public RuleCall getArgsArglistParserRuleCall_12_5_0() { return cArgsArglistParserRuleCall_12_5_0; }

		//')'
		public Keyword getRightParenthesisKeyword_12_6() { return cRightParenthesisKeyword_12_6; }

		//atom ({power.atom=current} trailer+=trailer+ ('**' factor=factor)?)?
		public Group getGroup_13() { return cGroup_13; }

		//atom
		public RuleCall getAtomParserRuleCall_13_0() { return cAtomParserRuleCall_13_0; }

		//({power.atom=current} trailer+=trailer+ ('**' factor=factor)?)?
		public Group getGroup_13_1() { return cGroup_13_1; }

		//{power.atom=current}
		public Action getPowerAtomAction_13_1_0() { return cPowerAtomAction_13_1_0; }

		//trailer+=trailer+
		public Assignment getTrailerAssignment_13_1_1() { return cTrailerAssignment_13_1_1; }

		//trailer
		public RuleCall getTrailerTrailerParserRuleCall_13_1_1_0() { return cTrailerTrailerParserRuleCall_13_1_1_0; }

		//('**' factor=factor)?
		public Group getGroup_13_1_2() { return cGroup_13_1_2; }

		//'**'
		public Keyword getAsteriskAsteriskKeyword_13_1_2_0() { return cAsteriskAsteriskKeyword_13_1_2_0; }

		//factor=factor
		public Assignment getFactorAssignment_13_1_2_1() { return cFactorAssignment_13_1_2_1; }

		//factor
		public RuleCall getFactorFactorParserRuleCall_13_1_2_1_0() { return cFactorFactorParserRuleCall_13_1_2_1_0; }
	}

	public class Yield_or_testlist_compElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.controlflow.SpellGrammar.yield_or_testlist_comp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cYield_exprParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTestlist_compParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//yield_or_testlist_comp:
		//	yield_expr | testlist_comp;
		@Override public ParserRule getRule() { return rule; }

		//yield_expr | testlist_comp
		public Alternatives getAlternatives() { return cAlternatives; }

		//yield_expr
		public RuleCall getYield_exprParserRuleCall_0() { return cYield_exprParserRuleCall_0; }

		//testlist_comp
		public RuleCall getTestlist_compParserRuleCall_1() { return cTestlist_compParserRuleCall_1; }
	}

	public class AtomElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.controlflow.SpellGrammar.atom");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cRoundBracketAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final Keyword cRoundBracketLeftParenthesisKeyword_0_0_0 = (Keyword)cRoundBracketAssignment_0_0.eContents().get(0);
		private final Assignment cYield_or_testlist_compAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cYield_or_testlist_compYield_or_testlist_compParserRuleCall_0_1_0 = (RuleCall)cYield_or_testlist_compAssignment_0_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cSquareBracketAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cSquareBracketLeftSquareBracketKeyword_1_0_0 = (Keyword)cSquareBracketAssignment_1_0.eContents().get(0);
		private final Assignment cListmakerAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cListmakerListmakerParserRuleCall_1_1_0 = (RuleCall)cListmakerAssignment_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cCurlyBracketAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Keyword cCurlyBracketLeftCurlyBracketKeyword_2_0_0 = (Keyword)cCurlyBracketAssignment_2_0.eContents().get(0);
		private final Assignment cDictorsetmakerAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cDictorsetmakerDictorsetmakerParserRuleCall_2_1_0 = (RuleCall)cDictorsetmakerAssignment_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cGraveAccentKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cTestlist1Assignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cTestlist1Testlist1ParserRuleCall_3_1_0 = (RuleCall)cTestlist1Assignment_3_1.eContents().get(0);
		private final Keyword cGraveAccentKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Assignment cNameAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cNameNAMEParserRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		private final Assignment cNameAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final RuleCall cNameNumberWithPlusOrMinusParserRuleCall_5_0 = (RuleCall)cNameAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Assignment cStringsAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final RuleCall cStringsSTRINGTerminalRuleCall_6_0_0 = (RuleCall)cStringsAssignment_6_0.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_6_1 = (RuleCall)cGroup_6.eContents().get(1);
		
		//atom:
		//	roundBracket?='(' yield_or_testlist_comp=yield_or_testlist_comp? ')' | squareBracket?='[' listmaker=listmaker? ']' |
		//	curlyBracket?='{' dictorsetmaker=dictorsetmaker? '}' | '`' testlist1=testlist1 '`' | name=NAME |
		//	name=NumberWithPlusOrMinus | (strings+=STRING WS?)+;
		@Override public ParserRule getRule() { return rule; }

		//roundBracket?='(' yield_or_testlist_comp=yield_or_testlist_comp? ')' | squareBracket?='[' listmaker=listmaker? ']' |
		//curlyBracket?='{' dictorsetmaker=dictorsetmaker? '}' | '`' testlist1=testlist1 '`' | name=NAME |
		//name=NumberWithPlusOrMinus | (strings+=STRING WS?)+
		public Alternatives getAlternatives() { return cAlternatives; }

		//roundBracket?='(' yield_or_testlist_comp=yield_or_testlist_comp? ')'
		public Group getGroup_0() { return cGroup_0; }

		//roundBracket?='('
		public Assignment getRoundBracketAssignment_0_0() { return cRoundBracketAssignment_0_0; }

		//'('
		public Keyword getRoundBracketLeftParenthesisKeyword_0_0_0() { return cRoundBracketLeftParenthesisKeyword_0_0_0; }

		//yield_or_testlist_comp=yield_or_testlist_comp?
		public Assignment getYield_or_testlist_compAssignment_0_1() { return cYield_or_testlist_compAssignment_0_1; }

		//yield_or_testlist_comp
		public RuleCall getYield_or_testlist_compYield_or_testlist_compParserRuleCall_0_1_0() { return cYield_or_testlist_compYield_or_testlist_compParserRuleCall_0_1_0; }

		//')'
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }

		//squareBracket?='[' listmaker=listmaker? ']'
		public Group getGroup_1() { return cGroup_1; }

		//squareBracket?='['
		public Assignment getSquareBracketAssignment_1_0() { return cSquareBracketAssignment_1_0; }

		//'['
		public Keyword getSquareBracketLeftSquareBracketKeyword_1_0_0() { return cSquareBracketLeftSquareBracketKeyword_1_0_0; }

		//listmaker=listmaker?
		public Assignment getListmakerAssignment_1_1() { return cListmakerAssignment_1_1; }

		//listmaker
		public RuleCall getListmakerListmakerParserRuleCall_1_1_0() { return cListmakerListmakerParserRuleCall_1_1_0; }

		//']'
		public Keyword getRightSquareBracketKeyword_1_2() { return cRightSquareBracketKeyword_1_2; }

		//curlyBracket?='{' dictorsetmaker=dictorsetmaker? '}'
		public Group getGroup_2() { return cGroup_2; }

		//curlyBracket?='{'
		public Assignment getCurlyBracketAssignment_2_0() { return cCurlyBracketAssignment_2_0; }

		//'{'
		public Keyword getCurlyBracketLeftCurlyBracketKeyword_2_0_0() { return cCurlyBracketLeftCurlyBracketKeyword_2_0_0; }

		//dictorsetmaker=dictorsetmaker?
		public Assignment getDictorsetmakerAssignment_2_1() { return cDictorsetmakerAssignment_2_1; }

		//dictorsetmaker
		public RuleCall getDictorsetmakerDictorsetmakerParserRuleCall_2_1_0() { return cDictorsetmakerDictorsetmakerParserRuleCall_2_1_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_2_2() { return cRightCurlyBracketKeyword_2_2; }

		//'`' testlist1=testlist1 '`'
		public Group getGroup_3() { return cGroup_3; }

		//'`'
		public Keyword getGraveAccentKeyword_3_0() { return cGraveAccentKeyword_3_0; }

		//testlist1=testlist1
		public Assignment getTestlist1Assignment_3_1() { return cTestlist1Assignment_3_1; }

		//testlist1
		public RuleCall getTestlist1Testlist1ParserRuleCall_3_1_0() { return cTestlist1Testlist1ParserRuleCall_3_1_0; }

		//'`'
		public Keyword getGraveAccentKeyword_3_2() { return cGraveAccentKeyword_3_2; }

		//name=NAME
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }

		//NAME
		public RuleCall getNameNAMEParserRuleCall_4_0() { return cNameNAMEParserRuleCall_4_0; }

		//name=NumberWithPlusOrMinus
		public Assignment getNameAssignment_5() { return cNameAssignment_5; }

		//NumberWithPlusOrMinus
		public RuleCall getNameNumberWithPlusOrMinusParserRuleCall_5_0() { return cNameNumberWithPlusOrMinusParserRuleCall_5_0; }

		//(strings+=STRING WS?)+
		public Group getGroup_6() { return cGroup_6; }

		//strings+=STRING
		public Assignment getStringsAssignment_6_0() { return cStringsAssignment_6_0; }

		//STRING
		public RuleCall getStringsSTRINGTerminalRuleCall_6_0_0() { return cStringsSTRINGTerminalRuleCall_6_0_0; }

		//WS?
		public RuleCall getWSTerminalRuleCall_6_1() { return cWSTerminalRuleCall_6_1; }
	}

	public class ListmakerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.controlflow.SpellGrammar.listmaker");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTestAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTestTestParserRuleCall_0_0 = (RuleCall)cTestAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cList_forAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cList_forList_forParserRuleCall_1_0_0 = (RuleCall)cList_forAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Group cGroup_1_1_0 = (Group)cGroup_1_1.eContents().get(0);
		private final Keyword cCommaKeyword_1_1_0_0 = (Keyword)cGroup_1_1_0.eContents().get(0);
		private final Assignment cAdditionalTestsAssignment_1_1_0_1 = (Assignment)cGroup_1_1_0.eContents().get(1);
		private final RuleCall cAdditionalTestsTestParserRuleCall_1_1_0_1_0 = (RuleCall)cAdditionalTestsAssignment_1_1_0_1.eContents().get(0);
		private final Assignment cOptionalCommaAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final Keyword cOptionalCommaCommaKeyword_1_1_1_0 = (Keyword)cOptionalCommaAssignment_1_1_1.eContents().get(0);
		
		//listmaker:
		//	test=test (list_for=list_for | (',' additionalTests+=test)* optionalComma?=','?)?;
		@Override public ParserRule getRule() { return rule; }

		//test=test (list_for=list_for | (',' additionalTests+=test)* optionalComma?=','?)?
		public Group getGroup() { return cGroup; }

		//test=test
		public Assignment getTestAssignment_0() { return cTestAssignment_0; }

		//test
		public RuleCall getTestTestParserRuleCall_0_0() { return cTestTestParserRuleCall_0_0; }

		//(list_for=list_for | (',' additionalTests+=test)* optionalComma?=','?)?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//list_for=list_for
		public Assignment getList_forAssignment_1_0() { return cList_forAssignment_1_0; }

		//list_for
		public RuleCall getList_forList_forParserRuleCall_1_0_0() { return cList_forList_forParserRuleCall_1_0_0; }

		//(',' additionalTests+=test)* optionalComma?=','?
		public Group getGroup_1_1() { return cGroup_1_1; }

		//(',' additionalTests+=test)*
		public Group getGroup_1_1_0() { return cGroup_1_1_0; }

		//','
		public Keyword getCommaKeyword_1_1_0_0() { return cCommaKeyword_1_1_0_0; }

		//additionalTests+=test
		public Assignment getAdditionalTestsAssignment_1_1_0_1() { return cAdditionalTestsAssignment_1_1_0_1; }

		//test
		public RuleCall getAdditionalTestsTestParserRuleCall_1_1_0_1_0() { return cAdditionalTestsTestParserRuleCall_1_1_0_1_0; }

		//optionalComma?=','?
		public Assignment getOptionalCommaAssignment_1_1_1() { return cOptionalCommaAssignment_1_1_1; }

		//','
		public Keyword getOptionalCommaCommaKeyword_1_1_1_0() { return cOptionalCommaCommaKeyword_1_1_1_0; }
	}

	public class Testlist_compElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.controlflow.SpellGrammar.testlist_comp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTestAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTestTestParserRuleCall_0_0 = (RuleCall)cTestAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cComp_forAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cComp_forComp_forParserRuleCall_1_0_0 = (RuleCall)cComp_forAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Group cGroup_1_1_0 = (Group)cGroup_1_1.eContents().get(0);
		private final Keyword cCommaKeyword_1_1_0_0 = (Keyword)cGroup_1_1_0.eContents().get(0);
		private final Assignment cAdditionalTestsAssignment_1_1_0_1 = (Assignment)cGroup_1_1_0.eContents().get(1);
		private final RuleCall cAdditionalTestsTestParserRuleCall_1_1_0_1_0 = (RuleCall)cAdditionalTestsAssignment_1_1_0_1.eContents().get(0);
		private final Assignment cOptionalCommaAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final Keyword cOptionalCommaCommaKeyword_1_1_1_0 = (Keyword)cOptionalCommaAssignment_1_1_1.eContents().get(0);
		
		//testlist_comp:
		//	test=test (comp_for=comp_for | (',' additionalTests+=test)* optionalComma?=','?)?;
		@Override public ParserRule getRule() { return rule; }

		//test=test (comp_for=comp_for | (',' additionalTests+=test)* optionalComma?=','?)?
		public Group getGroup() { return cGroup; }

		//test=test
		public Assignment getTestAssignment_0() { return cTestAssignment_0; }

		//test
		public RuleCall getTestTestParserRuleCall_0_0() { return cTestTestParserRuleCall_0_0; }

		//(comp_for=comp_for | (',' additionalTests+=test)* optionalComma?=','?)?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//comp_for=comp_for
		public Assignment getComp_forAssignment_1_0() { return cComp_forAssignment_1_0; }

		//comp_for
		public RuleCall getComp_forComp_forParserRuleCall_1_0_0() { return cComp_forComp_forParserRuleCall_1_0_0; }

		//(',' additionalTests+=test)* optionalComma?=','?
		public Group getGroup_1_1() { return cGroup_1_1; }

		//(',' additionalTests+=test)*
		public Group getGroup_1_1_0() { return cGroup_1_1_0; }

		//','
		public Keyword getCommaKeyword_1_1_0_0() { return cCommaKeyword_1_1_0_0; }

		//additionalTests+=test
		public Assignment getAdditionalTestsAssignment_1_1_0_1() { return cAdditionalTestsAssignment_1_1_0_1; }

		//test
		public RuleCall getAdditionalTestsTestParserRuleCall_1_1_0_1_0() { return cAdditionalTestsTestParserRuleCall_1_1_0_1_0; }

		//optionalComma?=','?
		public Assignment getOptionalCommaAssignment_1_1_1() { return cOptionalCommaAssignment_1_1_1; }

		//','
		public Keyword getOptionalCommaCommaKeyword_1_1_1_0() { return cOptionalCommaCommaKeyword_1_1_1_0; }
	}

	public class LambdefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.controlflow.SpellGrammar.lambdef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLambdefAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLambdaKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cVarargslistAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVarargslistVarargslistParserRuleCall_2_0 = (RuleCall)cVarargslistAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTestAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTestTestParserRuleCall_4_0 = (RuleCall)cTestAssignment_4.eContents().get(0);
		
		//lambdef:
		//	{lambdef} 'lambda' varargslist=varargslist? ':' test=test;
		@Override public ParserRule getRule() { return rule; }

		//{lambdef} 'lambda' varargslist=varargslist? ':' test=test
		public Group getGroup() { return cGroup; }

		//{lambdef}
		public Action getLambdefAction_0() { return cLambdefAction_0; }

		//'lambda'
		public Keyword getLambdaKeyword_1() { return cLambdaKeyword_1; }

		//varargslist=varargslist?
		public Assignment getVarargslistAssignment_2() { return cVarargslistAssignment_2; }

		//varargslist
		public RuleCall getVarargslistVarargslistParserRuleCall_2_0() { return cVarargslistVarargslistParserRuleCall_2_0; }

		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }

		//test=test
		public Assignment getTestAssignment_4() { return cTestAssignment_4; }

		//test
		public RuleCall getTestTestParserRuleCall_4_0() { return cTestTestParserRuleCall_4_0; }
	}

	public class TrailerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.controlflow.SpellGrammar.trailer");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cRoundBracketAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final Keyword cRoundBracketLeftParenthesisKeyword_0_0_0 = (Keyword)cRoundBracketAssignment_0_0.eContents().get(0);
		private final Assignment cArglistAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cArglistArglistParserRuleCall_0_1_0 = (RuleCall)cArglistAssignment_0_1.eContents().get(0);
		private final Keyword cCommaKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cSquareBracketAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cSquareBracketLeftSquareBracketKeyword_1_0_0 = (Keyword)cSquareBracketAssignment_1_0.eContents().get(0);
		private final Assignment cSubscriptlistAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cSubscriptlistSubscriptlistParserRuleCall_1_1_0 = (RuleCall)cSubscriptlistAssignment_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cFullStopKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cDotNameAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cDotNameNAMEParserRuleCall_2_1_0 = (RuleCall)cDotNameAssignment_2_1.eContents().get(0);
		
		//trailer:
		//	roundBracket?='(' arglist=arglist? ','? ')' | squareBracket?='[' subscriptlist=subscriptlist ']' | '.' dotName=NAME;
		@Override public ParserRule getRule() { return rule; }

		//roundBracket?='(' arglist=arglist? ','? ')' | squareBracket?='[' subscriptlist=subscriptlist ']' | '.' dotName=NAME
		public Alternatives getAlternatives() { return cAlternatives; }

		//roundBracket?='(' arglist=arglist? ','? ')'
		public Group getGroup_0() { return cGroup_0; }

		//roundBracket?='('
		public Assignment getRoundBracketAssignment_0_0() { return cRoundBracketAssignment_0_0; }

		//'('
		public Keyword getRoundBracketLeftParenthesisKeyword_0_0_0() { return cRoundBracketLeftParenthesisKeyword_0_0_0; }

		//arglist=arglist?
		public Assignment getArglistAssignment_0_1() { return cArglistAssignment_0_1; }

		//arglist
		public RuleCall getArglistArglistParserRuleCall_0_1_0() { return cArglistArglistParserRuleCall_0_1_0; }

		//','?
		public Keyword getCommaKeyword_0_2() { return cCommaKeyword_0_2; }

		//')'
		public Keyword getRightParenthesisKeyword_0_3() { return cRightParenthesisKeyword_0_3; }

		//squareBracket?='[' subscriptlist=subscriptlist ']'
		public Group getGroup_1() { return cGroup_1; }

		//squareBracket?='['
		public Assignment getSquareBracketAssignment_1_0() { return cSquareBracketAssignment_1_0; }

		//'['
		public Keyword getSquareBracketLeftSquareBracketKeyword_1_0_0() { return cSquareBracketLeftSquareBracketKeyword_1_0_0; }

		//subscriptlist=subscriptlist
		public Assignment getSubscriptlistAssignment_1_1() { return cSubscriptlistAssignment_1_1; }

		//subscriptlist
		public RuleCall getSubscriptlistSubscriptlistParserRuleCall_1_1_0() { return cSubscriptlistSubscriptlistParserRuleCall_1_1_0; }

		//']'
		public Keyword getRightSquareBracketKeyword_1_2() { return cRightSquareBracketKeyword_1_2; }

		//'.' dotName=NAME
		public Group getGroup_2() { return cGroup_2; }

		//'.'
		public Keyword getFullStopKeyword_2_0() { return cFullStopKeyword_2_0; }

		//dotName=NAME
		public Assignment getDotNameAssignment_2_1() { return cDotNameAssignment_2_1; }

		//NAME
		public RuleCall getDotNameNAMEParserRuleCall_2_1_0() { return cDotNameNAMEParserRuleCall_2_1_0; }
	}

	public class SubscriptlistElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.controlflow.SpellGrammar.subscriptlist");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSubscriptAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSubscriptSubscriptParserRuleCall_0_0 = (RuleCall)cSubscriptAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cSubscriptAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cSubscriptSubscriptParserRuleCall_1_1_0 = (RuleCall)cSubscriptAssignment_1_1.eContents().get(0);
		private final Assignment cOptionalCommaAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cOptionalCommaCommaKeyword_2_0 = (Keyword)cOptionalCommaAssignment_2.eContents().get(0);
		
		//subscriptlist:
		//	subscript+=subscript (',' subscript+=subscript)* optionalComma?=','?;
		@Override public ParserRule getRule() { return rule; }

		//subscript+=subscript (',' subscript+=subscript)* optionalComma?=','?
		public Group getGroup() { return cGroup; }

		//subscript+=subscript
		public Assignment getSubscriptAssignment_0() { return cSubscriptAssignment_0; }

		//subscript
		public RuleCall getSubscriptSubscriptParserRuleCall_0_0() { return cSubscriptSubscriptParserRuleCall_0_0; }

		//(',' subscript+=subscript)*
		public Group getGroup_1() { return cGroup_1; }

		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//subscript+=subscript
		public Assignment getSubscriptAssignment_1_1() { return cSubscriptAssignment_1_1; }

		//subscript
		public RuleCall getSubscriptSubscriptParserRuleCall_1_1_0() { return cSubscriptSubscriptParserRuleCall_1_1_0; }

		//optionalComma?=','?
		public Assignment getOptionalCommaAssignment_2() { return cOptionalCommaAssignment_2; }

		//','
		public Keyword getOptionalCommaCommaKeyword_2_0() { return cOptionalCommaCommaKeyword_2_0; }
	}

	public class SubscriptElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.controlflow.SpellGrammar.subscript");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSubscriptAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cFullStopKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0_2 = (Keyword)cGroup_1_0.eContents().get(2);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Assignment cSubscript1Assignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cSubscript1TestParserRuleCall_1_1_0_0 = (RuleCall)cSubscript1Assignment_1_1_0.eContents().get(0);
		private final Group cGroup_1_1_1 = (Group)cGroup_1_1.eContents().get(1);
		private final Assignment cSymbolAssignment_1_1_1_0 = (Assignment)cGroup_1_1_1.eContents().get(0);
		private final Keyword cSymbolColonKeyword_1_1_1_0_0 = (Keyword)cSymbolAssignment_1_1_1_0.eContents().get(0);
		private final Assignment cSubscript2Assignment_1_1_1_1 = (Assignment)cGroup_1_1_1.eContents().get(1);
		private final RuleCall cSubscript2TestParserRuleCall_1_1_1_1_0 = (RuleCall)cSubscript2Assignment_1_1_1_1.eContents().get(0);
		private final Assignment cSliceopAssignment_1_1_1_2 = (Assignment)cGroup_1_1_1.eContents().get(2);
		private final RuleCall cSliceopSliceopParserRuleCall_1_1_1_2_0 = (RuleCall)cSliceopAssignment_1_1_1_2.eContents().get(0);
		
		//subscript:
		//	{subscript} ('.' '.' '.' | subscript1=test? (symbol=':' subscript2=test? sliceop=sliceop?)?);
		@Override public ParserRule getRule() { return rule; }

		//{subscript} ('.' '.' '.' | subscript1=test? (symbol=':' subscript2=test? sliceop=sliceop?)?)
		public Group getGroup() { return cGroup; }

		//{subscript}
		public Action getSubscriptAction_0() { return cSubscriptAction_0; }

		//('.' '.' '.' | subscript1=test? (symbol=':' subscript2=test? sliceop=sliceop?)?)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//'.' '.' '.'
		public Group getGroup_1_0() { return cGroup_1_0; }

		//'.'
		public Keyword getFullStopKeyword_1_0_0() { return cFullStopKeyword_1_0_0; }

		//'.'
		public Keyword getFullStopKeyword_1_0_1() { return cFullStopKeyword_1_0_1; }

		//'.'
		public Keyword getFullStopKeyword_1_0_2() { return cFullStopKeyword_1_0_2; }

		//subscript1=test? (symbol=':' subscript2=test? sliceop=sliceop?)?
		public Group getGroup_1_1() { return cGroup_1_1; }

		//subscript1=test?
		public Assignment getSubscript1Assignment_1_1_0() { return cSubscript1Assignment_1_1_0; }

		//test
		public RuleCall getSubscript1TestParserRuleCall_1_1_0_0() { return cSubscript1TestParserRuleCall_1_1_0_0; }

		//(symbol=':' subscript2=test? sliceop=sliceop?)?
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }

		//symbol=':'
		public Assignment getSymbolAssignment_1_1_1_0() { return cSymbolAssignment_1_1_1_0; }

		//':'
		public Keyword getSymbolColonKeyword_1_1_1_0_0() { return cSymbolColonKeyword_1_1_1_0_0; }

		//subscript2=test?
		public Assignment getSubscript2Assignment_1_1_1_1() { return cSubscript2Assignment_1_1_1_1; }

		//test
		public RuleCall getSubscript2TestParserRuleCall_1_1_1_1_0() { return cSubscript2TestParserRuleCall_1_1_1_1_0; }

		//sliceop=sliceop?
		public Assignment getSliceopAssignment_1_1_1_2() { return cSliceopAssignment_1_1_1_2; }

		//sliceop
		public RuleCall getSliceopSliceopParserRuleCall_1_1_1_2_0() { return cSliceopSliceopParserRuleCall_1_1_1_2_0; }
	}

	public class SliceopElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.controlflow.SpellGrammar.sliceop");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSliceopAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTestAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTestTestParserRuleCall_2_0 = (RuleCall)cTestAssignment_2.eContents().get(0);
		
		//sliceop:
		//	{sliceop} ':' test=test?;
		@Override public ParserRule getRule() { return rule; }

		//{sliceop} ':' test=test?
		public Group getGroup() { return cGroup; }

		//{sliceop}
		public Action getSliceopAction_0() { return cSliceopAction_0; }

		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//test=test?
		public Assignment getTestAssignment_2() { return cTestAssignment_2; }

		//test
		public RuleCall getTestTestParserRuleCall_2_0() { return cTestTestParserRuleCall_2_0; }
	}

	public class ExprlistElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.controlflow.SpellGrammar.exprlist");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExprsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExprsExprParserRuleCall_0_0 = (RuleCall)cExprsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cExprsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExprsExprParserRuleCall_1_1_0 = (RuleCall)cExprsAssignment_1_1.eContents().get(0);
		private final Assignment cOptionalCommaAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cOptionalCommaCommaKeyword_2_0 = (Keyword)cOptionalCommaAssignment_2.eContents().get(0);
		
		//exprlist:
		//	exprs+=expr (',' exprs+=expr)* optionalComma?=','?;
		@Override public ParserRule getRule() { return rule; }

		//exprs+=expr (',' exprs+=expr)* optionalComma?=','?
		public Group getGroup() { return cGroup; }

		//exprs+=expr
		public Assignment getExprsAssignment_0() { return cExprsAssignment_0; }

		//expr
		public RuleCall getExprsExprParserRuleCall_0_0() { return cExprsExprParserRuleCall_0_0; }

		//(',' exprs+=expr)*
		public Group getGroup_1() { return cGroup_1; }

		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//exprs+=expr
		public Assignment getExprsAssignment_1_1() { return cExprsAssignment_1_1; }

		//expr
		public RuleCall getExprsExprParserRuleCall_1_1_0() { return cExprsExprParserRuleCall_1_1_0; }

		//optionalComma?=','?
		public Assignment getOptionalCommaAssignment_2() { return cOptionalCommaAssignment_2; }

		//','
		public Keyword getOptionalCommaCommaKeyword_2_0() { return cOptionalCommaCommaKeyword_2_0; }
	}

	public class TestlistElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.controlflow.SpellGrammar.testlist");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTestParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cTestlistTestsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cCommaKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cTestsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cTestsTestParserRuleCall_1_2_0 = (RuleCall)cTestsAssignment_1_2.eContents().get(0);
		private final Assignment cOptionalCommaAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cOptionalCommaCommaKeyword_2_0 = (Keyword)cOptionalCommaAssignment_2.eContents().get(0);
		
		//testlist:
		//	test ({testlist.tests+=current} ',' tests+=test)* optionalComma?=','?;
		@Override public ParserRule getRule() { return rule; }

		//test ({testlist.tests+=current} ',' tests+=test)* optionalComma?=','?
		public Group getGroup() { return cGroup; }

		//test
		public RuleCall getTestParserRuleCall_0() { return cTestParserRuleCall_0; }

		//({testlist.tests+=current} ',' tests+=test)*
		public Group getGroup_1() { return cGroup_1; }

		//{testlist.tests+=current}
		public Action getTestlistTestsAction_1_0() { return cTestlistTestsAction_1_0; }

		//','
		public Keyword getCommaKeyword_1_1() { return cCommaKeyword_1_1; }

		//tests+=test
		public Assignment getTestsAssignment_1_2() { return cTestsAssignment_1_2; }

		//test
		public RuleCall getTestsTestParserRuleCall_1_2_0() { return cTestsTestParserRuleCall_1_2_0; }

		//optionalComma?=','?
		public Assignment getOptionalCommaAssignment_2() { return cOptionalCommaAssignment_2; }

		//','
		public Keyword getOptionalCommaCommaKeyword_2_0() { return cOptionalCommaCommaKeyword_2_0; }
	}

	public class Dictorset_entryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.controlflow.SpellGrammar.dictorset_entry");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTest1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTest1TestParserRuleCall_0_0 = (RuleCall)cTest1Assignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTest2Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTest2TestParserRuleCall_2_0 = (RuleCall)cTest2Assignment_2.eContents().get(0);
		
		//dictorset_entry:
		//	test1=test ':' test2=test;
		@Override public ParserRule getRule() { return rule; }

		//test1=test ':' test2=test
		public Group getGroup() { return cGroup; }

		//test1=test
		public Assignment getTest1Assignment_0() { return cTest1Assignment_0; }

		//test
		public RuleCall getTest1TestParserRuleCall_0_0() { return cTest1TestParserRuleCall_0_0; }

		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//test2=test
		public Assignment getTest2Assignment_2() { return cTest2Assignment_2; }

		//test
		public RuleCall getTest2TestParserRuleCall_2_0() { return cTest2TestParserRuleCall_2_0; }
	}

	public class DictorsetmakerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.controlflow.SpellGrammar.dictorsetmaker");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cEntriesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cEntriesDictorset_entryParserRuleCall_0_0 = (RuleCall)cEntriesAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cComp_forAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cComp_forComp_forParserRuleCall_1_0_0 = (RuleCall)cComp_forAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Group cGroup_1_1_0 = (Group)cGroup_1_1.eContents().get(0);
		private final Keyword cCommaKeyword_1_1_0_0 = (Keyword)cGroup_1_1_0.eContents().get(0);
		private final Assignment cEntriesAssignment_1_1_0_1 = (Assignment)cGroup_1_1_0.eContents().get(1);
		private final RuleCall cEntriesDictorset_entryParserRuleCall_1_1_0_1_0 = (RuleCall)cEntriesAssignment_1_1_0_1.eContents().get(0);
		private final Assignment cOptionalCommaAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final Keyword cOptionalCommaCommaKeyword_1_1_1_0 = (Keyword)cOptionalCommaAssignment_1_1_1.eContents().get(0);
		
		//dictorsetmaker:
		//	entries+=dictorset_entry (comp_for=comp_for | (',' entries+=dictorset_entry)* optionalComma?=','?);
		@Override public ParserRule getRule() { return rule; }

		//entries+=dictorset_entry (comp_for=comp_for | (',' entries+=dictorset_entry)* optionalComma?=','?)
		public Group getGroup() { return cGroup; }

		//entries+=dictorset_entry
		public Assignment getEntriesAssignment_0() { return cEntriesAssignment_0; }

		//dictorset_entry
		public RuleCall getEntriesDictorset_entryParserRuleCall_0_0() { return cEntriesDictorset_entryParserRuleCall_0_0; }

		//(comp_for=comp_for | (',' entries+=dictorset_entry)* optionalComma?=','?)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//comp_for=comp_for
		public Assignment getComp_forAssignment_1_0() { return cComp_forAssignment_1_0; }

		//comp_for
		public RuleCall getComp_forComp_forParserRuleCall_1_0_0() { return cComp_forComp_forParserRuleCall_1_0_0; }

		//(',' entries+=dictorset_entry)* optionalComma?=','?
		public Group getGroup_1_1() { return cGroup_1_1; }

		//(',' entries+=dictorset_entry)*
		public Group getGroup_1_1_0() { return cGroup_1_1_0; }

		//','
		public Keyword getCommaKeyword_1_1_0_0() { return cCommaKeyword_1_1_0_0; }

		//entries+=dictorset_entry
		public Assignment getEntriesAssignment_1_1_0_1() { return cEntriesAssignment_1_1_0_1; }

		//dictorset_entry
		public RuleCall getEntriesDictorset_entryParserRuleCall_1_1_0_1_0() { return cEntriesDictorset_entryParserRuleCall_1_1_0_1_0; }

		//optionalComma?=','?
		public Assignment getOptionalCommaAssignment_1_1_1() { return cOptionalCommaAssignment_1_1_1; }

		//','
		public Keyword getOptionalCommaCommaKeyword_1_1_1_0() { return cOptionalCommaCommaKeyword_1_1_1_0; }
	}

	public class ClassdefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.controlflow.SpellGrammar.classdef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cClassKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameNAMEParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cRoundBracketsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Keyword cRoundBracketsLeftParenthesisKeyword_2_0_0 = (Keyword)cRoundBracketsAssignment_2_0.eContents().get(0);
		private final Assignment cTestlistAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cTestlistTestlistParserRuleCall_2_1_0 = (RuleCall)cTestlistAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cSuiteAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cSuiteSuiteParserRuleCall_4_0 = (RuleCall)cSuiteAssignment_4.eContents().get(0);
		private final RuleCall cENDCLASSTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//classdef:
		//	'class' name=NAME (roundBrackets?='(' testlist=testlist ')')? ':' suite=suite ENDCLASS;
		@Override public ParserRule getRule() { return rule; }

		//'class' name=NAME (roundBrackets?='(' testlist=testlist ')')? ':' suite=suite ENDCLASS
		public Group getGroup() { return cGroup; }

		//'class'
		public Keyword getClassKeyword_0() { return cClassKeyword_0; }

		//name=NAME
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//NAME
		public RuleCall getNameNAMEParserRuleCall_1_0() { return cNameNAMEParserRuleCall_1_0; }

		//(roundBrackets?='(' testlist=testlist ')')?
		public Group getGroup_2() { return cGroup_2; }

		//roundBrackets?='('
		public Assignment getRoundBracketsAssignment_2_0() { return cRoundBracketsAssignment_2_0; }

		//'('
		public Keyword getRoundBracketsLeftParenthesisKeyword_2_0_0() { return cRoundBracketsLeftParenthesisKeyword_2_0_0; }

		//testlist=testlist
		public Assignment getTestlistAssignment_2_1() { return cTestlistAssignment_2_1; }

		//testlist
		public RuleCall getTestlistTestlistParserRuleCall_2_1_0() { return cTestlistTestlistParserRuleCall_2_1_0; }

		//')'
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }

		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }

		//suite=suite
		public Assignment getSuiteAssignment_4() { return cSuiteAssignment_4; }

		//suite
		public RuleCall getSuiteSuiteParserRuleCall_4_0() { return cSuiteSuiteParserRuleCall_4_0; }

		//ENDCLASS
		public RuleCall getENDCLASSTerminalRuleCall_5() { return cENDCLASSTerminalRuleCall_5; }
	}

	public class ArglistElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.controlflow.SpellGrammar.arglist");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cArgumentsAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cArgumentsArgumentParserRuleCall_0_0_0 = (RuleCall)cArgumentsAssignment_0_0.eContents().get(0);
		private final Keyword cCommaKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final RuleCall cArgumentsArgumentParserRuleCall_1_0_0_0 = (RuleCall)cArgumentsAssignment_1_0_0.eContents().get(0);
		private final Assignment cOptionalCommaAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final Keyword cOptionalCommaCommaKeyword_1_0_1_0 = (Keyword)cOptionalCommaAssignment_1_0_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cAsteriskKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cDot1_testAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cDot1_testTestParserRuleCall_1_1_1_0 = (RuleCall)cDot1_testAssignment_1_1_1.eContents().get(0);
		private final Group cGroup_1_1_2 = (Group)cGroup_1_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_1_2_0 = (Keyword)cGroup_1_1_2.eContents().get(0);
		private final Assignment cDot1_argumentsAssignment_1_1_2_1 = (Assignment)cGroup_1_1_2.eContents().get(1);
		private final RuleCall cDot1_argumentsArgumentParserRuleCall_1_1_2_1_0 = (RuleCall)cDot1_argumentsAssignment_1_1_2_1.eContents().get(0);
		private final Group cGroup_1_1_3 = (Group)cGroup_1_1.eContents().get(3);
		private final Keyword cCommaKeyword_1_1_3_0 = (Keyword)cGroup_1_1_3.eContents().get(0);
		private final Keyword cAsteriskAsteriskKeyword_1_1_3_1 = (Keyword)cGroup_1_1_3.eContents().get(1);
		private final Assignment cDot2_testAssignment_1_1_3_2 = (Assignment)cGroup_1_1_3.eContents().get(2);
		private final RuleCall cDot2_testTestParserRuleCall_1_1_3_2_0 = (RuleCall)cDot2_testAssignment_1_1_3_2.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Keyword cAsteriskAsteriskKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cDot2_testAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cDot2_testTestParserRuleCall_1_2_1_0 = (RuleCall)cDot2_testAssignment_1_2_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//arglist:
		//	(arguments+=argument ',')* (arguments+=argument optionalComma?=','? | '*' dot1_test=test (','
		//	dot1_arguments+=argument)* (',' '**' dot2_test=test)? | '**' dot2_test=test) ','?;
		@Override public ParserRule getRule() { return rule; }

		//(arguments+=argument ',')* (arguments+=argument optionalComma?=','? | '*' dot1_test=test (',' dot1_arguments+=argument)*
		//(',' '**' dot2_test=test)? | '**' dot2_test=test) ','?
		public Group getGroup() { return cGroup; }

		//(arguments+=argument ',')*
		public Group getGroup_0() { return cGroup_0; }

		//arguments+=argument
		public Assignment getArgumentsAssignment_0_0() { return cArgumentsAssignment_0_0; }

		//argument
		public RuleCall getArgumentsArgumentParserRuleCall_0_0_0() { return cArgumentsArgumentParserRuleCall_0_0_0; }

		//','
		public Keyword getCommaKeyword_0_1() { return cCommaKeyword_0_1; }

		//(arguments+=argument optionalComma?=','? | '*' dot1_test=test (',' dot1_arguments+=argument)* (',' '**' dot2_test=test)?
		//| '**' dot2_test=test)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//arguments+=argument optionalComma?=','?
		public Group getGroup_1_0() { return cGroup_1_0; }

		//arguments+=argument
		public Assignment getArgumentsAssignment_1_0_0() { return cArgumentsAssignment_1_0_0; }

		//argument
		public RuleCall getArgumentsArgumentParserRuleCall_1_0_0_0() { return cArgumentsArgumentParserRuleCall_1_0_0_0; }

		//optionalComma?=','?
		public Assignment getOptionalCommaAssignment_1_0_1() { return cOptionalCommaAssignment_1_0_1; }

		//','
		public Keyword getOptionalCommaCommaKeyword_1_0_1_0() { return cOptionalCommaCommaKeyword_1_0_1_0; }

		//'*' dot1_test=test (',' dot1_arguments+=argument)* (',' '**' dot2_test=test)?
		public Group getGroup_1_1() { return cGroup_1_1; }

		//'*'
		public Keyword getAsteriskKeyword_1_1_0() { return cAsteriskKeyword_1_1_0; }

		//dot1_test=test
		public Assignment getDot1_testAssignment_1_1_1() { return cDot1_testAssignment_1_1_1; }

		//test
		public RuleCall getDot1_testTestParserRuleCall_1_1_1_0() { return cDot1_testTestParserRuleCall_1_1_1_0; }

		//(',' dot1_arguments+=argument)*
		public Group getGroup_1_1_2() { return cGroup_1_1_2; }

		//','
		public Keyword getCommaKeyword_1_1_2_0() { return cCommaKeyword_1_1_2_0; }

		//dot1_arguments+=argument
		public Assignment getDot1_argumentsAssignment_1_1_2_1() { return cDot1_argumentsAssignment_1_1_2_1; }

		//argument
		public RuleCall getDot1_argumentsArgumentParserRuleCall_1_1_2_1_0() { return cDot1_argumentsArgumentParserRuleCall_1_1_2_1_0; }

		//(',' '**' dot2_test=test)?
		public Group getGroup_1_1_3() { return cGroup_1_1_3; }

		//','
		public Keyword getCommaKeyword_1_1_3_0() { return cCommaKeyword_1_1_3_0; }

		//'**'
		public Keyword getAsteriskAsteriskKeyword_1_1_3_1() { return cAsteriskAsteriskKeyword_1_1_3_1; }

		//dot2_test=test
		public Assignment getDot2_testAssignment_1_1_3_2() { return cDot2_testAssignment_1_1_3_2; }

		//test
		public RuleCall getDot2_testTestParserRuleCall_1_1_3_2_0() { return cDot2_testTestParserRuleCall_1_1_3_2_0; }

		//'**' dot2_test=test
		public Group getGroup_1_2() { return cGroup_1_2; }

		//'**'
		public Keyword getAsteriskAsteriskKeyword_1_2_0() { return cAsteriskAsteriskKeyword_1_2_0; }

		//dot2_test=test
		public Assignment getDot2_testAssignment_1_2_1() { return cDot2_testAssignment_1_2_1; }

		//test
		public RuleCall getDot2_testTestParserRuleCall_1_2_1_0() { return cDot2_testTestParserRuleCall_1_2_1_0; }

		//','?
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }
	}

	public class ArgumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.controlflow.SpellGrammar.argument");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTestParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Action cArgumentTestAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Assignment cComp_forAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cComp_forComp_forParserRuleCall_1_0_1_0 = (RuleCall)cComp_forAssignment_1_0_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Action cArgumentTestAction_1_1_0 = (Action)cGroup_1_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Assignment cTest2Assignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cTest2TestParserRuleCall_1_1_2_0 = (RuleCall)cTest2Assignment_1_1_2.eContents().get(0);
		
		//// The reason that keywords are test nodes instead of NAME is that using NAME
		//// results in an ambiguity. ast.c makes sure it's a NAME.
		//argument:
		//	test ({argument.test=current} comp_for=comp_for | {argument.test=current} '=' test2=test)?;
		@Override public ParserRule getRule() { return rule; }

		//test ({argument.test=current} comp_for=comp_for | {argument.test=current} '=' test2=test)?
		public Group getGroup() { return cGroup; }

		//test
		public RuleCall getTestParserRuleCall_0() { return cTestParserRuleCall_0; }

		//({argument.test=current} comp_for=comp_for | {argument.test=current} '=' test2=test)?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//{argument.test=current} comp_for=comp_for
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{argument.test=current}
		public Action getArgumentTestAction_1_0_0() { return cArgumentTestAction_1_0_0; }

		//comp_for=comp_for
		public Assignment getComp_forAssignment_1_0_1() { return cComp_forAssignment_1_0_1; }

		//comp_for
		public RuleCall getComp_forComp_forParserRuleCall_1_0_1_0() { return cComp_forComp_forParserRuleCall_1_0_1_0; }

		//{argument.test=current} '=' test2=test
		public Group getGroup_1_1() { return cGroup_1_1; }

		//{argument.test=current}
		public Action getArgumentTestAction_1_1_0() { return cArgumentTestAction_1_1_0; }

		//'='
		public Keyword getEqualsSignKeyword_1_1_1() { return cEqualsSignKeyword_1_1_1; }

		//test2=test
		public Assignment getTest2Assignment_1_1_2() { return cTest2Assignment_1_1_2; }

		//test
		public RuleCall getTest2TestParserRuleCall_1_1_2_0() { return cTest2TestParserRuleCall_1_1_2_0; }
	}

	public class List_iterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.controlflow.SpellGrammar.list_iter");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cList_forParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cList_ifParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//list_iter:
		//	list_for | list_if;
		@Override public ParserRule getRule() { return rule; }

		//list_for | list_if
		public Alternatives getAlternatives() { return cAlternatives; }

		//list_for
		public RuleCall getList_forParserRuleCall_0() { return cList_forParserRuleCall_0; }

		//list_if
		public RuleCall getList_ifParserRuleCall_1() { return cList_ifParserRuleCall_1; }
	}

	public class List_forElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.controlflow.SpellGrammar.list_for");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExprlistAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprlistExprlistParserRuleCall_1_0 = (RuleCall)cExprlistAssignment_1.eContents().get(0);
		private final Keyword cInKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTestlist_safeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTestlist_safeTestlist_safeParserRuleCall_3_0 = (RuleCall)cTestlist_safeAssignment_3.eContents().get(0);
		private final Assignment cList_iterAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cList_iterList_iterParserRuleCall_4_0 = (RuleCall)cList_iterAssignment_4.eContents().get(0);
		
		//list_for:
		//	'for' exprlist=exprlist 'in' testlist_safe=testlist_safe list_iter=list_iter?;
		@Override public ParserRule getRule() { return rule; }

		//'for' exprlist=exprlist 'in' testlist_safe=testlist_safe list_iter=list_iter?
		public Group getGroup() { return cGroup; }

		//'for'
		public Keyword getForKeyword_0() { return cForKeyword_0; }

		//exprlist=exprlist
		public Assignment getExprlistAssignment_1() { return cExprlistAssignment_1; }

		//exprlist
		public RuleCall getExprlistExprlistParserRuleCall_1_0() { return cExprlistExprlistParserRuleCall_1_0; }

		//'in'
		public Keyword getInKeyword_2() { return cInKeyword_2; }

		//testlist_safe=testlist_safe
		public Assignment getTestlist_safeAssignment_3() { return cTestlist_safeAssignment_3; }

		//testlist_safe
		public RuleCall getTestlist_safeTestlist_safeParserRuleCall_3_0() { return cTestlist_safeTestlist_safeParserRuleCall_3_0; }

		//list_iter=list_iter?
		public Assignment getList_iterAssignment_4() { return cList_iterAssignment_4; }

		//list_iter
		public RuleCall getList_iterList_iterParserRuleCall_4_0() { return cList_iterList_iterParserRuleCall_4_0; }
	}

	public class List_ifElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.controlflow.SpellGrammar.list_if");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOld_testAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOld_testTestParserRuleCall_1_0 = (RuleCall)cOld_testAssignment_1.eContents().get(0);
		private final Assignment cList_iterAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cList_iterList_iterParserRuleCall_2_0 = (RuleCall)cList_iterAssignment_2.eContents().get(0);
		
		//list_if:
		//	'if' old_test=test list_iter=list_iter?;
		@Override public ParserRule getRule() { return rule; }

		//'if' old_test=test list_iter=list_iter?
		public Group getGroup() { return cGroup; }

		//'if'
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }

		//old_test=test
		public Assignment getOld_testAssignment_1() { return cOld_testAssignment_1; }

		//test
		public RuleCall getOld_testTestParserRuleCall_1_0() { return cOld_testTestParserRuleCall_1_0; }

		//list_iter=list_iter?
		public Assignment getList_iterAssignment_2() { return cList_iterAssignment_2; }

		//list_iter
		public RuleCall getList_iterList_iterParserRuleCall_2_0() { return cList_iterList_iterParserRuleCall_2_0; }
	}

	public class Comp_iterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.controlflow.SpellGrammar.comp_iter");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cComp_forParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cComp_ifParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//comp_iter:
		//	comp_for | comp_if;
		@Override public ParserRule getRule() { return rule; }

		//comp_for | comp_if
		public Alternatives getAlternatives() { return cAlternatives; }

		//comp_for
		public RuleCall getComp_forParserRuleCall_0() { return cComp_forParserRuleCall_0; }

		//comp_if
		public RuleCall getComp_ifParserRuleCall_1() { return cComp_ifParserRuleCall_1; }
	}

	public class Comp_forElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.controlflow.SpellGrammar.comp_for");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExprlistAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprlistExprlistParserRuleCall_1_0 = (RuleCall)cExprlistAssignment_1.eContents().get(0);
		private final Keyword cInKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cOr_testAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOr_testOr_testParserRuleCall_3_0 = (RuleCall)cOr_testAssignment_3.eContents().get(0);
		private final Assignment cComp_iterAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cComp_iterComp_iterParserRuleCall_4_0 = (RuleCall)cComp_iterAssignment_4.eContents().get(0);
		
		//comp_for:
		//	'for' exprlist=exprlist 'in' or_test=or_test comp_iter=comp_iter?;
		@Override public ParserRule getRule() { return rule; }

		//'for' exprlist=exprlist 'in' or_test=or_test comp_iter=comp_iter?
		public Group getGroup() { return cGroup; }

		//'for'
		public Keyword getForKeyword_0() { return cForKeyword_0; }

		//exprlist=exprlist
		public Assignment getExprlistAssignment_1() { return cExprlistAssignment_1; }

		//exprlist
		public RuleCall getExprlistExprlistParserRuleCall_1_0() { return cExprlistExprlistParserRuleCall_1_0; }

		//'in'
		public Keyword getInKeyword_2() { return cInKeyword_2; }

		//or_test=or_test
		public Assignment getOr_testAssignment_3() { return cOr_testAssignment_3; }

		//or_test
		public RuleCall getOr_testOr_testParserRuleCall_3_0() { return cOr_testOr_testParserRuleCall_3_0; }

		//comp_iter=comp_iter?
		public Assignment getComp_iterAssignment_4() { return cComp_iterAssignment_4; }

		//comp_iter
		public RuleCall getComp_iterComp_iterParserRuleCall_4_0() { return cComp_iterComp_iterParserRuleCall_4_0; }
	}

	public class Comp_ifElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.controlflow.SpellGrammar.comp_if");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTestAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTestTestParserRuleCall_1_0 = (RuleCall)cTestAssignment_1.eContents().get(0);
		private final Assignment cComp_iterAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cComp_iterComp_iterParserRuleCall_2_0 = (RuleCall)cComp_iterAssignment_2.eContents().get(0);
		
		//comp_if:
		//	'if' test=test comp_iter=comp_iter?;
		@Override public ParserRule getRule() { return rule; }

		//'if' test=test comp_iter=comp_iter?
		public Group getGroup() { return cGroup; }

		//'if'
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }

		//test=test
		public Assignment getTestAssignment_1() { return cTestAssignment_1; }

		//test
		public RuleCall getTestTestParserRuleCall_1_0() { return cTestTestParserRuleCall_1_0; }

		//comp_iter=comp_iter?
		public Assignment getComp_iterAssignment_2() { return cComp_iterAssignment_2; }

		//comp_iter
		public RuleCall getComp_iterComp_iterParserRuleCall_2_0() { return cComp_iterComp_iterParserRuleCall_2_0; }
	}

	public class Testlist1Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.controlflow.SpellGrammar.testlist1");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTestlist1Action_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTestsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTestsTestParserRuleCall_1_0 = (RuleCall)cTestsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cTestsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cTestsTestParserRuleCall_2_1_0 = (RuleCall)cTestsAssignment_2_1.eContents().get(0);
		
		//testlist1:
		//	{testlist1} tests+=test (',' tests+=test)*;
		@Override public ParserRule getRule() { return rule; }

		//{testlist1} tests+=test (',' tests+=test)*
		public Group getGroup() { return cGroup; }

		//{testlist1}
		public Action getTestlist1Action_0() { return cTestlist1Action_0; }

		//tests+=test
		public Assignment getTestsAssignment_1() { return cTestsAssignment_1; }

		//test
		public RuleCall getTestsTestParserRuleCall_1_0() { return cTestsTestParserRuleCall_1_0; }

		//(',' tests+=test)*
		public Group getGroup_2() { return cGroup_2; }

		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//tests+=test
		public Assignment getTestsAssignment_2_1() { return cTestsAssignment_2_1; }

		//test
		public RuleCall getTestsTestParserRuleCall_2_1_0() { return cTestsTestParserRuleCall_2_1_0; }
	}

	public class Yield_exprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.controlflow.SpellGrammar.yield_expr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cYield_exprAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cYieldKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTestlistAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTestlistTestlistParserRuleCall_2_0 = (RuleCall)cTestlistAssignment_2.eContents().get(0);
		
		//yield_expr:
		//	{yield_expr} 'yield' testlist=testlist?;
		@Override public ParserRule getRule() { return rule; }

		//{yield_expr} 'yield' testlist=testlist?
		public Group getGroup() { return cGroup; }

		//{yield_expr}
		public Action getYield_exprAction_0() { return cYield_exprAction_0; }

		//'yield'
		public Keyword getYieldKeyword_1() { return cYieldKeyword_1; }

		//testlist=testlist?
		public Assignment getTestlistAssignment_2() { return cTestlistAssignment_2; }

		//testlist
		public RuleCall getTestlistTestlistParserRuleCall_2_0() { return cTestlistTestlistParserRuleCall_2_0; }
	}

	public class Python_StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.controlflow.SpellGrammar.Python_Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cStepKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cShowTMKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cVerifyKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cSendKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cGetTMKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cGotoKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cSetLimitsKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cGetLimitsKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cBuildTCKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cDisplayStepKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cWaitForKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final RuleCall cNAME_TERMINALTerminalRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		
		//Python_Statement:
		//	'Step' | 'ShowTM' | 'Verify' | 'Send' | 'GetTM' | 'Goto' | 'SetLimits' | 'GetLimits' | 'BuildTC' | 'DisplayStep' |
		//	'WaitFor' | NAME_TERMINAL;
		@Override public ParserRule getRule() { return rule; }

		//'Step' | 'ShowTM' | 'Verify' | 'Send' | 'GetTM' | 'Goto' | 'SetLimits' | 'GetLimits' | 'BuildTC' | 'DisplayStep' |
		//'WaitFor' | NAME_TERMINAL
		public Alternatives getAlternatives() { return cAlternatives; }

		//'Step'
		public Keyword getStepKeyword_0() { return cStepKeyword_0; }

		//'ShowTM'
		public Keyword getShowTMKeyword_1() { return cShowTMKeyword_1; }

		//'Verify'
		public Keyword getVerifyKeyword_2() { return cVerifyKeyword_2; }

		//'Send'
		public Keyword getSendKeyword_3() { return cSendKeyword_3; }

		//'GetTM'
		public Keyword getGetTMKeyword_4() { return cGetTMKeyword_4; }

		//'Goto'
		public Keyword getGotoKeyword_5() { return cGotoKeyword_5; }

		//'SetLimits'
		public Keyword getSetLimitsKeyword_6() { return cSetLimitsKeyword_6; }

		//'GetLimits'
		public Keyword getGetLimitsKeyword_7() { return cGetLimitsKeyword_7; }

		//'BuildTC'
		public Keyword getBuildTCKeyword_8() { return cBuildTCKeyword_8; }

		//'DisplayStep'
		public Keyword getDisplayStepKeyword_9() { return cDisplayStepKeyword_9; }

		//'WaitFor'
		public Keyword getWaitForKeyword_10() { return cWaitForKeyword_10; }

		//NAME_TERMINAL
		public RuleCall getNAME_TERMINALTerminalRuleCall_11() { return cNAME_TERMINALTerminalRuleCall_11; }
	}

	public class NumberWithPlusOrMinusElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.controlflow.SpellGrammar.NumberWithPlusOrMinus");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cPlusSignKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cNUMBERTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//NumberWithPlusOrMinus:
		//	('+' | '-')? '.'? NUMBER;
		@Override public ParserRule getRule() { return rule; }

		//('+' | '-')? '.'? NUMBER
		public Group getGroup() { return cGroup; }

		//('+' | '-')?
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//'+'
		public Keyword getPlusSignKeyword_0_0() { return cPlusSignKeyword_0_0; }

		//'-'
		public Keyword getHyphenMinusKeyword_0_1() { return cHyphenMinusKeyword_0_1; }

		//'.'?
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }

		//NUMBER
		public RuleCall getNUMBERTerminalRuleCall_2() { return cNUMBERTerminalRuleCall_2; }
	}

	public class NAMEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.controlflow.SpellGrammar.NAME");
		private final RuleCall cPython_StatementParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//NAME:
		//	Python_Statement;
		@Override public ParserRule getRule() { return rule; }

		//Python_Statement
		public RuleCall getPython_StatementParserRuleCall() { return cPython_StatementParserRuleCall; }
	}

	public class NLElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.controlflow.SpellGrammar.NL");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReverseSolidusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//NL:
		//	'\\' WS;
		@Override public ParserRule getRule() { return rule; }

		//'\\' WS
		public Group getGroup() { return cGroup; }

		//'\\'
		public Keyword getReverseSolidusKeyword_0() { return cReverseSolidusKeyword_0; }

		//WS
		public RuleCall getWSTerminalRuleCall_1() { return cWSTerminalRuleCall_1; }
	}
	
	
	private final File_inputElements pFile_input;
	private final Python_inputElements pPython_input;
	private final Single_inputElements pSingle_input;
	private final Eval_inputElements pEval_input;
	private final DecoratorElements pDecorator;
	private final DecoratorsElements pDecorators;
	private final DecoratedElements pDecorated;
	private final FuncdefElements pFuncdef;
	private final ParametersElements pParameters;
	private final Varargslist_elementElements pVarargslist_element;
	private final VarargslistElements pVarargslist;
	private final FpdefElements pFpdef;
	private final FplistElements pFplist;
	private final StmtElements pStmt;
	private final Simple_stmtElements pSimple_stmt;
	private final Small_stmtElements pSmall_stmt;
	private final Expr_stmtElements pExpr_stmt;
	private final Yield_or_testlistElements pYield_or_testlist;
	private final AugassignElements pAugassign;
	private final Del_stmtElements pDel_stmt;
	private final Pass_stmtElements pPass_stmt;
	private final Flow_stmtElements pFlow_stmt;
	private final Break_stmtElements pBreak_stmt;
	private final Continue_stmtElements pContinue_stmt;
	private final Return_stmtElements pReturn_stmt;
	private final Yield_stmtElements pYield_stmt;
	private final Raise_stmtElements pRaise_stmt;
	private final Import_stmtElements pImport_stmt;
	private final Import_nameElements pImport_name;
	private final Import_fromElements pImport_from;
	private final Import_as_nameElements pImport_as_name;
	private final Dotted_as_nameElements pDotted_as_name;
	private final Import_as_namesElements pImport_as_names;
	private final Dotted_as_namesElements pDotted_as_names;
	private final Dotted_nameElements pDotted_name;
	private final Global_stmtElements pGlobal_stmt;
	private final Exec_stmtElements pExec_stmt;
	private final Assert_stmtElements pAssert_stmt;
	private final Compound_stmtElements pCompound_stmt;
	private final Else_if_stmtElements pElse_if_stmt;
	private final If_stmtElements pIf_stmt;
	private final While_stmtElements pWhile_stmt;
	private final For_stmtElements pFor_stmt;
	private final Try_stmtElements pTry_stmt;
	private final With_stmtElements pWith_stmt;
	private final With_itemElements pWith_item;
	private final Except_clauseElements pExcept_clause;
	private final SuiteElements pSuite;
	private final Testlist_safeElements pTestlist_safe;
	private final TestElements pTest;
	private final Or_testElements pOr_test;
	private final And_testElements pAnd_test;
	private final Not_testElements pNot_test;
	private final ComparisonElements pComparison;
	private final Comp_opElements pComp_op;
	private final ExprElements pExpr;
	private final Xor_exprElements pXor_expr;
	private final And_exprElements pAnd_expr;
	private final Shift_exprElements pShift_expr;
	private final Arith_exprElements pArith_expr;
	private final TermElements pTerm;
	private final FactorElements pFactor;
	private final PowerElements pPower;
	private final Yield_or_testlist_compElements pYield_or_testlist_comp;
	private final AtomElements pAtom;
	private final ListmakerElements pListmaker;
	private final Testlist_compElements pTestlist_comp;
	private final LambdefElements pLambdef;
	private final TrailerElements pTrailer;
	private final SubscriptlistElements pSubscriptlist;
	private final SubscriptElements pSubscript;
	private final SliceopElements pSliceop;
	private final ExprlistElements pExprlist;
	private final TestlistElements pTestlist;
	private final Dictorset_entryElements pDictorset_entry;
	private final DictorsetmakerElements pDictorsetmaker;
	private final ClassdefElements pClassdef;
	private final ArglistElements pArglist;
	private final ArgumentElements pArgument;
	private final List_iterElements pList_iter;
	private final List_forElements pList_for;
	private final List_ifElements pList_if;
	private final Comp_iterElements pComp_iter;
	private final Comp_forElements pComp_for;
	private final Comp_ifElements pComp_if;
	private final Testlist1Elements pTestlist1;
	private final Yield_exprElements pYield_expr;
	private final Python_StatementElements pPython_Statement;
	private final NumberWithPlusOrMinusElements pNumberWithPlusOrMinus;
	private final NAMEElements pNAME;
	private final NLElements pNL;
	private final TerminalRule tENDIF;
	private final TerminalRule tENDWHILE;
	private final TerminalRule tENDFOR;
	private final TerminalRule tENDWITH;
	private final TerminalRule tENDDEF;
	private final TerminalRule tENDTRY;
	private final TerminalRule tENDCLASS;
	private final TerminalRule tSTRING;
	private final TerminalRule tML_COMMENT;
	private final TerminalRule tSL_COMMENT;
	private final TerminalRule tWS;
	private final TerminalRule tNAME_TERMINAL;
	private final TerminalRule tNUMBER;
	private final TerminalRule tANY_OTHER;
	
	private final Grammar grammar;

	@Inject
	public SpellGrammarGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.pFile_input = new File_inputElements();
		this.pPython_input = new Python_inputElements();
		this.pSingle_input = new Single_inputElements();
		this.pEval_input = new Eval_inputElements();
		this.pDecorator = new DecoratorElements();
		this.pDecorators = new DecoratorsElements();
		this.pDecorated = new DecoratedElements();
		this.pFuncdef = new FuncdefElements();
		this.pParameters = new ParametersElements();
		this.pVarargslist_element = new Varargslist_elementElements();
		this.pVarargslist = new VarargslistElements();
		this.pFpdef = new FpdefElements();
		this.pFplist = new FplistElements();
		this.pStmt = new StmtElements();
		this.pSimple_stmt = new Simple_stmtElements();
		this.pSmall_stmt = new Small_stmtElements();
		this.pExpr_stmt = new Expr_stmtElements();
		this.pYield_or_testlist = new Yield_or_testlistElements();
		this.pAugassign = new AugassignElements();
		this.pDel_stmt = new Del_stmtElements();
		this.pPass_stmt = new Pass_stmtElements();
		this.pFlow_stmt = new Flow_stmtElements();
		this.pBreak_stmt = new Break_stmtElements();
		this.pContinue_stmt = new Continue_stmtElements();
		this.pReturn_stmt = new Return_stmtElements();
		this.pYield_stmt = new Yield_stmtElements();
		this.pRaise_stmt = new Raise_stmtElements();
		this.pImport_stmt = new Import_stmtElements();
		this.pImport_name = new Import_nameElements();
		this.pImport_from = new Import_fromElements();
		this.pImport_as_name = new Import_as_nameElements();
		this.pDotted_as_name = new Dotted_as_nameElements();
		this.pImport_as_names = new Import_as_namesElements();
		this.pDotted_as_names = new Dotted_as_namesElements();
		this.pDotted_name = new Dotted_nameElements();
		this.pGlobal_stmt = new Global_stmtElements();
		this.pExec_stmt = new Exec_stmtElements();
		this.pAssert_stmt = new Assert_stmtElements();
		this.pCompound_stmt = new Compound_stmtElements();
		this.pElse_if_stmt = new Else_if_stmtElements();
		this.pIf_stmt = new If_stmtElements();
		this.pWhile_stmt = new While_stmtElements();
		this.pFor_stmt = new For_stmtElements();
		this.pTry_stmt = new Try_stmtElements();
		this.pWith_stmt = new With_stmtElements();
		this.pWith_item = new With_itemElements();
		this.pExcept_clause = new Except_clauseElements();
		this.pSuite = new SuiteElements();
		this.pTestlist_safe = new Testlist_safeElements();
		this.pTest = new TestElements();
		this.pOr_test = new Or_testElements();
		this.pAnd_test = new And_testElements();
		this.pNot_test = new Not_testElements();
		this.pComparison = new ComparisonElements();
		this.pComp_op = new Comp_opElements();
		this.pExpr = new ExprElements();
		this.pXor_expr = new Xor_exprElements();
		this.pAnd_expr = new And_exprElements();
		this.pShift_expr = new Shift_exprElements();
		this.pArith_expr = new Arith_exprElements();
		this.pTerm = new TermElements();
		this.pFactor = new FactorElements();
		this.pPower = new PowerElements();
		this.pYield_or_testlist_comp = new Yield_or_testlist_compElements();
		this.pAtom = new AtomElements();
		this.pListmaker = new ListmakerElements();
		this.pTestlist_comp = new Testlist_compElements();
		this.pLambdef = new LambdefElements();
		this.pTrailer = new TrailerElements();
		this.pSubscriptlist = new SubscriptlistElements();
		this.pSubscript = new SubscriptElements();
		this.pSliceop = new SliceopElements();
		this.pExprlist = new ExprlistElements();
		this.pTestlist = new TestlistElements();
		this.pDictorset_entry = new Dictorset_entryElements();
		this.pDictorsetmaker = new DictorsetmakerElements();
		this.pClassdef = new ClassdefElements();
		this.pArglist = new ArglistElements();
		this.pArgument = new ArgumentElements();
		this.pList_iter = new List_iterElements();
		this.pList_for = new List_forElements();
		this.pList_if = new List_ifElements();
		this.pComp_iter = new Comp_iterElements();
		this.pComp_for = new Comp_forElements();
		this.pComp_if = new Comp_ifElements();
		this.pTestlist1 = new Testlist1Elements();
		this.pYield_expr = new Yield_exprElements();
		this.pPython_Statement = new Python_StatementElements();
		this.pNumberWithPlusOrMinus = new NumberWithPlusOrMinusElements();
		this.pNAME = new NAMEElements();
		this.pNL = new NLElements();
		this.tENDIF = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.controlflow.SpellGrammar.ENDIF");
		this.tENDWHILE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.controlflow.SpellGrammar.ENDWHILE");
		this.tENDFOR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.controlflow.SpellGrammar.ENDFOR");
		this.tENDWITH = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.controlflow.SpellGrammar.ENDWITH");
		this.tENDDEF = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.controlflow.SpellGrammar.ENDDEF");
		this.tENDTRY = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.controlflow.SpellGrammar.ENDTRY");
		this.tENDCLASS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.controlflow.SpellGrammar.ENDCLASS");
		this.tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.controlflow.SpellGrammar.STRING");
		this.tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.controlflow.SpellGrammar.ML_COMMENT");
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.controlflow.SpellGrammar.SL_COMMENT");
		this.tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.controlflow.SpellGrammar.WS");
		this.tNAME_TERMINAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.controlflow.SpellGrammar.NAME_TERMINAL");
		this.tNUMBER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.controlflow.SpellGrammar.NUMBER");
		this.tANY_OTHER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.controlflow.SpellGrammar.ANY_OTHER");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("lu.ses.engineering.spell.controlflow.SpellGrammar".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//// Grammar for Python
	//// Note:  Changing the grammar specified in this file will most likely
	////        require corresponding changes in the parser module
	////        (../Modules/parsermodule.c).  If you can't make the changes to
	////        that module yourself, please co-ordinate the required changes
	////        with someone who can; ask around on python-dev for help.  Fred
	////        Drake <fdrake@acm.org> will probably be listening there.
	//// NOTE WELL: You should also follow all the steps listed in PEP 306,
	//// "How to Change Python's Grammar"
	//// Start symbols for the grammar:
	////       single_input is a single interactive statement;
	////       file_input is a module or sequence of commands read from an input file;
	////       eval_input is the input for the eval() and input() functions.
	//// NB: compound_stmt in single_input is followed by extra NEWLINE!
	//file_input:
	//	{file_input} stmts+=stmt*;
	public File_inputElements getFile_inputAccess() {
		return pFile_input;
	}
	
	public ParserRule getFile_inputRule() {
		return getFile_inputAccess().getRule();
	}

	//python_input:
	//	single_input | file_input | eval_input;
	public Python_inputElements getPython_inputAccess() {
		return pPython_input;
	}
	
	public ParserRule getPython_inputRule() {
		return getPython_inputAccess().getRule();
	}

	//single_input:
	//	{single_input} (stmt=simple_stmt | stmt=compound_stmt);
	public Single_inputElements getSingle_inputAccess() {
		return pSingle_input;
	}
	
	public ParserRule getSingle_inputRule() {
		return getSingle_inputAccess().getRule();
	}

	//eval_input:
	//	{eval_input} testlist=testlist;
	public Eval_inputElements getEval_inputAccess() {
		return pEval_input;
	}
	
	public ParserRule getEval_inputRule() {
		return getEval_inputAccess().getRule();
	}

	//decorator:
	//	'@' dotted_name=dotted_name (roundBracket?='(' arglist=arglist? ')')?;
	public DecoratorElements getDecoratorAccess() {
		return pDecorator;
	}
	
	public ParserRule getDecoratorRule() {
		return getDecoratorAccess().getRule();
	}

	//decorators:
	//	decorators+=decorator+;
	public DecoratorsElements getDecoratorsAccess() {
		return pDecorators;
	}
	
	public ParserRule getDecoratorsRule() {
		return getDecoratorsAccess().getRule();
	}

	//decorated:
	//	decorators=decorators (def=classdef | def=funcdef);
	public DecoratedElements getDecoratedAccess() {
		return pDecorated;
	}
	
	public ParserRule getDecoratedRule() {
		return getDecoratedAccess().getRule();
	}

	//funcdef:
	//	'def' name=NAME parameters=parameters ':' suite=suite ENDDEF;
	public FuncdefElements getFuncdefAccess() {
		return pFuncdef;
	}
	
	public ParserRule getFuncdefRule() {
		return getFuncdefAccess().getRule();
	}

	//parameters:
	//	{parameters} '(' varargslist=varargslist? ','? ')';
	public ParametersElements getParametersAccess() {
		return pParameters;
	}
	
	public ParserRule getParametersRule() {
		return getParametersAccess().getRule();
	}

	//varargslist_element:
	//	fpdef=fpdef ('=' test=test)?;
	public Varargslist_elementElements getVarargslist_elementAccess() {
		return pVarargslist_element;
	}
	
	public ParserRule getVarargslist_elementRule() {
		return getVarargslist_elementAccess().getRule();
	}

	//varargslist:
	//	(varargs1+=varargslist_element ',')* ('*' dot1Name=NAME (',' '**' dot2Name=NAME)? | '**' dot2Name=NAME) |
	//	vararg2=varargslist_element (',' varargs3+=varargslist_element)* additionalComma?=','?;
	public VarargslistElements getVarargslistAccess() {
		return pVarargslist;
	}
	
	public ParserRule getVarargslistRule() {
		return getVarargslistAccess().getRule();
	}

	//fpdef:
	//	name=NAME | '(' fplist=fplist ')';
	public FpdefElements getFpdefAccess() {
		return pFpdef;
	}
	
	public ParserRule getFpdefRule() {
		return getFpdefAccess().getRule();
	}

	//fplist:
	//	def1=fpdef (',' definitions+=fpdef)* optionalSemicolon?=';'?;
	public FplistElements getFplistAccess() {
		return pFplist;
	}
	
	public ParserRule getFplistRule() {
		return getFplistAccess().getRule();
	}

	//stmt:
	//	simple_stmt | compound_stmt;
	public StmtElements getStmtAccess() {
		return pStmt;
	}
	
	public ParserRule getStmtRule() {
		return getStmtAccess().getRule();
	}

	//simple_stmt:
	//	small_stmt ({simple_stmt.stmt+=current} (';' stmt+=small_stmt)+ additionalComma?=','?)? ';'?;
	public Simple_stmtElements getSimple_stmtAccess() {
		return pSimple_stmt;
	}
	
	public ParserRule getSimple_stmtRule() {
		return getSimple_stmtAccess().getRule();
	}

	//small_stmt:
	//	expr_stmt | del_stmt | pass_stmt | flow_stmt | import_stmt | global_stmt | exec_stmt | assert_stmt;
	public Small_stmtElements getSmall_stmtAccess() {
		return pSmall_stmt;
	}
	
	public ParserRule getSmall_stmtRule() {
		return getSmall_stmtAccess().getRule();
	}

	//expr_stmt:
	//	testlist ({expr_stmt.left=current} symbol=augassign right=yield_or_testlist | {assignment_stmt.left=current}
	//	(symbol='=' assignments+=yield_or_testlist)+)?;
	public Expr_stmtElements getExpr_stmtAccess() {
		return pExpr_stmt;
	}
	
	public ParserRule getExpr_stmtRule() {
		return getExpr_stmtAccess().getRule();
	}

	//yield_or_testlist:
	//	yield_expr | testlist;
	public Yield_or_testlistElements getYield_or_testlistAccess() {
		return pYield_or_testlist;
	}
	
	public ParserRule getYield_or_testlistRule() {
		return getYield_or_testlistAccess().getRule();
	}

	//augassign:
	//	'+' '=' | '-=' | '*=' | '/=' | '%=' | '&=' | '|=' | '^=' |
	//	'<<=' | '>>=' | '**=' | '//=';
	public AugassignElements getAugassignAccess() {
		return pAugassign;
	}
	
	public ParserRule getAugassignRule() {
		return getAugassignAccess().getRule();
	}

	//// For normal assignments, additional restrictions enforced by the interpreter
	//del_stmt:
	//	'del' exprlist=exprlist;
	public Del_stmtElements getDel_stmtAccess() {
		return pDel_stmt;
	}
	
	public ParserRule getDel_stmtRule() {
		return getDel_stmtAccess().getRule();
	}

	//pass_stmt:
	//	{pass_stmt} 'pass';
	public Pass_stmtElements getPass_stmtAccess() {
		return pPass_stmt;
	}
	
	public ParserRule getPass_stmtRule() {
		return getPass_stmtAccess().getRule();
	}

	//flow_stmt:
	//	break_stmt | continue_stmt | return_stmt | raise_stmt | yield_stmt;
	public Flow_stmtElements getFlow_stmtAccess() {
		return pFlow_stmt;
	}
	
	public ParserRule getFlow_stmtRule() {
		return getFlow_stmtAccess().getRule();
	}

	//break_stmt:
	//	{break_stmt} 'break';
	public Break_stmtElements getBreak_stmtAccess() {
		return pBreak_stmt;
	}
	
	public ParserRule getBreak_stmtRule() {
		return getBreak_stmtAccess().getRule();
	}

	//continue_stmt:
	//	{continue_stmt} 'continue';
	public Continue_stmtElements getContinue_stmtAccess() {
		return pContinue_stmt;
	}
	
	public ParserRule getContinue_stmtRule() {
		return getContinue_stmtAccess().getRule();
	}

	//return_stmt:
	//	{return_stmt} 'return' testlist=testlist?;
	public Return_stmtElements getReturn_stmtAccess() {
		return pReturn_stmt;
	}
	
	public ParserRule getReturn_stmtRule() {
		return getReturn_stmtAccess().getRule();
	}

	//yield_stmt:
	//	yield_expr=yield_expr;
	public Yield_stmtElements getYield_stmtAccess() {
		return pYield_stmt;
	}
	
	public ParserRule getYield_stmtRule() {
		return getYield_stmtAccess().getRule();
	}

	//raise_stmt:
	//	{raise_stmt} 'raise' (tests+=test (',' tests+=test (',' tests+=test)?)?)?;
	public Raise_stmtElements getRaise_stmtAccess() {
		return pRaise_stmt;
	}
	
	public ParserRule getRaise_stmtRule() {
		return getRaise_stmtAccess().getRule();
	}

	//import_stmt:
	//	import_name | import_from;
	public Import_stmtElements getImport_stmtAccess() {
		return pImport_stmt;
	}
	
	public ParserRule getImport_stmtRule() {
		return getImport_stmtAccess().getRule();
	}

	//import_name:
	//	'import' dotted_as_names=dotted_as_names;
	public Import_nameElements getImport_nameAccess() {
		return pImport_name;
	}
	
	public ParserRule getImport_nameRule() {
		return getImport_nameAccess().getRule();
	}

	//import_from:
	//	'from' (dots+='.'* dotted_name=dotted_name | dots2+='.'+)
	//	'import' ('*' | roundBracket?='(' import_as_names=import_as_names ')' | import_as_names=import_as_names);
	public Import_fromElements getImport_fromAccess() {
		return pImport_from;
	}
	
	public ParserRule getImport_fromRule() {
		return getImport_fromAccess().getRule();
	}

	//import_as_name:
	//	name=NAME ('as' identifier=NAME)?;
	public Import_as_nameElements getImport_as_nameAccess() {
		return pImport_as_name;
	}
	
	public ParserRule getImport_as_nameRule() {
		return getImport_as_nameAccess().getRule();
	}

	//dotted_as_name:
	//	name=dotted_name ('as' identifier=NAME)?;
	public Dotted_as_nameElements getDotted_as_nameAccess() {
		return pDotted_as_name;
	}
	
	public ParserRule getDotted_as_nameRule() {
		return getDotted_as_nameAccess().getRule();
	}

	//import_as_names:
	//	imports+=import_as_name (',' imports+=import_as_name)* optionalComma?=','?;
	public Import_as_namesElements getImport_as_namesAccess() {
		return pImport_as_names;
	}
	
	public ParserRule getImport_as_namesRule() {
		return getImport_as_namesAccess().getRule();
	}

	//dotted_as_names:
	//	dotted_names+=dotted_as_name (',' dotted_names+=dotted_as_name)*;
	public Dotted_as_namesElements getDotted_as_namesAccess() {
		return pDotted_as_names;
	}
	
	public ParserRule getDotted_as_namesRule() {
		return getDotted_as_namesAccess().getRule();
	}

	//dotted_name:
	//	NAME ('.' NAME)*;
	public Dotted_nameElements getDotted_nameAccess() {
		return pDotted_name;
	}
	
	public ParserRule getDotted_nameRule() {
		return getDotted_nameAccess().getRule();
	}

	//global_stmt:
	//	'global' globals+=NAME (',' globals+=NAME)*;
	public Global_stmtElements getGlobal_stmtAccess() {
		return pGlobal_stmt;
	}
	
	public ParserRule getGlobal_stmtRule() {
		return getGlobal_stmtAccess().getRule();
	}

	//exec_stmt:
	//	'exec' expr=expr ('in' tests+=test (',' tests+=test)?)?;
	public Exec_stmtElements getExec_stmtAccess() {
		return pExec_stmt;
	}
	
	public ParserRule getExec_stmtRule() {
		return getExec_stmtAccess().getRule();
	}

	//assert_stmt:
	//	'assert' assers+=test (',' assers+=test)?;
	public Assert_stmtElements getAssert_stmtAccess() {
		return pAssert_stmt;
	}
	
	public ParserRule getAssert_stmtRule() {
		return getAssert_stmtAccess().getRule();
	}

	//compound_stmt:
	//	if_stmt | while_stmt | for_stmt | try_stmt | with_stmt | funcdef | classdef | decorated;
	public Compound_stmtElements getCompound_stmtAccess() {
		return pCompound_stmt;
	}
	
	public ParserRule getCompound_stmtRule() {
		return getCompound_stmtAccess().getRule();
	}

	//else_if_stmt:
	//	'elif' test=test ':' suite=suite;
	public Else_if_stmtElements getElse_if_stmtAccess() {
		return pElse_if_stmt;
	}
	
	public ParserRule getElse_if_stmtRule() {
		return getElse_if_stmtAccess().getRule();
	}

	//if_stmt:
	//	'if' test=test ':' suite=suite else_if_stmts+=else_if_stmt* ('else' ':' else=suite)? ENDIF;
	public If_stmtElements getIf_stmtAccess() {
		return pIf_stmt;
	}
	
	public ParserRule getIf_stmtRule() {
		return getIf_stmtAccess().getRule();
	}

	//while_stmt:
	//	'while' test=test ':' suite=suite ('else' ':' else=suite)? ENDWHILE;
	public While_stmtElements getWhile_stmtAccess() {
		return pWhile_stmt;
	}
	
	public ParserRule getWhile_stmtRule() {
		return getWhile_stmtAccess().getRule();
	}

	//for_stmt:
	//	'for' exprlist=exprlist 'in' testlist=testlist ':' suite=suite ('else' ':' else=suite)? (ENDFOR | ENDIF);
	public For_stmtElements getFor_stmtAccess() {
		return pFor_stmt;
	}
	
	public ParserRule getFor_stmtRule() {
		return getFor_stmtAccess().getRule();
	}

	//try_stmt:
	//	('try' ':' suite=suite ENDTRY? (except_clause+=except_clause+ ('else' ':' else=suite)? ('finally' ':' finally=suite)?
	//	| 'finally' ':' finally=suite)) ENDTRY;
	public Try_stmtElements getTry_stmtAccess() {
		return pTry_stmt;
	}
	
	public ParserRule getTry_stmtRule() {
		return getTry_stmtAccess().getRule();
	}

	//with_stmt:
	//	'with' with_item+=with_item (',' with_item+=with_item)* ':' suite=suite ENDWITH;
	public With_stmtElements getWith_stmtAccess() {
		return pWith_stmt;
	}
	
	public ParserRule getWith_stmtRule() {
		return getWith_stmtAccess().getRule();
	}

	//with_item:
	//	test=test ('as' expr=expr)?;
	public With_itemElements getWith_itemAccess() {
		return pWith_item;
	}
	
	public ParserRule getWith_itemRule() {
		return getWith_itemAccess().getRule();
	}

	//// NB compile.c makes sure that the default except clause is last
	//except_clause:
	//	'except' (test=test (sign=('as' | ',') next_test=test)?)? ':' suite=suite;
	public Except_clauseElements getExcept_clauseAccess() {
		return pExcept_clause;
	}
	
	public ParserRule getExcept_clauseRule() {
		return getExcept_clauseAccess().getRule();
	}

	//suite:
	//	=> stmts+=stmt+;
	public SuiteElements getSuiteAccess() {
		return pSuite;
	}
	
	public ParserRule getSuiteRule() {
		return getSuiteAccess().getRule();
	}

	//// Backward compatibility cruft to support:
	//// [ x for x in lambda: True, lambda: False if x() ]
	//// even while also allowing:
	//// lambda x: 5 if x else 2
	//// (But not a mix of the two)
	//testlist_safe:
	//	old_test+=test ((',' old_test+=test)+ optionalComa?=','?)?;
	public Testlist_safeElements getTestlist_safeAccess() {
		return pTestlist_safe;
	}
	
	public ParserRule getTestlist_safeRule() {
		return getTestlist_safeAccess().getRule();
	}

	//test:
	//	or_test ({test.left=current} 'if' if_test=or_test 'else' if_else_test=test)? | lambdef;
	public TestElements getTestAccess() {
		return pTest;
	}
	
	public ParserRule getTestRule() {
		return getTestAccess().getRule();
	}

	//or_test:
	//	and_test ({or_test.left=current} sign='or' NL? right=and_test)*;
	public Or_testElements getOr_testAccess() {
		return pOr_test;
	}
	
	public ParserRule getOr_testRule() {
		return getOr_testAccess().getRule();
	}

	//and_test:
	//	not_test ({and_test.left=current} sign='and' NL? right=not_test)*;
	public And_testElements getAnd_testAccess() {
		return pAnd_test;
	}
	
	public ParserRule getAnd_testRule() {
		return getAnd_testAccess().getRule();
	}

	//not_test:
	//	not+='not'+ comparison=comparison | comparison;
	public Not_testElements getNot_testAccess() {
		return pNot_test;
	}
	
	public ParserRule getNot_testRule() {
		return getNot_testAccess().getRule();
	}

	//comparison:
	//	expr ({comparison.left=current} comp_op=comp_op right=expr)*;
	public ComparisonElements getComparisonAccess() {
		return pComparison;
	}
	
	public ParserRule getComparisonRule() {
		return getComparisonAccess().getRule();
	}

	//comp_op:
	//	'<' | '>' | '==' | '>=' | '<=' | '<>' | '!=' | 'in' | 'not' 'in' | 'is' | 'is' 'not';
	public Comp_opElements getComp_opAccess() {
		return pComp_op;
	}
	
	public ParserRule getComp_opRule() {
		return getComp_opAccess().getRule();
	}

	//expr:
	//	xor_expr ({expr.left=current} sign='|' right=xor_expr)*;
	public ExprElements getExprAccess() {
		return pExpr;
	}
	
	public ParserRule getExprRule() {
		return getExprAccess().getRule();
	}

	//xor_expr:
	//	and_expr ({xor_expr.left=current} sign='^' right=and_expr)*;
	public Xor_exprElements getXor_exprAccess() {
		return pXor_expr;
	}
	
	public ParserRule getXor_exprRule() {
		return getXor_exprAccess().getRule();
	}

	//and_expr:
	//	shift_expr ({and_expr.left=current} sign='&' right=shift_expr)*;
	public And_exprElements getAnd_exprAccess() {
		return pAnd_expr;
	}
	
	public ParserRule getAnd_exprRule() {
		return getAnd_exprAccess().getRule();
	}

	//shift_expr:
	//	arith_expr ({shift_expr.left=current} sign=('<<' | '>>') right=arith_expr)*;
	public Shift_exprElements getShift_exprAccess() {
		return pShift_expr;
	}
	
	public ParserRule getShift_exprRule() {
		return getShift_exprAccess().getRule();
	}

	//arith_expr:
	//	term ({arith_expr.left=current} sign=('+' | '-') right=term)*;
	public Arith_exprElements getArith_exprAccess() {
		return pArith_expr;
	}
	
	public ParserRule getArith_exprRule() {
		return getArith_exprAccess().getRule();
	}

	//term:
	//	factor ({term.left=current} sign=('*' | '/' | '%' | '//' | '**') right=factor)*;
	public TermElements getTermAccess() {
		return pTerm;
	}
	
	public ParserRule getTermRule() {
		return getTermAccess().getRule();
	}

	//factor:
	//	sign=('+' | '-' | '~') factor=factor | power;
	public FactorElements getFactorAccess() {
		return pFactor;
	}
	
	public ParserRule getFactorRule() {
		return getFactorAccess().getRule();
	}

	//power:
	//	{Step} 'Step' '(' id=atom (',' description=arith_expr)? ','? ')' | {DisplayStep} 'DisplayStep' '(' id=arith_expr (','
	//	description=arith_expr)? ','? ')' | {ShowTM} 'ShowTM' '(' args+=arglist ','? ')' | {Send} 'Send' '(' args+=arglist
	//	','? ')' trailer+=trailer* | {BuildTC} 'BuildTC' '(' args+=arglist ','? ')' trailer+=trailer* | {SetLimits}
	//	'SetLimits' '(' tm=test (','? args+=arglist)* ','? ')' trailer+=trailer* | {SetLimits} 'GetLimits' '(' tm=test (','?
	//	args+=arglist)* ','? ')' trailer+=trailer* | {GetTM} 'GetTM' '(' tm=test (','? args+=arglist)* ','? ')'
	//	trailer+=trailer* | {Goto} 'Goto' '(' target=STRING ')' trailer+=trailer* | {Goto} 'Goto' '(' expr=test ')'
	//	trailer+=trailer* | {Verify} 'Verify' '(' args=arglist ','? ')' trailer+=trailer* | {Verify} 'WaitFor' '('
	//	args=arglist ','? ')' trailer+=trailer* | {ChangeLanguageConfig} 'ChangeLanguageConfig' '('
	//	statement=Python_Statement ',' args=arglist ')' | atom ({power.atom=current} trailer+=trailer+ ('**'
	//	factor=factor)?)?;
	public PowerElements getPowerAccess() {
		return pPower;
	}
	
	public ParserRule getPowerRule() {
		return getPowerAccess().getRule();
	}

	//yield_or_testlist_comp:
	//	yield_expr | testlist_comp;
	public Yield_or_testlist_compElements getYield_or_testlist_compAccess() {
		return pYield_or_testlist_comp;
	}
	
	public ParserRule getYield_or_testlist_compRule() {
		return getYield_or_testlist_compAccess().getRule();
	}

	//atom:
	//	roundBracket?='(' yield_or_testlist_comp=yield_or_testlist_comp? ')' | squareBracket?='[' listmaker=listmaker? ']' |
	//	curlyBracket?='{' dictorsetmaker=dictorsetmaker? '}' | '`' testlist1=testlist1 '`' | name=NAME |
	//	name=NumberWithPlusOrMinus | (strings+=STRING WS?)+;
	public AtomElements getAtomAccess() {
		return pAtom;
	}
	
	public ParserRule getAtomRule() {
		return getAtomAccess().getRule();
	}

	//listmaker:
	//	test=test (list_for=list_for | (',' additionalTests+=test)* optionalComma?=','?)?;
	public ListmakerElements getListmakerAccess() {
		return pListmaker;
	}
	
	public ParserRule getListmakerRule() {
		return getListmakerAccess().getRule();
	}

	//testlist_comp:
	//	test=test (comp_for=comp_for | (',' additionalTests+=test)* optionalComma?=','?)?;
	public Testlist_compElements getTestlist_compAccess() {
		return pTestlist_comp;
	}
	
	public ParserRule getTestlist_compRule() {
		return getTestlist_compAccess().getRule();
	}

	//lambdef:
	//	{lambdef} 'lambda' varargslist=varargslist? ':' test=test;
	public LambdefElements getLambdefAccess() {
		return pLambdef;
	}
	
	public ParserRule getLambdefRule() {
		return getLambdefAccess().getRule();
	}

	//trailer:
	//	roundBracket?='(' arglist=arglist? ','? ')' | squareBracket?='[' subscriptlist=subscriptlist ']' | '.' dotName=NAME;
	public TrailerElements getTrailerAccess() {
		return pTrailer;
	}
	
	public ParserRule getTrailerRule() {
		return getTrailerAccess().getRule();
	}

	//subscriptlist:
	//	subscript+=subscript (',' subscript+=subscript)* optionalComma?=','?;
	public SubscriptlistElements getSubscriptlistAccess() {
		return pSubscriptlist;
	}
	
	public ParserRule getSubscriptlistRule() {
		return getSubscriptlistAccess().getRule();
	}

	//subscript:
	//	{subscript} ('.' '.' '.' | subscript1=test? (symbol=':' subscript2=test? sliceop=sliceop?)?);
	public SubscriptElements getSubscriptAccess() {
		return pSubscript;
	}
	
	public ParserRule getSubscriptRule() {
		return getSubscriptAccess().getRule();
	}

	//sliceop:
	//	{sliceop} ':' test=test?;
	public SliceopElements getSliceopAccess() {
		return pSliceop;
	}
	
	public ParserRule getSliceopRule() {
		return getSliceopAccess().getRule();
	}

	//exprlist:
	//	exprs+=expr (',' exprs+=expr)* optionalComma?=','?;
	public ExprlistElements getExprlistAccess() {
		return pExprlist;
	}
	
	public ParserRule getExprlistRule() {
		return getExprlistAccess().getRule();
	}

	//testlist:
	//	test ({testlist.tests+=current} ',' tests+=test)* optionalComma?=','?;
	public TestlistElements getTestlistAccess() {
		return pTestlist;
	}
	
	public ParserRule getTestlistRule() {
		return getTestlistAccess().getRule();
	}

	//dictorset_entry:
	//	test1=test ':' test2=test;
	public Dictorset_entryElements getDictorset_entryAccess() {
		return pDictorset_entry;
	}
	
	public ParserRule getDictorset_entryRule() {
		return getDictorset_entryAccess().getRule();
	}

	//dictorsetmaker:
	//	entries+=dictorset_entry (comp_for=comp_for | (',' entries+=dictorset_entry)* optionalComma?=','?);
	public DictorsetmakerElements getDictorsetmakerAccess() {
		return pDictorsetmaker;
	}
	
	public ParserRule getDictorsetmakerRule() {
		return getDictorsetmakerAccess().getRule();
	}

	//classdef:
	//	'class' name=NAME (roundBrackets?='(' testlist=testlist ')')? ':' suite=suite ENDCLASS;
	public ClassdefElements getClassdefAccess() {
		return pClassdef;
	}
	
	public ParserRule getClassdefRule() {
		return getClassdefAccess().getRule();
	}

	//arglist:
	//	(arguments+=argument ',')* (arguments+=argument optionalComma?=','? | '*' dot1_test=test (','
	//	dot1_arguments+=argument)* (',' '**' dot2_test=test)? | '**' dot2_test=test) ','?;
	public ArglistElements getArglistAccess() {
		return pArglist;
	}
	
	public ParserRule getArglistRule() {
		return getArglistAccess().getRule();
	}

	//// The reason that keywords are test nodes instead of NAME is that using NAME
	//// results in an ambiguity. ast.c makes sure it's a NAME.
	//argument:
	//	test ({argument.test=current} comp_for=comp_for | {argument.test=current} '=' test2=test)?;
	public ArgumentElements getArgumentAccess() {
		return pArgument;
	}
	
	public ParserRule getArgumentRule() {
		return getArgumentAccess().getRule();
	}

	//list_iter:
	//	list_for | list_if;
	public List_iterElements getList_iterAccess() {
		return pList_iter;
	}
	
	public ParserRule getList_iterRule() {
		return getList_iterAccess().getRule();
	}

	//list_for:
	//	'for' exprlist=exprlist 'in' testlist_safe=testlist_safe list_iter=list_iter?;
	public List_forElements getList_forAccess() {
		return pList_for;
	}
	
	public ParserRule getList_forRule() {
		return getList_forAccess().getRule();
	}

	//list_if:
	//	'if' old_test=test list_iter=list_iter?;
	public List_ifElements getList_ifAccess() {
		return pList_if;
	}
	
	public ParserRule getList_ifRule() {
		return getList_ifAccess().getRule();
	}

	//comp_iter:
	//	comp_for | comp_if;
	public Comp_iterElements getComp_iterAccess() {
		return pComp_iter;
	}
	
	public ParserRule getComp_iterRule() {
		return getComp_iterAccess().getRule();
	}

	//comp_for:
	//	'for' exprlist=exprlist 'in' or_test=or_test comp_iter=comp_iter?;
	public Comp_forElements getComp_forAccess() {
		return pComp_for;
	}
	
	public ParserRule getComp_forRule() {
		return getComp_forAccess().getRule();
	}

	//comp_if:
	//	'if' test=test comp_iter=comp_iter?;
	public Comp_ifElements getComp_ifAccess() {
		return pComp_if;
	}
	
	public ParserRule getComp_ifRule() {
		return getComp_ifAccess().getRule();
	}

	//testlist1:
	//	{testlist1} tests+=test (',' tests+=test)*;
	public Testlist1Elements getTestlist1Access() {
		return pTestlist1;
	}
	
	public ParserRule getTestlist1Rule() {
		return getTestlist1Access().getRule();
	}

	//yield_expr:
	//	{yield_expr} 'yield' testlist=testlist?;
	public Yield_exprElements getYield_exprAccess() {
		return pYield_expr;
	}
	
	public ParserRule getYield_exprRule() {
		return getYield_exprAccess().getRule();
	}

	//Python_Statement:
	//	'Step' | 'ShowTM' | 'Verify' | 'Send' | 'GetTM' | 'Goto' | 'SetLimits' | 'GetLimits' | 'BuildTC' | 'DisplayStep' |
	//	'WaitFor' | NAME_TERMINAL;
	public Python_StatementElements getPython_StatementAccess() {
		return pPython_Statement;
	}
	
	public ParserRule getPython_StatementRule() {
		return getPython_StatementAccess().getRule();
	}

	//NumberWithPlusOrMinus:
	//	('+' | '-')? '.'? NUMBER;
	public NumberWithPlusOrMinusElements getNumberWithPlusOrMinusAccess() {
		return pNumberWithPlusOrMinus;
	}
	
	public ParserRule getNumberWithPlusOrMinusRule() {
		return getNumberWithPlusOrMinusAccess().getRule();
	}

	//NAME:
	//	Python_Statement;
	public NAMEElements getNAMEAccess() {
		return pNAME;
	}
	
	public ParserRule getNAMERule() {
		return getNAMEAccess().getRule();
	}

	//NL:
	//	'\\' WS;
	public NLElements getNLAccess() {
		return pNL;
	}
	
	public ParserRule getNLRule() {
		return getNLAccess().getRule();
	}

	//terminal ENDIF:
	//	'#' 'ENDIF' !('\n' | '\r')*;
	public TerminalRule getENDIFRule() {
		return tENDIF;
	} 

	//terminal ENDWHILE:
	//	'#' 'ENDWHILE' !('\n' | '\r')*;
	public TerminalRule getENDWHILERule() {
		return tENDWHILE;
	} 

	//terminal ENDFOR:
	//	'#' 'ENDFOR' !('\n' | '\r')*;
	public TerminalRule getENDFORRule() {
		return tENDFOR;
	} 

	//terminal ENDWITH:
	//	'#' 'ENDWITH' !('\n' | '\r')*;
	public TerminalRule getENDWITHRule() {
		return tENDWITH;
	} 

	//terminal ENDDEF:
	//	'#' 'ENDDEF' !('\n' | '\r')*;
	public TerminalRule getENDDEFRule() {
		return tENDDEF;
	} 

	//terminal ENDTRY:
	//	'#' 'ENDTRY' !('\n' | '\r')*;
	public TerminalRule getENDTRYRule() {
		return tENDTRY;
	} 

	//terminal ENDCLASS:
	//	'#' 'ENDCLASS' !('\n' | '\r')*;
	public TerminalRule getENDCLASSRule() {
		return tENDCLASS;
	} 

	//terminal STRING:
	//	'"' ('\\' ('b' | 't' | 'n' | 'f' | 'r' | 'u' | '"' | "'" | '\\') | !('\\' | '"'))* '"' |
	//	"'" ('\\' ('b' | 't' | 'n' | 'f' | 'r' | 'u' | '"' | "'" | '\\') | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return tSTRING;
	} 

	//terminal ML_COMMENT:
	//	"'''"->"'''";
	public TerminalRule getML_COMMENTRule() {
		return tML_COMMENT;
	} 

	//terminal SL_COMMENT:
	//	'#' !('\n' | '\r')*;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	} 

	//terminal WS:
	//	' ' | '\t' | '\\'? '\r'? '\n'+;
	public TerminalRule getWSRule() {
		return tWS;
	} 

	//terminal NAME_TERMINAL:
	//	('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getNAME_TERMINALRule() {
		return tNAME_TERMINAL;
	} 

	//terminal NUMBER:
	//	'0'..'9'+ (('x' | 'X' | 'b' | 'O' | 'o' | 'B') ('0'..'9' | 'a'..'f' | 'A'..'F')+)? ('.' '0'..'9'+)? (('E' | 'e') ('-'
	//	| '+')? '0'..'9'+)? 'L'?;
	public TerminalRule getNUMBERRule() {
		return tNUMBER;
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return tANY_OTHER;
	} 
}
