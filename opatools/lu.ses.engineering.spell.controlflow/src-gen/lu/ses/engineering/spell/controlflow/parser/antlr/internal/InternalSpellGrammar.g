/*
 * generated by Xtext
 */
grammar InternalSpellGrammar;

options {
	superClass=AbstractInternalAntlrParser;
	backtrack=true;
	 memoize=true;
	
}

@lexer::header {
package lu.ses.engineering.spell.controlflow.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package lu.ses.engineering.spell.controlflow.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import lu.ses.engineering.spell.controlflow.services.SpellGrammarGrammarAccess;

}

@parser::members {

/*
  This grammar contains a lot of empty actions to work around a bug in ANTLR.
  Otherwise the ANTLR tool will create synpreds that cannot be compiled in some rare cases.
*/
 
 	private SpellGrammarGrammarAccess grammarAccess;
 	
    public InternalSpellGrammarParser(TokenStream input, SpellGrammarGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "file_input";	
   	}
   	
   	@Override
   	protected SpellGrammarGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRulefile_input
entryRulefile_input returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFile_inputRule()); }
	 iv_rulefile_input=rulefile_input 
	 { $current=$iv_rulefile_input.current; } 
	 EOF 
;

// Rule file_input
rulefile_input returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getFile_inputAccess().getFile_inputAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFile_inputAccess().getStmtsStmtParserRuleCall_1_0()); 
	    }
		lv_stmts_1_0=rulestmt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFile_inputRule());
	        }
       		add(
       			$current, 
       			"stmts",
        		lv_stmts_1_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.stmt");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;







// Entry rule entryRulesingle_input
entryRulesingle_input returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSingle_inputRule()); }
	 iv_rulesingle_input=rulesingle_input 
	 { $current=$iv_rulesingle_input.current; } 
	 EOF 
;

// Rule single_input
rulesingle_input returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getSingle_inputAccess().getSingle_inputAction_0(),
            $current);
    }
)((
(
		{ 
	        newCompositeNode(grammarAccess.getSingle_inputAccess().getStmtSimple_stmtParserRuleCall_1_0_0()); 
	    }
		lv_stmt_1_0=rulesimple_stmt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSingle_inputRule());
	        }
       		set(
       			$current, 
       			"stmt",
        		lv_stmt_1_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.simple_stmt");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getSingle_inputAccess().getStmtCompound_stmtParserRuleCall_1_1_0()); 
	    }
		lv_stmt_2_0=rulecompound_stmt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSingle_inputRule());
	        }
       		set(
       			$current, 
       			"stmt",
        		lv_stmt_2_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.compound_stmt");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRuleeval_input
entryRuleeval_input returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEval_inputRule()); }
	 iv_ruleeval_input=ruleeval_input 
	 { $current=$iv_ruleeval_input.current; } 
	 EOF 
;

// Rule eval_input
ruleeval_input returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getEval_inputAccess().getEval_inputAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getEval_inputAccess().getTestlistTestlistParserRuleCall_1_0()); 
	    }
		lv_testlist_1_0=ruletestlist		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEval_inputRule());
	        }
       		set(
       			$current, 
       			"testlist",
        		lv_testlist_1_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.testlist");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuledecorator
entryRuledecorator returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDecoratorRule()); }
	 iv_ruledecorator=ruledecorator 
	 { $current=$iv_ruledecorator.current; } 
	 EOF 
;

// Rule decorator
ruledecorator returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='@' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getDecoratorAccess().getCommercialAtKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDecoratorAccess().getDotted_nameDotted_nameParserRuleCall_1_0()); 
	    }
		lv_dotted_name_1_0=ruledotted_name		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDecoratorRule());
	        }
       		set(
       			$current, 
       			"dotted_name",
        		lv_dotted_name_1_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.dotted_name");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		lv_roundBracket_2_0=	'(' 
    {
        newLeafNode(lv_roundBracket_2_0, grammarAccess.getDecoratorAccess().getRoundBracketLeftParenthesisKeyword_2_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDecoratorRule());
	        }
       		setWithLastConsumed($current, "roundBracket", true, "(");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getDecoratorAccess().getArglistArglistParserRuleCall_2_1_0()); 
	    }
		lv_arglist_3_0=rulearglist		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDecoratorRule());
	        }
       		set(
       			$current, 
       			"arglist",
        		lv_arglist_3_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.arglist");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_4=')' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getDecoratorAccess().getRightParenthesisKeyword_2_2());
    }
)?)
;





// Entry rule entryRuledecorators
entryRuledecorators returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDecoratorsRule()); }
	 iv_ruledecorators=ruledecorators 
	 { $current=$iv_ruledecorators.current; } 
	 EOF 
;

// Rule decorators
ruledecorators returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getDecoratorsAccess().getDecoratorsDecoratorParserRuleCall_0()); 
	    }
		lv_decorators_0_0=ruledecorator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDecoratorsRule());
	        }
       		add(
       			$current, 
       			"decorators",
        		lv_decorators_0_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.decorator");
	        afterParserOrEnumRuleCall();
	    }

)
)+
;





// Entry rule entryRuledecorated
entryRuledecorated returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDecoratedRule()); }
	 iv_ruledecorated=ruledecorated 
	 { $current=$iv_ruledecorated.current; } 
	 EOF 
;

// Rule decorated
ruledecorated returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getDecoratedAccess().getDecoratorsDecoratorsParserRuleCall_0_0()); 
	    }
		lv_decorators_0_0=ruledecorators		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDecoratedRule());
	        }
       		set(
       			$current, 
       			"decorators",
        		lv_decorators_0_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.decorators");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		{ 
	        newCompositeNode(grammarAccess.getDecoratedAccess().getDefClassdefParserRuleCall_1_0_0()); 
	    }
		lv_def_1_0=ruleclassdef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDecoratedRule());
	        }
       		set(
       			$current, 
       			"def",
        		lv_def_1_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.classdef");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getDecoratedAccess().getDefFuncdefParserRuleCall_1_1_0()); 
	    }
		lv_def_2_0=rulefuncdef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDecoratedRule());
	        }
       		set(
       			$current, 
       			"def",
        		lv_def_2_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.funcdef");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRulefuncdef
entryRulefuncdef returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFuncdefRule()); }
	 iv_rulefuncdef=rulefuncdef 
	 { $current=$iv_rulefuncdef.current; } 
	 EOF 
;

// Rule funcdef
rulefuncdef returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='def' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFuncdefAccess().getDefKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFuncdefAccess().getNameNAMEParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleNAME		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFuncdefRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.NAME");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFuncdefAccess().getParametersParametersParserRuleCall_2_0()); 
	    }
		lv_parameters_2_0=ruleparameters		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFuncdefRule());
	        }
       		set(
       			$current, 
       			"parameters",
        		lv_parameters_2_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.parameters");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=':' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getFuncdefAccess().getColonKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFuncdefAccess().getSuiteSuiteParserRuleCall_4_0()); 
	    }
		lv_suite_4_0=rulesuite		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFuncdefRule());
	        }
       		set(
       			$current, 
       			"suite",
        		lv_suite_4_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.suite");
	        afterParserOrEnumRuleCall();
	    }

)
)this_ENDDEF_5=RULE_ENDDEF
    { 
    newLeafNode(this_ENDDEF_5, grammarAccess.getFuncdefAccess().getENDDEFTerminalRuleCall_5()); 
    }
)
;





// Entry rule entryRuleparameters
entryRuleparameters returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParametersRule()); }
	 iv_ruleparameters=ruleparameters 
	 { $current=$iv_ruleparameters.current; } 
	 EOF 
;

// Rule parameters
ruleparameters returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getParametersAccess().getParametersAction_0(),
            $current);
    }
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getParametersAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getParametersAccess().getVarargslistVarargslistParserRuleCall_2_0()); 
	    }
		lv_varargslist_2_0=rulevarargslist		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParametersRule());
	        }
       		set(
       			$current, 
       			"varargslist",
        		lv_varargslist_2_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.varargslist");
	        afterParserOrEnumRuleCall();
	    }

)
)?(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getParametersAccess().getCommaKeyword_3());
    }
)?	otherlv_4=')' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getParametersAccess().getRightParenthesisKeyword_4());
    }
)
;





// Entry rule entryRulevarargslist_element
entryRulevarargslist_element returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVarargslist_elementRule()); }
	 iv_rulevarargslist_element=rulevarargslist_element 
	 { $current=$iv_rulevarargslist_element.current; } 
	 EOF 
;

// Rule varargslist_element
rulevarargslist_element returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getVarargslist_elementAccess().getFpdefFpdefParserRuleCall_0_0()); 
	    }
		lv_fpdef_0_0=rulefpdef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVarargslist_elementRule());
	        }
       		set(
       			$current, 
       			"fpdef",
        		lv_fpdef_0_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.fpdef");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1='=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getVarargslist_elementAccess().getEqualsSignKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getVarargslist_elementAccess().getTestTestParserRuleCall_1_1_0()); 
	    }
		lv_test_2_0=ruletest		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVarargslist_elementRule());
	        }
       		set(
       			$current, 
       			"test",
        		lv_test_2_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.test");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRulevarargslist
entryRulevarargslist returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVarargslistRule()); }
	 iv_rulevarargslist=rulevarargslist 
	 { $current=$iv_rulevarargslist.current; } 
	 EOF 
;

// Rule varargslist
rulevarargslist returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((((
(
		{ 
	        newCompositeNode(grammarAccess.getVarargslistAccess().getVarargs1Varargslist_elementParserRuleCall_0_0_0_0()); 
	    }
		lv_varargs1_0_0=rulevarargslist_element		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVarargslistRule());
	        }
       		add(
       			$current, 
       			"varargs1",
        		lv_varargs1_0_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.varargslist_element");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getVarargslistAccess().getCommaKeyword_0_0_1());
    }
)*((	otherlv_2='*' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getVarargslistAccess().getAsteriskKeyword_0_1_0_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getVarargslistAccess().getDot1NameNAMEParserRuleCall_0_1_0_1_0()); 
	    }
		lv_dot1Name_3_0=ruleNAME		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVarargslistRule());
	        }
       		set(
       			$current, 
       			"dot1Name",
        		lv_dot1Name_3_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.NAME");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getVarargslistAccess().getCommaKeyword_0_1_0_2_0());
    }
	otherlv_5='**' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getVarargslistAccess().getAsteriskAsteriskKeyword_0_1_0_2_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getVarargslistAccess().getDot2NameNAMEParserRuleCall_0_1_0_2_2_0()); 
	    }
		lv_dot2Name_6_0=ruleNAME		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVarargslistRule());
	        }
       		set(
       			$current, 
       			"dot2Name",
        		lv_dot2Name_6_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.NAME");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
    |(	otherlv_7='**' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getVarargslistAccess().getAsteriskAsteriskKeyword_0_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getVarargslistAccess().getDot2NameNAMEParserRuleCall_0_1_1_1_0()); 
	    }
		lv_dot2Name_8_0=ruleNAME		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVarargslistRule());
	        }
       		set(
       			$current, 
       			"dot2Name",
        		lv_dot2Name_8_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.NAME");
	        afterParserOrEnumRuleCall();
	    }

)
))))
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getVarargslistAccess().getVararg2Varargslist_elementParserRuleCall_1_0_0()); 
	    }
		lv_vararg2_9_0=rulevarargslist_element		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVarargslistRule());
	        }
       		set(
       			$current, 
       			"vararg2",
        		lv_vararg2_9_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.varargslist_element");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_10=',' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getVarargslistAccess().getCommaKeyword_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getVarargslistAccess().getVarargs3Varargslist_elementParserRuleCall_1_1_1_0()); 
	    }
		lv_varargs3_11_0=rulevarargslist_element		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVarargslistRule());
	        }
       		add(
       			$current, 
       			"varargs3",
        		lv_varargs3_11_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.varargslist_element");
	        afterParserOrEnumRuleCall();
	    }

)
))*(
(
		lv_additionalComma_12_0=	',' 
    {
        newLeafNode(lv_additionalComma_12_0, grammarAccess.getVarargslistAccess().getAdditionalCommaCommaKeyword_1_2_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVarargslistRule());
	        }
       		setWithLastConsumed($current, "additionalComma", true, ",");
	    }

)
)?))
;





// Entry rule entryRulefpdef
entryRulefpdef returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFpdefRule()); }
	 iv_rulefpdef=rulefpdef 
	 { $current=$iv_rulefpdef.current; } 
	 EOF 
;

// Rule fpdef
rulefpdef returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getFpdefAccess().getNameNAMEParserRuleCall_0_0()); 
	    }
		lv_name_0_0=ruleNAME		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFpdefRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.NAME");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getFpdefAccess().getLeftParenthesisKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFpdefAccess().getFplistFplistParserRuleCall_1_1_0()); 
	    }
		lv_fplist_2_0=rulefplist		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFpdefRule());
	        }
       		set(
       			$current, 
       			"fplist",
        		lv_fplist_2_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.fplist");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getFpdefAccess().getRightParenthesisKeyword_1_2());
    }
))
;





// Entry rule entryRulefplist
entryRulefplist returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFplistRule()); }
	 iv_rulefplist=rulefplist 
	 { $current=$iv_rulefplist.current; } 
	 EOF 
;

// Rule fplist
rulefplist returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getFplistAccess().getDef1FpdefParserRuleCall_0_0()); 
	    }
		lv_def1_0_0=rulefpdef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFplistRule());
	        }
       		set(
       			$current, 
       			"def1",
        		lv_def1_0_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.fpdef");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getFplistAccess().getCommaKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFplistAccess().getDefinitionsFpdefParserRuleCall_1_1_0()); 
	    }
		lv_definitions_2_0=rulefpdef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFplistRule());
	        }
       		add(
       			$current, 
       			"definitions",
        		lv_definitions_2_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.fpdef");
	        afterParserOrEnumRuleCall();
	    }

)
))*(
(
		lv_optionalSemicolon_3_0=	';' 
    {
        newLeafNode(lv_optionalSemicolon_3_0, grammarAccess.getFplistAccess().getOptionalSemicolonSemicolonKeyword_2_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFplistRule());
	        }
       		setWithLastConsumed($current, "optionalSemicolon", true, ";");
	    }

)
)?)
;





// Entry rule entryRulestmt
entryRulestmt returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStmtRule()); }
	 iv_rulestmt=rulestmt 
	 { $current=$iv_rulestmt.current; } 
	 EOF 
;

// Rule stmt
rulestmt returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getStmtAccess().getSimple_stmtParserRuleCall_0()); 
    }
    this_simple_stmt_0=rulesimple_stmt
    { 
        $current = $this_simple_stmt_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getStmtAccess().getCompound_stmtParserRuleCall_1()); 
    }
    this_compound_stmt_1=rulecompound_stmt
    { 
        $current = $this_compound_stmt_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRulesimple_stmt
entryRulesimple_stmt returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSimple_stmtRule()); }
	 iv_rulesimple_stmt=rulesimple_stmt 
	 { $current=$iv_rulesimple_stmt.current; } 
	 EOF 
;

// Rule simple_stmt
rulesimple_stmt returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSimple_stmtAccess().getSmall_stmtParserRuleCall_0()); 
    }
    this_small_stmt_0=rulesmall_stmt
    { 
        $current = $this_small_stmt_0.current; 
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndAdd(
            grammarAccess.getSimple_stmtAccess().getSimple_stmtStmtAction_1_0(),
            $current);
    }
)(	otherlv_2=';' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getSimple_stmtAccess().getSemicolonKeyword_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSimple_stmtAccess().getStmtSmall_stmtParserRuleCall_1_1_1_0()); 
	    }
		lv_stmt_3_0=rulesmall_stmt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSimple_stmtRule());
	        }
       		add(
       			$current, 
       			"stmt",
        		lv_stmt_3_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.small_stmt");
	        afterParserOrEnumRuleCall();
	    }

)
))+(
(
		lv_additionalComma_4_0=	',' 
    {
        newLeafNode(lv_additionalComma_4_0, grammarAccess.getSimple_stmtAccess().getAdditionalCommaCommaKeyword_1_2_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSimple_stmtRule());
	        }
       		setWithLastConsumed($current, "additionalComma", true, ",");
	    }

)
)?)?(	otherlv_5=';' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getSimple_stmtAccess().getSemicolonKeyword_2());
    }
)?)
;





// Entry rule entryRulesmall_stmt
entryRulesmall_stmt returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSmall_stmtRule()); }
	 iv_rulesmall_stmt=rulesmall_stmt 
	 { $current=$iv_rulesmall_stmt.current; } 
	 EOF 
;

// Rule small_stmt
rulesmall_stmt returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSmall_stmtAccess().getExpr_stmtParserRuleCall_0()); 
    }
    this_expr_stmt_0=ruleexpr_stmt
    { 
        $current = $this_expr_stmt_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSmall_stmtAccess().getDel_stmtParserRuleCall_1()); 
    }
    this_del_stmt_1=ruledel_stmt
    { 
        $current = $this_del_stmt_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSmall_stmtAccess().getPass_stmtParserRuleCall_2()); 
    }
    this_pass_stmt_2=rulepass_stmt
    { 
        $current = $this_pass_stmt_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSmall_stmtAccess().getFlow_stmtParserRuleCall_3()); 
    }
    this_flow_stmt_3=ruleflow_stmt
    { 
        $current = $this_flow_stmt_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSmall_stmtAccess().getImport_stmtParserRuleCall_4()); 
    }
    this_import_stmt_4=ruleimport_stmt
    { 
        $current = $this_import_stmt_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSmall_stmtAccess().getGlobal_stmtParserRuleCall_5()); 
    }
    this_global_stmt_5=ruleglobal_stmt
    { 
        $current = $this_global_stmt_5.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSmall_stmtAccess().getExec_stmtParserRuleCall_6()); 
    }
    this_exec_stmt_6=ruleexec_stmt
    { 
        $current = $this_exec_stmt_6.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSmall_stmtAccess().getAssert_stmtParserRuleCall_7()); 
    }
    this_assert_stmt_7=ruleassert_stmt
    { 
        $current = $this_assert_stmt_7.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleexpr_stmt
entryRuleexpr_stmt returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpr_stmtRule()); }
	 iv_ruleexpr_stmt=ruleexpr_stmt 
	 { $current=$iv_ruleexpr_stmt.current; } 
	 EOF 
;

// Rule expr_stmt
ruleexpr_stmt returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getExpr_stmtAccess().getTestlistParserRuleCall_0()); 
    }
    this_testlist_0=ruletestlist
    { 
        $current = $this_testlist_0.current; 
        afterParserOrEnumRuleCall();
    }
(((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getExpr_stmtAccess().getExpr_stmtLeftAction_1_0_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExpr_stmtAccess().getSymbolAugassignParserRuleCall_1_0_1_0()); 
	    }
		lv_symbol_2_0=ruleaugassign		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpr_stmtRule());
	        }
       		set(
       			$current, 
       			"symbol",
        		lv_symbol_2_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.augassign");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExpr_stmtAccess().getRightYield_or_testlistParserRuleCall_1_0_2_0()); 
	    }
		lv_right_3_0=ruleyield_or_testlist		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpr_stmtRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.yield_or_testlist");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getExpr_stmtAccess().getAssignment_stmtLeftAction_1_1_0(),
            $current);
    }
)((
(
		lv_symbol_5_0=	'=' 
    {
        newLeafNode(lv_symbol_5_0, grammarAccess.getExpr_stmtAccess().getSymbolEqualsSignKeyword_1_1_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExpr_stmtRule());
	        }
       		setWithLastConsumed($current, "symbol", lv_symbol_5_0, "=");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExpr_stmtAccess().getAssignmentsYield_or_testlistParserRuleCall_1_1_1_1_0()); 
	    }
		lv_assignments_6_0=ruleyield_or_testlist		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpr_stmtRule());
	        }
       		add(
       			$current, 
       			"assignments",
        		lv_assignments_6_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.yield_or_testlist");
	        afterParserOrEnumRuleCall();
	    }

)
))+))?)
;





// Entry rule entryRuleyield_or_testlist
entryRuleyield_or_testlist returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getYield_or_testlistRule()); }
	 iv_ruleyield_or_testlist=ruleyield_or_testlist 
	 { $current=$iv_ruleyield_or_testlist.current; } 
	 EOF 
;

// Rule yield_or_testlist
ruleyield_or_testlist returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getYield_or_testlistAccess().getYield_exprParserRuleCall_0()); 
    }
    this_yield_expr_0=ruleyield_expr
    { 
        $current = $this_yield_expr_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getYield_or_testlistAccess().getTestlistParserRuleCall_1()); 
    }
    this_testlist_1=ruletestlist
    { 
        $current = $this_testlist_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleaugassign
entryRuleaugassign returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getAugassignRule()); } 
	 iv_ruleaugassign=ruleaugassign 
	 { $current=$iv_ruleaugassign.current.getText(); }  
	 EOF 
;

// Rule augassign
ruleaugassign returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	kw='+' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAugassignAccess().getPlusSignKeyword_0_0()); 
    }

	kw='=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAugassignAccess().getEqualsSignKeyword_0_1()); 
    }
)
    |
	kw='-=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAugassignAccess().getHyphenMinusEqualsSignKeyword_1()); 
    }

    |
	kw='*=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAugassignAccess().getAsteriskEqualsSignKeyword_2()); 
    }

    |
	kw='/=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAugassignAccess().getSolidusEqualsSignKeyword_3()); 
    }

    |
	kw='%=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAugassignAccess().getPercentSignEqualsSignKeyword_4()); 
    }

    |
	kw='&=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAugassignAccess().getAmpersandEqualsSignKeyword_5()); 
    }

    |
	kw='|=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAugassignAccess().getVerticalLineEqualsSignKeyword_6()); 
    }

    |
	kw='^=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAugassignAccess().getCircumflexAccentEqualsSignKeyword_7()); 
    }

    |
	kw='<<=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAugassignAccess().getLessThanSignLessThanSignEqualsSignKeyword_8()); 
    }

    |
	kw='>>=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAugassignAccess().getGreaterThanSignGreaterThanSignEqualsSignKeyword_9()); 
    }

    |
	kw='**=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAugassignAccess().getAsteriskAsteriskEqualsSignKeyword_10()); 
    }

    |
	kw='//=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAugassignAccess().getSolidusSolidusEqualsSignKeyword_11()); 
    }
)
    ;





// Entry rule entryRuledel_stmt
entryRuledel_stmt returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDel_stmtRule()); }
	 iv_ruledel_stmt=ruledel_stmt 
	 { $current=$iv_ruledel_stmt.current; } 
	 EOF 
;

// Rule del_stmt
ruledel_stmt returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='del' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getDel_stmtAccess().getDelKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDel_stmtAccess().getExprlistExprlistParserRuleCall_1_0()); 
	    }
		lv_exprlist_1_0=ruleexprlist		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDel_stmtRule());
	        }
       		set(
       			$current, 
       			"exprlist",
        		lv_exprlist_1_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.exprlist");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRulepass_stmt
entryRulepass_stmt returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPass_stmtRule()); }
	 iv_rulepass_stmt=rulepass_stmt 
	 { $current=$iv_rulepass_stmt.current; } 
	 EOF 
;

// Rule pass_stmt
rulepass_stmt returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getPass_stmtAccess().getPass_stmtAction_0(),
            $current);
    }
)	otherlv_1='pass' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getPass_stmtAccess().getPassKeyword_1());
    }
)
;





// Entry rule entryRuleflow_stmt
entryRuleflow_stmt returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFlow_stmtRule()); }
	 iv_ruleflow_stmt=ruleflow_stmt 
	 { $current=$iv_ruleflow_stmt.current; } 
	 EOF 
;

// Rule flow_stmt
ruleflow_stmt returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getFlow_stmtAccess().getBreak_stmtParserRuleCall_0()); 
    }
    this_break_stmt_0=rulebreak_stmt
    { 
        $current = $this_break_stmt_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getFlow_stmtAccess().getContinue_stmtParserRuleCall_1()); 
    }
    this_continue_stmt_1=rulecontinue_stmt
    { 
        $current = $this_continue_stmt_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getFlow_stmtAccess().getReturn_stmtParserRuleCall_2()); 
    }
    this_return_stmt_2=rulereturn_stmt
    { 
        $current = $this_return_stmt_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getFlow_stmtAccess().getRaise_stmtParserRuleCall_3()); 
    }
    this_raise_stmt_3=ruleraise_stmt
    { 
        $current = $this_raise_stmt_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getFlow_stmtAccess().getYield_stmtParserRuleCall_4()); 
    }
    this_yield_stmt_4=ruleyield_stmt
    { 
        $current = $this_yield_stmt_4.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRulebreak_stmt
entryRulebreak_stmt returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBreak_stmtRule()); }
	 iv_rulebreak_stmt=rulebreak_stmt 
	 { $current=$iv_rulebreak_stmt.current; } 
	 EOF 
;

// Rule break_stmt
rulebreak_stmt returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getBreak_stmtAccess().getBreak_stmtAction_0(),
            $current);
    }
)	otherlv_1='break' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getBreak_stmtAccess().getBreakKeyword_1());
    }
)
;





// Entry rule entryRulecontinue_stmt
entryRulecontinue_stmt returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getContinue_stmtRule()); }
	 iv_rulecontinue_stmt=rulecontinue_stmt 
	 { $current=$iv_rulecontinue_stmt.current; } 
	 EOF 
;

// Rule continue_stmt
rulecontinue_stmt returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getContinue_stmtAccess().getContinue_stmtAction_0(),
            $current);
    }
)	otherlv_1='continue' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getContinue_stmtAccess().getContinueKeyword_1());
    }
)
;





// Entry rule entryRulereturn_stmt
entryRulereturn_stmt returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getReturn_stmtRule()); }
	 iv_rulereturn_stmt=rulereturn_stmt 
	 { $current=$iv_rulereturn_stmt.current; } 
	 EOF 
;

// Rule return_stmt
rulereturn_stmt returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getReturn_stmtAccess().getReturn_stmtAction_0(),
            $current);
    }
)	otherlv_1='return' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getReturn_stmtAccess().getReturnKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getReturn_stmtAccess().getTestlistTestlistParserRuleCall_2_0()); 
	    }
		lv_testlist_2_0=ruletestlist		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getReturn_stmtRule());
	        }
       		set(
       			$current, 
       			"testlist",
        		lv_testlist_2_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.testlist");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleyield_stmt
entryRuleyield_stmt returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getYield_stmtRule()); }
	 iv_ruleyield_stmt=ruleyield_stmt 
	 { $current=$iv_ruleyield_stmt.current; } 
	 EOF 
;

// Rule yield_stmt
ruleyield_stmt returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getYield_stmtAccess().getYield_exprYield_exprParserRuleCall_0()); 
	    }
		lv_yield_expr_0_0=ruleyield_expr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getYield_stmtRule());
	        }
       		set(
       			$current, 
       			"yield_expr",
        		lv_yield_expr_0_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.yield_expr");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleraise_stmt
entryRuleraise_stmt returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRaise_stmtRule()); }
	 iv_ruleraise_stmt=ruleraise_stmt 
	 { $current=$iv_ruleraise_stmt.current; } 
	 EOF 
;

// Rule raise_stmt
ruleraise_stmt returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getRaise_stmtAccess().getRaise_stmtAction_0(),
            $current);
    }
)	otherlv_1='raise' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getRaise_stmtAccess().getRaiseKeyword_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getRaise_stmtAccess().getTestsTestParserRuleCall_2_0_0()); 
	    }
		lv_tests_2_0=ruletest		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRaise_stmtRule());
	        }
       		add(
       			$current, 
       			"tests",
        		lv_tests_2_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.test");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getRaise_stmtAccess().getCommaKeyword_2_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRaise_stmtAccess().getTestsTestParserRuleCall_2_1_1_0()); 
	    }
		lv_tests_4_0=ruletest		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRaise_stmtRule());
	        }
       		add(
       			$current, 
       			"tests",
        		lv_tests_4_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.test");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_5=',' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getRaise_stmtAccess().getCommaKeyword_2_1_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRaise_stmtAccess().getTestsTestParserRuleCall_2_1_2_1_0()); 
	    }
		lv_tests_6_0=ruletest		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRaise_stmtRule());
	        }
       		add(
       			$current, 
       			"tests",
        		lv_tests_6_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.test");
	        afterParserOrEnumRuleCall();
	    }

)
))?)?)?)
;





// Entry rule entryRuleimport_stmt
entryRuleimport_stmt returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getImport_stmtRule()); }
	 iv_ruleimport_stmt=ruleimport_stmt 
	 { $current=$iv_ruleimport_stmt.current; } 
	 EOF 
;

// Rule import_stmt
ruleimport_stmt returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getImport_stmtAccess().getImport_nameParserRuleCall_0()); 
    }
    this_import_name_0=ruleimport_name
    { 
        $current = $this_import_name_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getImport_stmtAccess().getImport_fromParserRuleCall_1()); 
    }
    this_import_from_1=ruleimport_from
    { 
        $current = $this_import_from_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleimport_name
entryRuleimport_name returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getImport_nameRule()); }
	 iv_ruleimport_name=ruleimport_name 
	 { $current=$iv_ruleimport_name.current; } 
	 EOF 
;

// Rule import_name
ruleimport_name returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='import' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getImport_nameAccess().getImportKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getImport_nameAccess().getDotted_as_namesDotted_as_namesParserRuleCall_1_0()); 
	    }
		lv_dotted_as_names_1_0=ruledotted_as_names		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getImport_nameRule());
	        }
       		set(
       			$current, 
       			"dotted_as_names",
        		lv_dotted_as_names_1_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.dotted_as_names");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleimport_from
entryRuleimport_from returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getImport_fromRule()); }
	 iv_ruleimport_from=ruleimport_from 
	 { $current=$iv_ruleimport_from.current; } 
	 EOF 
;

// Rule import_from
ruleimport_from returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='from' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getImport_fromAccess().getFromKeyword_0());
    }
(((
(
		lv_dots_1_0=	'.' 
    {
        newLeafNode(lv_dots_1_0, grammarAccess.getImport_fromAccess().getDotsFullStopKeyword_1_0_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getImport_fromRule());
	        }
       		addWithLastConsumed($current, "dots", lv_dots_1_0, ".");
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getImport_fromAccess().getDotted_nameDotted_nameParserRuleCall_1_0_1_0()); 
	    }
		lv_dotted_name_2_0=ruledotted_name		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getImport_fromRule());
	        }
       		set(
       			$current, 
       			"dotted_name",
        		lv_dotted_name_2_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.dotted_name");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(
(
		lv_dots2_3_0=	'.' 
    {
        newLeafNode(lv_dots2_3_0, grammarAccess.getImport_fromAccess().getDots2FullStopKeyword_1_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getImport_fromRule());
	        }
       		addWithLastConsumed($current, "dots2", lv_dots2_3_0, ".");
	    }

)
)+)	otherlv_4='import' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getImport_fromAccess().getImportKeyword_2());
    }
(	otherlv_5='*' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getImport_fromAccess().getAsteriskKeyword_3_0());
    }

    |((
(
		lv_roundBracket_6_0=	'(' 
    {
        newLeafNode(lv_roundBracket_6_0, grammarAccess.getImport_fromAccess().getRoundBracketLeftParenthesisKeyword_3_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getImport_fromRule());
	        }
       		setWithLastConsumed($current, "roundBracket", true, "(");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getImport_fromAccess().getImport_as_namesImport_as_namesParserRuleCall_3_1_1_0()); 
	    }
		lv_import_as_names_7_0=ruleimport_as_names		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getImport_fromRule());
	        }
       		set(
       			$current, 
       			"import_as_names",
        		lv_import_as_names_7_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.import_as_names");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_8=')' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getImport_fromAccess().getRightParenthesisKeyword_3_1_2());
    }
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getImport_fromAccess().getImport_as_namesImport_as_namesParserRuleCall_3_2_0()); 
	    }
		lv_import_as_names_9_0=ruleimport_as_names		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getImport_fromRule());
	        }
       		set(
       			$current, 
       			"import_as_names",
        		lv_import_as_names_9_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.import_as_names");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRuleimport_as_name
entryRuleimport_as_name returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getImport_as_nameRule()); }
	 iv_ruleimport_as_name=ruleimport_as_name 
	 { $current=$iv_ruleimport_as_name.current; } 
	 EOF 
;

// Rule import_as_name
ruleimport_as_name returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getImport_as_nameAccess().getNameNAMEParserRuleCall_0_0()); 
	    }
		lv_name_0_0=ruleNAME		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getImport_as_nameRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.NAME");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1='as' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getImport_as_nameAccess().getAsKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getImport_as_nameAccess().getIdentifierNAMEParserRuleCall_1_1_0()); 
	    }
		lv_identifier_2_0=ruleNAME		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getImport_as_nameRule());
	        }
       		set(
       			$current, 
       			"identifier",
        		lv_identifier_2_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.NAME");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuledotted_as_name
entryRuledotted_as_name returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDotted_as_nameRule()); }
	 iv_ruledotted_as_name=ruledotted_as_name 
	 { $current=$iv_ruledotted_as_name.current; } 
	 EOF 
;

// Rule dotted_as_name
ruledotted_as_name returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getDotted_as_nameAccess().getNameDotted_nameParserRuleCall_0_0()); 
	    }
		lv_name_0_0=ruledotted_name		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDotted_as_nameRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.dotted_name");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1='as' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getDotted_as_nameAccess().getAsKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDotted_as_nameAccess().getIdentifierNAMEParserRuleCall_1_1_0()); 
	    }
		lv_identifier_2_0=ruleNAME		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDotted_as_nameRule());
	        }
       		set(
       			$current, 
       			"identifier",
        		lv_identifier_2_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.NAME");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleimport_as_names
entryRuleimport_as_names returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getImport_as_namesRule()); }
	 iv_ruleimport_as_names=ruleimport_as_names 
	 { $current=$iv_ruleimport_as_names.current; } 
	 EOF 
;

// Rule import_as_names
ruleimport_as_names returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getImport_as_namesAccess().getImportsImport_as_nameParserRuleCall_0_0()); 
	    }
		lv_imports_0_0=ruleimport_as_name		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getImport_as_namesRule());
	        }
       		add(
       			$current, 
       			"imports",
        		lv_imports_0_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.import_as_name");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getImport_as_namesAccess().getCommaKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getImport_as_namesAccess().getImportsImport_as_nameParserRuleCall_1_1_0()); 
	    }
		lv_imports_2_0=ruleimport_as_name		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getImport_as_namesRule());
	        }
       		add(
       			$current, 
       			"imports",
        		lv_imports_2_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.import_as_name");
	        afterParserOrEnumRuleCall();
	    }

)
))*(
(
		lv_optionalComma_3_0=	',' 
    {
        newLeafNode(lv_optionalComma_3_0, grammarAccess.getImport_as_namesAccess().getOptionalCommaCommaKeyword_2_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getImport_as_namesRule());
	        }
       		setWithLastConsumed($current, "optionalComma", true, ",");
	    }

)
)?)
;





// Entry rule entryRuledotted_as_names
entryRuledotted_as_names returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDotted_as_namesRule()); }
	 iv_ruledotted_as_names=ruledotted_as_names 
	 { $current=$iv_ruledotted_as_names.current; } 
	 EOF 
;

// Rule dotted_as_names
ruledotted_as_names returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getDotted_as_namesAccess().getDotted_namesDotted_as_nameParserRuleCall_0_0()); 
	    }
		lv_dotted_names_0_0=ruledotted_as_name		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDotted_as_namesRule());
	        }
       		add(
       			$current, 
       			"dotted_names",
        		lv_dotted_names_0_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.dotted_as_name");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getDotted_as_namesAccess().getCommaKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDotted_as_namesAccess().getDotted_namesDotted_as_nameParserRuleCall_1_1_0()); 
	    }
		lv_dotted_names_2_0=ruledotted_as_name		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDotted_as_namesRule());
	        }
       		add(
       			$current, 
       			"dotted_names",
        		lv_dotted_names_2_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.dotted_as_name");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuledotted_name
entryRuledotted_name returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getDotted_nameRule()); } 
	 iv_ruledotted_name=ruledotted_name 
	 { $current=$iv_ruledotted_name.current.getText(); }  
	 EOF 
;

// Rule dotted_name
ruledotted_name returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getDotted_nameAccess().getNAMEParserRuleCall_0()); 
    }
    this_NAME_0=ruleNAME    {
		$current.merge(this_NAME_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDotted_nameAccess().getFullStopKeyword_1_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getDotted_nameAccess().getNAMEParserRuleCall_1_1()); 
    }
    this_NAME_2=ruleNAME    {
		$current.merge(this_NAME_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*)
    ;





// Entry rule entryRuleglobal_stmt
entryRuleglobal_stmt returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGlobal_stmtRule()); }
	 iv_ruleglobal_stmt=ruleglobal_stmt 
	 { $current=$iv_ruleglobal_stmt.current; } 
	 EOF 
;

// Rule global_stmt
ruleglobal_stmt returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='global' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getGlobal_stmtAccess().getGlobalKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getGlobal_stmtAccess().getGlobalsNAMEParserRuleCall_1_0()); 
	    }
		lv_globals_1_0=ruleNAME		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGlobal_stmtRule());
	        }
       		add(
       			$current, 
       			"globals",
        		lv_globals_1_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.NAME");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getGlobal_stmtAccess().getCommaKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getGlobal_stmtAccess().getGlobalsNAMEParserRuleCall_2_1_0()); 
	    }
		lv_globals_3_0=ruleNAME		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGlobal_stmtRule());
	        }
       		add(
       			$current, 
       			"globals",
        		lv_globals_3_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.NAME");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleexec_stmt
entryRuleexec_stmt returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExec_stmtRule()); }
	 iv_ruleexec_stmt=ruleexec_stmt 
	 { $current=$iv_ruleexec_stmt.current; } 
	 EOF 
;

// Rule exec_stmt
ruleexec_stmt returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='exec' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getExec_stmtAccess().getExecKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExec_stmtAccess().getExprExprParserRuleCall_1_0()); 
	    }
		lv_expr_1_0=ruleexpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExec_stmtRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_1_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.expr");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2='in' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getExec_stmtAccess().getInKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExec_stmtAccess().getTestsTestParserRuleCall_2_1_0()); 
	    }
		lv_tests_3_0=ruletest		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExec_stmtRule());
	        }
       		add(
       			$current, 
       			"tests",
        		lv_tests_3_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.test");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getExec_stmtAccess().getCommaKeyword_2_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExec_stmtAccess().getTestsTestParserRuleCall_2_2_1_0()); 
	    }
		lv_tests_5_0=ruletest		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExec_stmtRule());
	        }
       		add(
       			$current, 
       			"tests",
        		lv_tests_5_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.test");
	        afterParserOrEnumRuleCall();
	    }

)
))?)?)
;





// Entry rule entryRuleassert_stmt
entryRuleassert_stmt returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAssert_stmtRule()); }
	 iv_ruleassert_stmt=ruleassert_stmt 
	 { $current=$iv_ruleassert_stmt.current; } 
	 EOF 
;

// Rule assert_stmt
ruleassert_stmt returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='assert' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getAssert_stmtAccess().getAssertKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAssert_stmtAccess().getAssersTestParserRuleCall_1_0()); 
	    }
		lv_assers_1_0=ruletest		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssert_stmtRule());
	        }
       		add(
       			$current, 
       			"assers",
        		lv_assers_1_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.test");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAssert_stmtAccess().getCommaKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAssert_stmtAccess().getAssersTestParserRuleCall_2_1_0()); 
	    }
		lv_assers_3_0=ruletest		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssert_stmtRule());
	        }
       		add(
       			$current, 
       			"assers",
        		lv_assers_3_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.test");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRulecompound_stmt
entryRulecompound_stmt returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCompound_stmtRule()); }
	 iv_rulecompound_stmt=rulecompound_stmt 
	 { $current=$iv_rulecompound_stmt.current; } 
	 EOF 
;

// Rule compound_stmt
rulecompound_stmt returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getCompound_stmtAccess().getIf_stmtParserRuleCall_0()); 
    }
    this_if_stmt_0=ruleif_stmt
    { 
        $current = $this_if_stmt_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getCompound_stmtAccess().getWhile_stmtParserRuleCall_1()); 
    }
    this_while_stmt_1=rulewhile_stmt
    { 
        $current = $this_while_stmt_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getCompound_stmtAccess().getFor_stmtParserRuleCall_2()); 
    }
    this_for_stmt_2=rulefor_stmt
    { 
        $current = $this_for_stmt_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getCompound_stmtAccess().getTry_stmtParserRuleCall_3()); 
    }
    this_try_stmt_3=ruletry_stmt
    { 
        $current = $this_try_stmt_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getCompound_stmtAccess().getWith_stmtParserRuleCall_4()); 
    }
    this_with_stmt_4=rulewith_stmt
    { 
        $current = $this_with_stmt_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getCompound_stmtAccess().getFuncdefParserRuleCall_5()); 
    }
    this_funcdef_5=rulefuncdef
    { 
        $current = $this_funcdef_5.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getCompound_stmtAccess().getClassdefParserRuleCall_6()); 
    }
    this_classdef_6=ruleclassdef
    { 
        $current = $this_classdef_6.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getCompound_stmtAccess().getDecoratedParserRuleCall_7()); 
    }
    this_decorated_7=ruledecorated
    { 
        $current = $this_decorated_7.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleelse_if_stmt
entryRuleelse_if_stmt returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getElse_if_stmtRule()); }
	 iv_ruleelse_if_stmt=ruleelse_if_stmt 
	 { $current=$iv_ruleelse_if_stmt.current; } 
	 EOF 
;

// Rule else_if_stmt
ruleelse_if_stmt returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='elif' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getElse_if_stmtAccess().getElifKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getElse_if_stmtAccess().getTestTestParserRuleCall_1_0()); 
	    }
		lv_test_1_0=ruletest		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getElse_if_stmtRule());
	        }
       		set(
       			$current, 
       			"test",
        		lv_test_1_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.test");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=':' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getElse_if_stmtAccess().getColonKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getElse_if_stmtAccess().getSuiteSuiteParserRuleCall_3_0()); 
	    }
		lv_suite_3_0=rulesuite		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getElse_if_stmtRule());
	        }
       		set(
       			$current, 
       			"suite",
        		lv_suite_3_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.suite");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleif_stmt
entryRuleif_stmt returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIf_stmtRule()); }
	 iv_ruleif_stmt=ruleif_stmt 
	 { $current=$iv_ruleif_stmt.current; } 
	 EOF 
;

// Rule if_stmt
ruleif_stmt returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='if' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getIf_stmtAccess().getIfKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIf_stmtAccess().getTestTestParserRuleCall_1_0()); 
	    }
		lv_test_1_0=ruletest		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIf_stmtRule());
	        }
       		set(
       			$current, 
       			"test",
        		lv_test_1_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.test");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=':' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getIf_stmtAccess().getColonKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIf_stmtAccess().getSuiteSuiteParserRuleCall_3_0()); 
	    }
		lv_suite_3_0=rulesuite		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIf_stmtRule());
	        }
       		set(
       			$current, 
       			"suite",
        		lv_suite_3_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.suite");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getIf_stmtAccess().getElse_if_stmtsElse_if_stmtParserRuleCall_4_0()); 
	    }
		lv_else_if_stmts_4_0=ruleelse_if_stmt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIf_stmtRule());
	        }
       		add(
       			$current, 
       			"else_if_stmts",
        		lv_else_if_stmts_4_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.else_if_stmt");
	        afterParserOrEnumRuleCall();
	    }

)
)*(	otherlv_5='else' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getIf_stmtAccess().getElseKeyword_5_0());
    }
	otherlv_6=':' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getIf_stmtAccess().getColonKeyword_5_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIf_stmtAccess().getElseSuiteParserRuleCall_5_2_0()); 
	    }
		lv_else_7_0=rulesuite		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIf_stmtRule());
	        }
       		set(
       			$current, 
       			"else",
        		lv_else_7_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.suite");
	        afterParserOrEnumRuleCall();
	    }

)
))?this_ENDIF_8=RULE_ENDIF
    { 
    newLeafNode(this_ENDIF_8, grammarAccess.getIf_stmtAccess().getENDIFTerminalRuleCall_6()); 
    }
)
;





// Entry rule entryRulewhile_stmt
entryRulewhile_stmt returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getWhile_stmtRule()); }
	 iv_rulewhile_stmt=rulewhile_stmt 
	 { $current=$iv_rulewhile_stmt.current; } 
	 EOF 
;

// Rule while_stmt
rulewhile_stmt returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='while' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getWhile_stmtAccess().getWhileKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getWhile_stmtAccess().getTestTestParserRuleCall_1_0()); 
	    }
		lv_test_1_0=ruletest		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getWhile_stmtRule());
	        }
       		set(
       			$current, 
       			"test",
        		lv_test_1_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.test");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=':' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getWhile_stmtAccess().getColonKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getWhile_stmtAccess().getSuiteSuiteParserRuleCall_3_0()); 
	    }
		lv_suite_3_0=rulesuite		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getWhile_stmtRule());
	        }
       		set(
       			$current, 
       			"suite",
        		lv_suite_3_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.suite");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4='else' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getWhile_stmtAccess().getElseKeyword_4_0());
    }
	otherlv_5=':' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getWhile_stmtAccess().getColonKeyword_4_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getWhile_stmtAccess().getElseSuiteParserRuleCall_4_2_0()); 
	    }
		lv_else_6_0=rulesuite		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getWhile_stmtRule());
	        }
       		set(
       			$current, 
       			"else",
        		lv_else_6_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.suite");
	        afterParserOrEnumRuleCall();
	    }

)
))?this_ENDWHILE_7=RULE_ENDWHILE
    { 
    newLeafNode(this_ENDWHILE_7, grammarAccess.getWhile_stmtAccess().getENDWHILETerminalRuleCall_5()); 
    }
)
;





// Entry rule entryRulefor_stmt
entryRulefor_stmt returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFor_stmtRule()); }
	 iv_rulefor_stmt=rulefor_stmt 
	 { $current=$iv_rulefor_stmt.current; } 
	 EOF 
;

// Rule for_stmt
rulefor_stmt returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='for' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFor_stmtAccess().getForKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFor_stmtAccess().getExprlistExprlistParserRuleCall_1_0()); 
	    }
		lv_exprlist_1_0=ruleexprlist		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFor_stmtRule());
	        }
       		set(
       			$current, 
       			"exprlist",
        		lv_exprlist_1_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.exprlist");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='in' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getFor_stmtAccess().getInKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFor_stmtAccess().getTestlistTestlistParserRuleCall_3_0()); 
	    }
		lv_testlist_3_0=ruletestlist		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFor_stmtRule());
	        }
       		set(
       			$current, 
       			"testlist",
        		lv_testlist_3_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.testlist");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=':' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getFor_stmtAccess().getColonKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFor_stmtAccess().getSuiteSuiteParserRuleCall_5_0()); 
	    }
		lv_suite_5_0=rulesuite		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFor_stmtRule());
	        }
       		set(
       			$current, 
       			"suite",
        		lv_suite_5_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.suite");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_6='else' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getFor_stmtAccess().getElseKeyword_6_0());
    }
	otherlv_7=':' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getFor_stmtAccess().getColonKeyword_6_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFor_stmtAccess().getElseSuiteParserRuleCall_6_2_0()); 
	    }
		lv_else_8_0=rulesuite		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFor_stmtRule());
	        }
       		set(
       			$current, 
       			"else",
        		lv_else_8_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.suite");
	        afterParserOrEnumRuleCall();
	    }

)
))?(this_ENDFOR_9=RULE_ENDFOR
    { 
    newLeafNode(this_ENDFOR_9, grammarAccess.getFor_stmtAccess().getENDFORTerminalRuleCall_7_0()); 
    }

    |this_ENDIF_10=RULE_ENDIF
    { 
    newLeafNode(this_ENDIF_10, grammarAccess.getFor_stmtAccess().getENDIFTerminalRuleCall_7_1()); 
    }
))
;





// Entry rule entryRuletry_stmt
entryRuletry_stmt returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTry_stmtRule()); }
	 iv_ruletry_stmt=ruletry_stmt 
	 { $current=$iv_ruletry_stmt.current; } 
	 EOF 
;

// Rule try_stmt
ruletry_stmt returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='try' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTry_stmtAccess().getTryKeyword_0_0());
    }
	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTry_stmtAccess().getColonKeyword_0_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTry_stmtAccess().getSuiteSuiteParserRuleCall_0_2_0()); 
	    }
		lv_suite_2_0=rulesuite		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTry_stmtRule());
	        }
       		set(
       			$current, 
       			"suite",
        		lv_suite_2_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.suite");
	        afterParserOrEnumRuleCall();
	    }

)
)(this_ENDTRY_3=RULE_ENDTRY
    { 
    newLeafNode(this_ENDTRY_3, grammarAccess.getTry_stmtAccess().getENDTRYTerminalRuleCall_0_3()); 
    }
)?(((
(
		{ 
	        newCompositeNode(grammarAccess.getTry_stmtAccess().getExcept_clauseExcept_clauseParserRuleCall_0_4_0_0_0()); 
	    }
		lv_except_clause_4_0=ruleexcept_clause		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTry_stmtRule());
	        }
       		add(
       			$current, 
       			"except_clause",
        		lv_except_clause_4_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.except_clause");
	        afterParserOrEnumRuleCall();
	    }

)
)+(	otherlv_5='else' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getTry_stmtAccess().getElseKeyword_0_4_0_1_0());
    }
	otherlv_6=':' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getTry_stmtAccess().getColonKeyword_0_4_0_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTry_stmtAccess().getElseSuiteParserRuleCall_0_4_0_1_2_0()); 
	    }
		lv_else_7_0=rulesuite		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTry_stmtRule());
	        }
       		set(
       			$current, 
       			"else",
        		lv_else_7_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.suite");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_8='finally' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getTry_stmtAccess().getFinallyKeyword_0_4_0_2_0());
    }
	otherlv_9=':' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getTry_stmtAccess().getColonKeyword_0_4_0_2_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTry_stmtAccess().getFinallySuiteParserRuleCall_0_4_0_2_2_0()); 
	    }
		lv_finally_10_0=rulesuite		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTry_stmtRule());
	        }
       		set(
       			$current, 
       			"finally",
        		lv_finally_10_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.suite");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
    |(	otherlv_11='finally' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getTry_stmtAccess().getFinallyKeyword_0_4_1_0());
    }
	otherlv_12=':' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getTry_stmtAccess().getColonKeyword_0_4_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTry_stmtAccess().getFinallySuiteParserRuleCall_0_4_1_2_0()); 
	    }
		lv_finally_13_0=rulesuite		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTry_stmtRule());
	        }
       		set(
       			$current, 
       			"finally",
        		lv_finally_13_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.suite");
	        afterParserOrEnumRuleCall();
	    }

)
))))this_ENDTRY_14=RULE_ENDTRY
    { 
    newLeafNode(this_ENDTRY_14, grammarAccess.getTry_stmtAccess().getENDTRYTerminalRuleCall_1()); 
    }
)
;





// Entry rule entryRulewith_stmt
entryRulewith_stmt returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getWith_stmtRule()); }
	 iv_rulewith_stmt=rulewith_stmt 
	 { $current=$iv_rulewith_stmt.current; } 
	 EOF 
;

// Rule with_stmt
rulewith_stmt returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='with' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getWith_stmtAccess().getWithKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getWith_stmtAccess().getWith_itemWith_itemParserRuleCall_1_0()); 
	    }
		lv_with_item_1_0=rulewith_item		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getWith_stmtRule());
	        }
       		add(
       			$current, 
       			"with_item",
        		lv_with_item_1_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.with_item");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getWith_stmtAccess().getCommaKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getWith_stmtAccess().getWith_itemWith_itemParserRuleCall_2_1_0()); 
	    }
		lv_with_item_3_0=rulewith_item		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getWith_stmtRule());
	        }
       		add(
       			$current, 
       			"with_item",
        		lv_with_item_3_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.with_item");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_4=':' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getWith_stmtAccess().getColonKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getWith_stmtAccess().getSuiteSuiteParserRuleCall_4_0()); 
	    }
		lv_suite_5_0=rulesuite		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getWith_stmtRule());
	        }
       		set(
       			$current, 
       			"suite",
        		lv_suite_5_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.suite");
	        afterParserOrEnumRuleCall();
	    }

)
)this_ENDWITH_6=RULE_ENDWITH
    { 
    newLeafNode(this_ENDWITH_6, grammarAccess.getWith_stmtAccess().getENDWITHTerminalRuleCall_5()); 
    }
)
;





// Entry rule entryRulewith_item
entryRulewith_item returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getWith_itemRule()); }
	 iv_rulewith_item=rulewith_item 
	 { $current=$iv_rulewith_item.current; } 
	 EOF 
;

// Rule with_item
rulewith_item returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getWith_itemAccess().getTestTestParserRuleCall_0_0()); 
	    }
		lv_test_0_0=ruletest		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getWith_itemRule());
	        }
       		set(
       			$current, 
       			"test",
        		lv_test_0_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.test");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1='as' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getWith_itemAccess().getAsKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getWith_itemAccess().getExprExprParserRuleCall_1_1_0()); 
	    }
		lv_expr_2_0=ruleexpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getWith_itemRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_2_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.expr");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleexcept_clause
entryRuleexcept_clause returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExcept_clauseRule()); }
	 iv_ruleexcept_clause=ruleexcept_clause 
	 { $current=$iv_ruleexcept_clause.current; } 
	 EOF 
;

// Rule except_clause
ruleexcept_clause returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='except' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getExcept_clauseAccess().getExceptKeyword_0());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getExcept_clauseAccess().getTestTestParserRuleCall_1_0_0()); 
	    }
		lv_test_1_0=ruletest		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExcept_clauseRule());
	        }
       		set(
       			$current, 
       			"test",
        		lv_test_1_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.test");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
(
		lv_sign_2_1=	'as' 
    {
        newLeafNode(lv_sign_2_1, grammarAccess.getExcept_clauseAccess().getSignAsKeyword_1_1_0_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExcept_clauseRule());
	        }
       		setWithLastConsumed($current, "sign", lv_sign_2_1, null);
	    }

    |		lv_sign_2_2=	',' 
    {
        newLeafNode(lv_sign_2_2, grammarAccess.getExcept_clauseAccess().getSignCommaKeyword_1_1_0_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExcept_clauseRule());
	        }
       		setWithLastConsumed($current, "sign", lv_sign_2_2, null);
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExcept_clauseAccess().getNext_testTestParserRuleCall_1_1_1_0()); 
	    }
		lv_next_test_3_0=ruletest		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExcept_clauseRule());
	        }
       		set(
       			$current, 
       			"next_test",
        		lv_next_test_3_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.test");
	        afterParserOrEnumRuleCall();
	    }

)
))?)?	otherlv_4=':' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getExcept_clauseAccess().getColonKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExcept_clauseAccess().getSuiteSuiteParserRuleCall_3_0()); 
	    }
		lv_suite_5_0=rulesuite		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExcept_clauseRule());
	        }
       		set(
       			$current, 
       			"suite",
        		lv_suite_5_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.suite");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRulesuite
entryRulesuite returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSuiteRule()); }
	 iv_rulesuite=rulesuite 
	 { $current=$iv_rulesuite.current; } 
	 EOF 
;

// Rule suite
rulesuite returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
rulestmt
)
)=>
(
		{ 
	        newCompositeNode(grammarAccess.getSuiteAccess().getStmtsStmtParserRuleCall_0()); 
	    }
		lv_stmts_0_0=rulestmt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSuiteRule());
	        }
       		add(
       			$current, 
       			"stmts",
        		lv_stmts_0_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.stmt");
	        afterParserOrEnumRuleCall();
	    }

)
)+
;





// Entry rule entryRuletestlist_safe
entryRuletestlist_safe returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTestlist_safeRule()); }
	 iv_ruletestlist_safe=ruletestlist_safe 
	 { $current=$iv_ruletestlist_safe.current; } 
	 EOF 
;

// Rule testlist_safe
ruletestlist_safe returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getTestlist_safeAccess().getOld_testTestParserRuleCall_0_0()); 
	    }
		lv_old_test_0_0=ruletest		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTestlist_safeRule());
	        }
       		add(
       			$current, 
       			"old_test",
        		lv_old_test_0_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.test");
	        afterParserOrEnumRuleCall();
	    }

)
)((	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTestlist_safeAccess().getCommaKeyword_1_0_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTestlist_safeAccess().getOld_testTestParserRuleCall_1_0_1_0()); 
	    }
		lv_old_test_2_0=ruletest		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTestlist_safeRule());
	        }
       		add(
       			$current, 
       			"old_test",
        		lv_old_test_2_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.test");
	        afterParserOrEnumRuleCall();
	    }

)
))+(
(
		lv_optionalComa_3_0=	',' 
    {
        newLeafNode(lv_optionalComa_3_0, grammarAccess.getTestlist_safeAccess().getOptionalComaCommaKeyword_1_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTestlist_safeRule());
	        }
       		setWithLastConsumed($current, "optionalComa", true, ",");
	    }

)
)?)?)
;





// Entry rule entryRuletest
entryRuletest returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTestRule()); }
	 iv_ruletest=ruletest 
	 { $current=$iv_ruletest.current; } 
	 EOF 
;

// Rule test
ruletest returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getTestAccess().getOr_testParserRuleCall_0_0()); 
    }
    this_or_test_0=ruleor_test
    { 
        $current = $this_or_test_0.current; 
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getTestAccess().getTestLeftAction_0_1_0(),
            $current);
    }
)	otherlv_2='if' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTestAccess().getIfKeyword_0_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTestAccess().getIf_testOr_testParserRuleCall_0_1_2_0()); 
	    }
		lv_if_test_3_0=ruleor_test		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTestRule());
	        }
       		set(
       			$current, 
       			"if_test",
        		lv_if_test_3_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.or_test");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4='else' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getTestAccess().getElseKeyword_0_1_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTestAccess().getIf_else_testTestParserRuleCall_0_1_4_0()); 
	    }
		lv_if_else_test_5_0=ruletest		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTestRule());
	        }
       		set(
       			$current, 
       			"if_else_test",
        		lv_if_else_test_5_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.test");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getTestAccess().getLambdefParserRuleCall_1()); 
    }
    this_lambdef_6=rulelambdef
    { 
        $current = $this_lambdef_6.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleor_test
entryRuleor_test returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOr_testRule()); }
	 iv_ruleor_test=ruleor_test 
	 { $current=$iv_ruleor_test.current; } 
	 EOF 
;

// Rule or_test
ruleor_test returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getOr_testAccess().getAnd_testParserRuleCall_0()); 
    }
    this_and_test_0=ruleand_test
    { 
        $current = $this_and_test_0.current; 
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getOr_testAccess().getOr_testLeftAction_1_0(),
            $current);
    }
)(
(
		lv_sign_2_0=	'or' 
    {
        newLeafNode(lv_sign_2_0, grammarAccess.getOr_testAccess().getSignOrKeyword_1_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getOr_testRule());
	        }
       		setWithLastConsumed($current, "sign", lv_sign_2_0, "or");
	    }

)
)(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getOr_testAccess().getNLParserRuleCall_1_2()); 
    }
ruleNL
    { 
        afterParserOrEnumRuleCall();
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getOr_testAccess().getRightAnd_testParserRuleCall_1_3_0()); 
	    }
		lv_right_4_0=ruleand_test		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOr_testRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_4_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.and_test");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleand_test
entryRuleand_test returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAnd_testRule()); }
	 iv_ruleand_test=ruleand_test 
	 { $current=$iv_ruleand_test.current; } 
	 EOF 
;

// Rule and_test
ruleand_test returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAnd_testAccess().getNot_testParserRuleCall_0()); 
    }
    this_not_test_0=rulenot_test
    { 
        $current = $this_not_test_0.current; 
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAnd_testAccess().getAnd_testLeftAction_1_0(),
            $current);
    }
)(
(
		lv_sign_2_0=	'and' 
    {
        newLeafNode(lv_sign_2_0, grammarAccess.getAnd_testAccess().getSignAndKeyword_1_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAnd_testRule());
	        }
       		setWithLastConsumed($current, "sign", lv_sign_2_0, "and");
	    }

)
)(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAnd_testAccess().getNLParserRuleCall_1_2()); 
    }
ruleNL
    { 
        afterParserOrEnumRuleCall();
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getAnd_testAccess().getRightNot_testParserRuleCall_1_3_0()); 
	    }
		lv_right_4_0=rulenot_test		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAnd_testRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_4_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.not_test");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRulenot_test
entryRulenot_test returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNot_testRule()); }
	 iv_rulenot_test=rulenot_test 
	 { $current=$iv_rulenot_test.current; } 
	 EOF 
;

// Rule not_test
rulenot_test returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		lv_not_0_0=	'not' 
    {
        newLeafNode(lv_not_0_0, grammarAccess.getNot_testAccess().getNotNotKeyword_0_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNot_testRule());
	        }
       		addWithLastConsumed($current, "not", lv_not_0_0, "not");
	    }

)
)+(
(
		{ 
	        newCompositeNode(grammarAccess.getNot_testAccess().getComparisonComparisonParserRuleCall_0_1_0()); 
	    }
		lv_comparison_1_0=rulecomparison		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNot_testRule());
	        }
       		set(
       			$current, 
       			"comparison",
        		lv_comparison_1_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.comparison");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getNot_testAccess().getComparisonParserRuleCall_1()); 
    }
    this_comparison_2=rulecomparison
    { 
        $current = $this_comparison_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRulecomparison
entryRulecomparison returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getComparisonRule()); }
	 iv_rulecomparison=rulecomparison 
	 { $current=$iv_rulecomparison.current; } 
	 EOF 
;

// Rule comparison
rulecomparison returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getComparisonAccess().getExprParserRuleCall_0()); 
    }
    this_expr_0=ruleexpr
    { 
        $current = $this_expr_0.current; 
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getComparisonAccess().getComparisonLeftAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getComparisonAccess().getComp_opComp_opParserRuleCall_1_1_0()); 
	    }
		lv_comp_op_2_0=rulecomp_op		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getComparisonRule());
	        }
       		set(
       			$current, 
       			"comp_op",
        		lv_comp_op_2_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.comp_op");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getComparisonAccess().getRightExprParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleexpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getComparisonRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.expr");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRulecomp_op
entryRulecomp_op returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getComp_opRule()); } 
	 iv_rulecomp_op=rulecomp_op 
	 { $current=$iv_rulecomp_op.current.getText(); }  
	 EOF 
;

// Rule comp_op
rulecomp_op returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='<' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getComp_opAccess().getLessThanSignKeyword_0()); 
    }

    |
	kw='>' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getComp_opAccess().getGreaterThanSignKeyword_1()); 
    }

    |
	kw='==' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getComp_opAccess().getEqualsSignEqualsSignKeyword_2()); 
    }

    |
	kw='>=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getComp_opAccess().getGreaterThanSignEqualsSignKeyword_3()); 
    }

    |
	kw='<=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getComp_opAccess().getLessThanSignEqualsSignKeyword_4()); 
    }

    |
	kw='<>' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getComp_opAccess().getLessThanSignGreaterThanSignKeyword_5()); 
    }

    |
	kw='!=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getComp_opAccess().getExclamationMarkEqualsSignKeyword_6()); 
    }

    |
	kw='in' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getComp_opAccess().getInKeyword_7()); 
    }

    |(
	kw='not' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getComp_opAccess().getNotKeyword_8_0()); 
    }

	kw='in' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getComp_opAccess().getInKeyword_8_1()); 
    }
)
    |
	kw='is' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getComp_opAccess().getIsKeyword_9()); 
    }

    |(
	kw='is' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getComp_opAccess().getIsKeyword_10_0()); 
    }

	kw='not' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getComp_opAccess().getNotKeyword_10_1()); 
    }
))
    ;





// Entry rule entryRuleexpr
entryRuleexpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExprRule()); }
	 iv_ruleexpr=ruleexpr 
	 { $current=$iv_ruleexpr.current; } 
	 EOF 
;

// Rule expr
ruleexpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getExprAccess().getXor_exprParserRuleCall_0()); 
    }
    this_xor_expr_0=rulexor_expr
    { 
        $current = $this_xor_expr_0.current; 
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getExprAccess().getExprLeftAction_1_0(),
            $current);
    }
)(
(
		lv_sign_2_0=	'|' 
    {
        newLeafNode(lv_sign_2_0, grammarAccess.getExprAccess().getSignVerticalLineKeyword_1_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExprRule());
	        }
       		setWithLastConsumed($current, "sign", lv_sign_2_0, "|");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExprAccess().getRightXor_exprParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=rulexor_expr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExprRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.xor_expr");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRulexor_expr
entryRulexor_expr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getXor_exprRule()); }
	 iv_rulexor_expr=rulexor_expr 
	 { $current=$iv_rulexor_expr.current; } 
	 EOF 
;

// Rule xor_expr
rulexor_expr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getXor_exprAccess().getAnd_exprParserRuleCall_0()); 
    }
    this_and_expr_0=ruleand_expr
    { 
        $current = $this_and_expr_0.current; 
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getXor_exprAccess().getXor_exprLeftAction_1_0(),
            $current);
    }
)(
(
		lv_sign_2_0=	'^' 
    {
        newLeafNode(lv_sign_2_0, grammarAccess.getXor_exprAccess().getSignCircumflexAccentKeyword_1_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getXor_exprRule());
	        }
       		setWithLastConsumed($current, "sign", lv_sign_2_0, "^");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getXor_exprAccess().getRightAnd_exprParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleand_expr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXor_exprRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.and_expr");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleand_expr
entryRuleand_expr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAnd_exprRule()); }
	 iv_ruleand_expr=ruleand_expr 
	 { $current=$iv_ruleand_expr.current; } 
	 EOF 
;

// Rule and_expr
ruleand_expr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAnd_exprAccess().getShift_exprParserRuleCall_0()); 
    }
    this_shift_expr_0=ruleshift_expr
    { 
        $current = $this_shift_expr_0.current; 
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAnd_exprAccess().getAnd_exprLeftAction_1_0(),
            $current);
    }
)(
(
		lv_sign_2_0=	'&' 
    {
        newLeafNode(lv_sign_2_0, grammarAccess.getAnd_exprAccess().getSignAmpersandKeyword_1_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAnd_exprRule());
	        }
       		setWithLastConsumed($current, "sign", lv_sign_2_0, "&");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAnd_exprAccess().getRightShift_exprParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleshift_expr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAnd_exprRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.shift_expr");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleshift_expr
entryRuleshift_expr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getShift_exprRule()); }
	 iv_ruleshift_expr=ruleshift_expr 
	 { $current=$iv_ruleshift_expr.current; } 
	 EOF 
;

// Rule shift_expr
ruleshift_expr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getShift_exprAccess().getArith_exprParserRuleCall_0()); 
    }
    this_arith_expr_0=rulearith_expr
    { 
        $current = $this_arith_expr_0.current; 
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getShift_exprAccess().getShift_exprLeftAction_1_0(),
            $current);
    }
)(
(
(
		lv_sign_2_1=	'<<' 
    {
        newLeafNode(lv_sign_2_1, grammarAccess.getShift_exprAccess().getSignLessThanSignLessThanSignKeyword_1_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getShift_exprRule());
	        }
       		setWithLastConsumed($current, "sign", lv_sign_2_1, null);
	    }

    |		lv_sign_2_2=	'>>' 
    {
        newLeafNode(lv_sign_2_2, grammarAccess.getShift_exprAccess().getSignGreaterThanSignGreaterThanSignKeyword_1_1_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getShift_exprRule());
	        }
       		setWithLastConsumed($current, "sign", lv_sign_2_2, null);
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getShift_exprAccess().getRightArith_exprParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=rulearith_expr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getShift_exprRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.arith_expr");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRulearith_expr
entryRulearith_expr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getArith_exprRule()); }
	 iv_rulearith_expr=rulearith_expr 
	 { $current=$iv_rulearith_expr.current; } 
	 EOF 
;

// Rule arith_expr
rulearith_expr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getArith_exprAccess().getTermParserRuleCall_0()); 
    }
    this_term_0=ruleterm
    { 
        $current = $this_term_0.current; 
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getArith_exprAccess().getArith_exprLeftAction_1_0(),
            $current);
    }
)(
(
(
		lv_sign_2_1=	'+' 
    {
        newLeafNode(lv_sign_2_1, grammarAccess.getArith_exprAccess().getSignPlusSignKeyword_1_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getArith_exprRule());
	        }
       		setWithLastConsumed($current, "sign", lv_sign_2_1, null);
	    }

    |		lv_sign_2_2=	'-' 
    {
        newLeafNode(lv_sign_2_2, grammarAccess.getArith_exprAccess().getSignHyphenMinusKeyword_1_1_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getArith_exprRule());
	        }
       		setWithLastConsumed($current, "sign", lv_sign_2_2, null);
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getArith_exprAccess().getRightTermParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleterm		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArith_exprRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.term");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleterm
entryRuleterm returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTermRule()); }
	 iv_ruleterm=ruleterm 
	 { $current=$iv_ruleterm.current; } 
	 EOF 
;

// Rule term
ruleterm returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getTermAccess().getFactorParserRuleCall_0()); 
    }
    this_factor_0=rulefactor
    { 
        $current = $this_factor_0.current; 
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getTermAccess().getTermLeftAction_1_0(),
            $current);
    }
)(
(
(
		lv_sign_2_1=	'*' 
    {
        newLeafNode(lv_sign_2_1, grammarAccess.getTermAccess().getSignAsteriskKeyword_1_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTermRule());
	        }
       		setWithLastConsumed($current, "sign", lv_sign_2_1, null);
	    }

    |		lv_sign_2_2=	'/' 
    {
        newLeafNode(lv_sign_2_2, grammarAccess.getTermAccess().getSignSolidusKeyword_1_1_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTermRule());
	        }
       		setWithLastConsumed($current, "sign", lv_sign_2_2, null);
	    }

    |		lv_sign_2_3=	'%' 
    {
        newLeafNode(lv_sign_2_3, grammarAccess.getTermAccess().getSignPercentSignKeyword_1_1_0_2());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTermRule());
	        }
       		setWithLastConsumed($current, "sign", lv_sign_2_3, null);
	    }

    |		lv_sign_2_4=	'//' 
    {
        newLeafNode(lv_sign_2_4, grammarAccess.getTermAccess().getSignSolidusSolidusKeyword_1_1_0_3());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTermRule());
	        }
       		setWithLastConsumed($current, "sign", lv_sign_2_4, null);
	    }

    |		lv_sign_2_5=	'**' 
    {
        newLeafNode(lv_sign_2_5, grammarAccess.getTermAccess().getSignAsteriskAsteriskKeyword_1_1_0_4());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTermRule());
	        }
       		setWithLastConsumed($current, "sign", lv_sign_2_5, null);
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTermAccess().getRightFactorParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=rulefactor		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTermRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.factor");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRulefactor
entryRulefactor returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFactorRule()); }
	 iv_rulefactor=rulefactor 
	 { $current=$iv_rulefactor.current; } 
	 EOF 
;

// Rule factor
rulefactor returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
(
		lv_sign_0_1=	'+' 
    {
        newLeafNode(lv_sign_0_1, grammarAccess.getFactorAccess().getSignPlusSignKeyword_0_0_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFactorRule());
	        }
       		setWithLastConsumed($current, "sign", lv_sign_0_1, null);
	    }

    |		lv_sign_0_2=	'-' 
    {
        newLeafNode(lv_sign_0_2, grammarAccess.getFactorAccess().getSignHyphenMinusKeyword_0_0_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFactorRule());
	        }
       		setWithLastConsumed($current, "sign", lv_sign_0_2, null);
	    }

    |		lv_sign_0_3=	'~' 
    {
        newLeafNode(lv_sign_0_3, grammarAccess.getFactorAccess().getSignTildeKeyword_0_0_0_2());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFactorRule());
	        }
       		setWithLastConsumed($current, "sign", lv_sign_0_3, null);
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFactorAccess().getFactorFactorParserRuleCall_0_1_0()); 
	    }
		lv_factor_1_0=rulefactor		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFactorRule());
	        }
       		set(
       			$current, 
       			"factor",
        		lv_factor_1_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.factor");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getFactorAccess().getPowerParserRuleCall_1()); 
    }
    this_power_2=rulepower
    { 
        $current = $this_power_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRulepower
entryRulepower returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPowerRule()); }
	 iv_rulepower=rulepower 
	 { $current=$iv_rulepower.current; } 
	 EOF 
;

// Rule power
rulepower returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getPowerAccess().getStepAction_0_0(),
            $current);
    }
)	otherlv_1='Step' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getPowerAccess().getStepKeyword_0_1());
    }
	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getPowerAccess().getLeftParenthesisKeyword_0_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPowerAccess().getIdAtomParserRuleCall_0_3_0()); 
	    }
		lv_id_3_0=ruleatom		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPowerRule());
	        }
       		set(
       			$current, 
       			"id",
        		lv_id_3_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.atom");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getPowerAccess().getCommaKeyword_0_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPowerAccess().getDescriptionArith_exprParserRuleCall_0_4_1_0()); 
	    }
		lv_description_5_0=rulearith_expr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPowerRule());
	        }
       		set(
       			$current, 
       			"description",
        		lv_description_5_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.arith_expr");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_6=',' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getPowerAccess().getCommaKeyword_0_5());
    }
)?	otherlv_7=')' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getPowerAccess().getRightParenthesisKeyword_0_6());
    }
)
    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getPowerAccess().getDisplayStepAction_1_0(),
            $current);
    }
)	otherlv_9='DisplayStep' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getPowerAccess().getDisplayStepKeyword_1_1());
    }
	otherlv_10='(' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getPowerAccess().getLeftParenthesisKeyword_1_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPowerAccess().getIdArith_exprParserRuleCall_1_3_0()); 
	    }
		lv_id_11_0=rulearith_expr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPowerRule());
	        }
       		set(
       			$current, 
       			"id",
        		lv_id_11_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.arith_expr");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_12=',' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getPowerAccess().getCommaKeyword_1_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPowerAccess().getDescriptionArith_exprParserRuleCall_1_4_1_0()); 
	    }
		lv_description_13_0=rulearith_expr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPowerRule());
	        }
       		set(
       			$current, 
       			"description",
        		lv_description_13_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.arith_expr");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_14=',' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getPowerAccess().getCommaKeyword_1_5());
    }
)?	otherlv_15=')' 
    {
    	newLeafNode(otherlv_15, grammarAccess.getPowerAccess().getRightParenthesisKeyword_1_6());
    }
)
    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getPowerAccess().getShowTMAction_2_0(),
            $current);
    }
)	otherlv_17='ShowTM' 
    {
    	newLeafNode(otherlv_17, grammarAccess.getPowerAccess().getShowTMKeyword_2_1());
    }
	otherlv_18='(' 
    {
    	newLeafNode(otherlv_18, grammarAccess.getPowerAccess().getLeftParenthesisKeyword_2_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPowerAccess().getArgsArglistParserRuleCall_2_3_0()); 
	    }
		lv_args_19_0=rulearglist		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPowerRule());
	        }
       		add(
       			$current, 
       			"args",
        		lv_args_19_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.arglist");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_20=',' 
    {
    	newLeafNode(otherlv_20, grammarAccess.getPowerAccess().getCommaKeyword_2_4());
    }
)?	otherlv_21=')' 
    {
    	newLeafNode(otherlv_21, grammarAccess.getPowerAccess().getRightParenthesisKeyword_2_5());
    }
)
    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getPowerAccess().getSendAction_3_0(),
            $current);
    }
)	otherlv_23='Send' 
    {
    	newLeafNode(otherlv_23, grammarAccess.getPowerAccess().getSendKeyword_3_1());
    }
	otherlv_24='(' 
    {
    	newLeafNode(otherlv_24, grammarAccess.getPowerAccess().getLeftParenthesisKeyword_3_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPowerAccess().getArgsArglistParserRuleCall_3_3_0()); 
	    }
		lv_args_25_0=rulearglist		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPowerRule());
	        }
       		add(
       			$current, 
       			"args",
        		lv_args_25_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.arglist");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_26=',' 
    {
    	newLeafNode(otherlv_26, grammarAccess.getPowerAccess().getCommaKeyword_3_4());
    }
)?	otherlv_27=')' 
    {
    	newLeafNode(otherlv_27, grammarAccess.getPowerAccess().getRightParenthesisKeyword_3_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPowerAccess().getTrailerTrailerParserRuleCall_3_6_0()); 
	    }
		lv_trailer_28_0=ruletrailer		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPowerRule());
	        }
       		add(
       			$current, 
       			"trailer",
        		lv_trailer_28_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.trailer");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getPowerAccess().getBuildTCAction_4_0(),
            $current);
    }
)	otherlv_30='BuildTC' 
    {
    	newLeafNode(otherlv_30, grammarAccess.getPowerAccess().getBuildTCKeyword_4_1());
    }
	otherlv_31='(' 
    {
    	newLeafNode(otherlv_31, grammarAccess.getPowerAccess().getLeftParenthesisKeyword_4_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPowerAccess().getArgsArglistParserRuleCall_4_3_0()); 
	    }
		lv_args_32_0=rulearglist		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPowerRule());
	        }
       		add(
       			$current, 
       			"args",
        		lv_args_32_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.arglist");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_33=',' 
    {
    	newLeafNode(otherlv_33, grammarAccess.getPowerAccess().getCommaKeyword_4_4());
    }
)?	otherlv_34=')' 
    {
    	newLeafNode(otherlv_34, grammarAccess.getPowerAccess().getRightParenthesisKeyword_4_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPowerAccess().getTrailerTrailerParserRuleCall_4_6_0()); 
	    }
		lv_trailer_35_0=ruletrailer		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPowerRule());
	        }
       		add(
       			$current, 
       			"trailer",
        		lv_trailer_35_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.trailer");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getPowerAccess().getSetLimitsAction_5_0(),
            $current);
    }
)	otherlv_37='SetLimits' 
    {
    	newLeafNode(otherlv_37, grammarAccess.getPowerAccess().getSetLimitsKeyword_5_1());
    }
	otherlv_38='(' 
    {
    	newLeafNode(otherlv_38, grammarAccess.getPowerAccess().getLeftParenthesisKeyword_5_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPowerAccess().getTmTestParserRuleCall_5_3_0()); 
	    }
		lv_tm_39_0=ruletest		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPowerRule());
	        }
       		set(
       			$current, 
       			"tm",
        		lv_tm_39_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.test");
	        afterParserOrEnumRuleCall();
	    }

)
)((	otherlv_40=',' 
    {
    	newLeafNode(otherlv_40, grammarAccess.getPowerAccess().getCommaKeyword_5_4_0());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getPowerAccess().getArgsArglistParserRuleCall_5_4_1_0()); 
	    }
		lv_args_41_0=rulearglist		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPowerRule());
	        }
       		add(
       			$current, 
       			"args",
        		lv_args_41_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.arglist");
	        afterParserOrEnumRuleCall();
	    }

)
))*(	otherlv_42=',' 
    {
    	newLeafNode(otherlv_42, grammarAccess.getPowerAccess().getCommaKeyword_5_5());
    }
)?	otherlv_43=')' 
    {
    	newLeafNode(otherlv_43, grammarAccess.getPowerAccess().getRightParenthesisKeyword_5_6());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPowerAccess().getTrailerTrailerParserRuleCall_5_7_0()); 
	    }
		lv_trailer_44_0=ruletrailer		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPowerRule());
	        }
       		add(
       			$current, 
       			"trailer",
        		lv_trailer_44_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.trailer");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getPowerAccess().getSetLimitsAction_6_0(),
            $current);
    }
)	otherlv_46='GetLimits' 
    {
    	newLeafNode(otherlv_46, grammarAccess.getPowerAccess().getGetLimitsKeyword_6_1());
    }
	otherlv_47='(' 
    {
    	newLeafNode(otherlv_47, grammarAccess.getPowerAccess().getLeftParenthesisKeyword_6_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPowerAccess().getTmTestParserRuleCall_6_3_0()); 
	    }
		lv_tm_48_0=ruletest		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPowerRule());
	        }
       		set(
       			$current, 
       			"tm",
        		lv_tm_48_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.test");
	        afterParserOrEnumRuleCall();
	    }

)
)((	otherlv_49=',' 
    {
    	newLeafNode(otherlv_49, grammarAccess.getPowerAccess().getCommaKeyword_6_4_0());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getPowerAccess().getArgsArglistParserRuleCall_6_4_1_0()); 
	    }
		lv_args_50_0=rulearglist		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPowerRule());
	        }
       		add(
       			$current, 
       			"args",
        		lv_args_50_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.arglist");
	        afterParserOrEnumRuleCall();
	    }

)
))*(	otherlv_51=',' 
    {
    	newLeafNode(otherlv_51, grammarAccess.getPowerAccess().getCommaKeyword_6_5());
    }
)?	otherlv_52=')' 
    {
    	newLeafNode(otherlv_52, grammarAccess.getPowerAccess().getRightParenthesisKeyword_6_6());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPowerAccess().getTrailerTrailerParserRuleCall_6_7_0()); 
	    }
		lv_trailer_53_0=ruletrailer		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPowerRule());
	        }
       		add(
       			$current, 
       			"trailer",
        		lv_trailer_53_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.trailer");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getPowerAccess().getGetTMAction_7_0(),
            $current);
    }
)	otherlv_55='GetTM' 
    {
    	newLeafNode(otherlv_55, grammarAccess.getPowerAccess().getGetTMKeyword_7_1());
    }
	otherlv_56='(' 
    {
    	newLeafNode(otherlv_56, grammarAccess.getPowerAccess().getLeftParenthesisKeyword_7_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPowerAccess().getTmTestParserRuleCall_7_3_0()); 
	    }
		lv_tm_57_0=ruletest		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPowerRule());
	        }
       		set(
       			$current, 
       			"tm",
        		lv_tm_57_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.test");
	        afterParserOrEnumRuleCall();
	    }

)
)((	otherlv_58=',' 
    {
    	newLeafNode(otherlv_58, grammarAccess.getPowerAccess().getCommaKeyword_7_4_0());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getPowerAccess().getArgsArglistParserRuleCall_7_4_1_0()); 
	    }
		lv_args_59_0=rulearglist		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPowerRule());
	        }
       		add(
       			$current, 
       			"args",
        		lv_args_59_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.arglist");
	        afterParserOrEnumRuleCall();
	    }

)
))*(	otherlv_60=',' 
    {
    	newLeafNode(otherlv_60, grammarAccess.getPowerAccess().getCommaKeyword_7_5());
    }
)?	otherlv_61=')' 
    {
    	newLeafNode(otherlv_61, grammarAccess.getPowerAccess().getRightParenthesisKeyword_7_6());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPowerAccess().getTrailerTrailerParserRuleCall_7_7_0()); 
	    }
		lv_trailer_62_0=ruletrailer		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPowerRule());
	        }
       		add(
       			$current, 
       			"trailer",
        		lv_trailer_62_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.trailer");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getPowerAccess().getGotoAction_8_0(),
            $current);
    }
)	otherlv_64='Goto' 
    {
    	newLeafNode(otherlv_64, grammarAccess.getPowerAccess().getGotoKeyword_8_1());
    }
	otherlv_65='(' 
    {
    	newLeafNode(otherlv_65, grammarAccess.getPowerAccess().getLeftParenthesisKeyword_8_2());
    }
(
(
		lv_target_66_0=RULE_STRING
		{
			newLeafNode(lv_target_66_0, grammarAccess.getPowerAccess().getTargetSTRINGTerminalRuleCall_8_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPowerRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"target",
        		lv_target_66_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.STRING");
	    }

)
)	otherlv_67=')' 
    {
    	newLeafNode(otherlv_67, grammarAccess.getPowerAccess().getRightParenthesisKeyword_8_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPowerAccess().getTrailerTrailerParserRuleCall_8_5_0()); 
	    }
		lv_trailer_68_0=ruletrailer		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPowerRule());
	        }
       		add(
       			$current, 
       			"trailer",
        		lv_trailer_68_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.trailer");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getPowerAccess().getGotoAction_9_0(),
            $current);
    }
)	otherlv_70='Goto' 
    {
    	newLeafNode(otherlv_70, grammarAccess.getPowerAccess().getGotoKeyword_9_1());
    }
	otherlv_71='(' 
    {
    	newLeafNode(otherlv_71, grammarAccess.getPowerAccess().getLeftParenthesisKeyword_9_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPowerAccess().getExprTestParserRuleCall_9_3_0()); 
	    }
		lv_expr_72_0=ruletest		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPowerRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_72_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.test");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_73=')' 
    {
    	newLeafNode(otherlv_73, grammarAccess.getPowerAccess().getRightParenthesisKeyword_9_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPowerAccess().getTrailerTrailerParserRuleCall_9_5_0()); 
	    }
		lv_trailer_74_0=ruletrailer		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPowerRule());
	        }
       		add(
       			$current, 
       			"trailer",
        		lv_trailer_74_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.trailer");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getPowerAccess().getVerifyAction_10_0(),
            $current);
    }
)	otherlv_76='Verify' 
    {
    	newLeafNode(otherlv_76, grammarAccess.getPowerAccess().getVerifyKeyword_10_1());
    }
	otherlv_77='(' 
    {
    	newLeafNode(otherlv_77, grammarAccess.getPowerAccess().getLeftParenthesisKeyword_10_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPowerAccess().getArgsArglistParserRuleCall_10_3_0()); 
	    }
		lv_args_78_0=rulearglist		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPowerRule());
	        }
       		set(
       			$current, 
       			"args",
        		lv_args_78_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.arglist");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_79=',' 
    {
    	newLeafNode(otherlv_79, grammarAccess.getPowerAccess().getCommaKeyword_10_4());
    }
)?	otherlv_80=')' 
    {
    	newLeafNode(otherlv_80, grammarAccess.getPowerAccess().getRightParenthesisKeyword_10_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPowerAccess().getTrailerTrailerParserRuleCall_10_6_0()); 
	    }
		lv_trailer_81_0=ruletrailer		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPowerRule());
	        }
       		add(
       			$current, 
       			"trailer",
        		lv_trailer_81_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.trailer");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getPowerAccess().getVerifyAction_11_0(),
            $current);
    }
)	otherlv_83='WaitFor' 
    {
    	newLeafNode(otherlv_83, grammarAccess.getPowerAccess().getWaitForKeyword_11_1());
    }
	otherlv_84='(' 
    {
    	newLeafNode(otherlv_84, grammarAccess.getPowerAccess().getLeftParenthesisKeyword_11_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPowerAccess().getArgsArglistParserRuleCall_11_3_0()); 
	    }
		lv_args_85_0=rulearglist		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPowerRule());
	        }
       		set(
       			$current, 
       			"args",
        		lv_args_85_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.arglist");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_86=',' 
    {
    	newLeafNode(otherlv_86, grammarAccess.getPowerAccess().getCommaKeyword_11_4());
    }
)?	otherlv_87=')' 
    {
    	newLeafNode(otherlv_87, grammarAccess.getPowerAccess().getRightParenthesisKeyword_11_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPowerAccess().getTrailerTrailerParserRuleCall_11_6_0()); 
	    }
		lv_trailer_88_0=ruletrailer		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPowerRule());
	        }
       		add(
       			$current, 
       			"trailer",
        		lv_trailer_88_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.trailer");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getPowerAccess().getChangeLanguageConfigAction_12_0(),
            $current);
    }
)	otherlv_90='ChangeLanguageConfig' 
    {
    	newLeafNode(otherlv_90, grammarAccess.getPowerAccess().getChangeLanguageConfigKeyword_12_1());
    }
	otherlv_91='(' 
    {
    	newLeafNode(otherlv_91, grammarAccess.getPowerAccess().getLeftParenthesisKeyword_12_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPowerAccess().getStatementPython_StatementParserRuleCall_12_3_0()); 
	    }
		lv_statement_92_0=rulePython_Statement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPowerRule());
	        }
       		set(
       			$current, 
       			"statement",
        		lv_statement_92_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.Python_Statement");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_93=',' 
    {
    	newLeafNode(otherlv_93, grammarAccess.getPowerAccess().getCommaKeyword_12_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPowerAccess().getArgsArglistParserRuleCall_12_5_0()); 
	    }
		lv_args_94_0=rulearglist		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPowerRule());
	        }
       		set(
       			$current, 
       			"args",
        		lv_args_94_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.arglist");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_95=')' 
    {
    	newLeafNode(otherlv_95, grammarAccess.getPowerAccess().getRightParenthesisKeyword_12_6());
    }
)
    |(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getPowerAccess().getAtomParserRuleCall_13_0()); 
    }
    this_atom_96=ruleatom
    { 
        $current = $this_atom_96.current; 
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getPowerAccess().getPowerAtomAction_13_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPowerAccess().getTrailerTrailerParserRuleCall_13_1_1_0()); 
	    }
		lv_trailer_98_0=ruletrailer		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPowerRule());
	        }
       		add(
       			$current, 
       			"trailer",
        		lv_trailer_98_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.trailer");
	        afterParserOrEnumRuleCall();
	    }

)
)+(	otherlv_99='**' 
    {
    	newLeafNode(otherlv_99, grammarAccess.getPowerAccess().getAsteriskAsteriskKeyword_13_1_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPowerAccess().getFactorFactorParserRuleCall_13_1_2_1_0()); 
	    }
		lv_factor_100_0=rulefactor		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPowerRule());
	        }
       		set(
       			$current, 
       			"factor",
        		lv_factor_100_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.factor");
	        afterParserOrEnumRuleCall();
	    }

)
))?)?))
;





// Entry rule entryRuleyield_or_testlist_comp
entryRuleyield_or_testlist_comp returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getYield_or_testlist_compRule()); }
	 iv_ruleyield_or_testlist_comp=ruleyield_or_testlist_comp 
	 { $current=$iv_ruleyield_or_testlist_comp.current; } 
	 EOF 
;

// Rule yield_or_testlist_comp
ruleyield_or_testlist_comp returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getYield_or_testlist_compAccess().getYield_exprParserRuleCall_0()); 
    }
    this_yield_expr_0=ruleyield_expr
    { 
        $current = $this_yield_expr_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getYield_or_testlist_compAccess().getTestlist_compParserRuleCall_1()); 
    }
    this_testlist_comp_1=ruletestlist_comp
    { 
        $current = $this_testlist_comp_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleatom
entryRuleatom returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAtomRule()); }
	 iv_ruleatom=ruleatom 
	 { $current=$iv_ruleatom.current; } 
	 EOF 
;

// Rule atom
ruleatom returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		lv_roundBracket_0_0=	'(' 
    {
        newLeafNode(lv_roundBracket_0_0, grammarAccess.getAtomAccess().getRoundBracketLeftParenthesisKeyword_0_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAtomRule());
	        }
       		setWithLastConsumed($current, "roundBracket", true, "(");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAtomAccess().getYield_or_testlist_compYield_or_testlist_compParserRuleCall_0_1_0()); 
	    }
		lv_yield_or_testlist_comp_1_0=ruleyield_or_testlist_comp		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAtomRule());
	        }
       		set(
       			$current, 
       			"yield_or_testlist_comp",
        		lv_yield_or_testlist_comp_1_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.yield_or_testlist_comp");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_2=')' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAtomAccess().getRightParenthesisKeyword_0_2());
    }
)
    |((
(
		lv_squareBracket_3_0=	'[' 
    {
        newLeafNode(lv_squareBracket_3_0, grammarAccess.getAtomAccess().getSquareBracketLeftSquareBracketKeyword_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAtomRule());
	        }
       		setWithLastConsumed($current, "squareBracket", true, "[");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAtomAccess().getListmakerListmakerParserRuleCall_1_1_0()); 
	    }
		lv_listmaker_4_0=rulelistmaker		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAtomRule());
	        }
       		set(
       			$current, 
       			"listmaker",
        		lv_listmaker_4_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.listmaker");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_5=']' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getAtomAccess().getRightSquareBracketKeyword_1_2());
    }
)
    |((
(
		lv_curlyBracket_6_0=	'{' 
    {
        newLeafNode(lv_curlyBracket_6_0, grammarAccess.getAtomAccess().getCurlyBracketLeftCurlyBracketKeyword_2_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAtomRule());
	        }
       		setWithLastConsumed($current, "curlyBracket", true, "{");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAtomAccess().getDictorsetmakerDictorsetmakerParserRuleCall_2_1_0()); 
	    }
		lv_dictorsetmaker_7_0=ruledictorsetmaker		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAtomRule());
	        }
       		set(
       			$current, 
       			"dictorsetmaker",
        		lv_dictorsetmaker_7_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.dictorsetmaker");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_8='}' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getAtomAccess().getRightCurlyBracketKeyword_2_2());
    }
)
    |(	otherlv_9='`' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getAtomAccess().getGraveAccentKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAtomAccess().getTestlist1Testlist1ParserRuleCall_3_1_0()); 
	    }
		lv_testlist1_10_0=ruletestlist1		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAtomRule());
	        }
       		set(
       			$current, 
       			"testlist1",
        		lv_testlist1_10_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.testlist1");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_11='`' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getAtomAccess().getGraveAccentKeyword_3_2());
    }
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getAtomAccess().getNameNAMEParserRuleCall_4_0()); 
	    }
		lv_name_12_0=ruleNAME		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAtomRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_12_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.NAME");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getAtomAccess().getNameNumberWithPlusOrMinusParserRuleCall_5_0()); 
	    }
		lv_name_13_0=ruleNumberWithPlusOrMinus		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAtomRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_13_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.NumberWithPlusOrMinus");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |((
(
		lv_strings_14_0=RULE_STRING
		{
			newLeafNode(lv_strings_14_0, grammarAccess.getAtomAccess().getStringsSTRINGTerminalRuleCall_6_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAtomRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"strings",
        		lv_strings_14_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.STRING");
	    }

)
)(this_WS_15=RULE_WS
    { 
    newLeafNode(this_WS_15, grammarAccess.getAtomAccess().getWSTerminalRuleCall_6_1()); 
    }
)?)+)
;





// Entry rule entryRulelistmaker
entryRulelistmaker returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getListmakerRule()); }
	 iv_rulelistmaker=rulelistmaker 
	 { $current=$iv_rulelistmaker.current; } 
	 EOF 
;

// Rule listmaker
rulelistmaker returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getListmakerAccess().getTestTestParserRuleCall_0_0()); 
	    }
		lv_test_0_0=ruletest		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getListmakerRule());
	        }
       		set(
       			$current, 
       			"test",
        		lv_test_0_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.test");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		{ 
	        newCompositeNode(grammarAccess.getListmakerAccess().getList_forList_forParserRuleCall_1_0_0()); 
	    }
		lv_list_for_1_0=rulelist_for		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getListmakerRule());
	        }
       		set(
       			$current, 
       			"list_for",
        		lv_list_for_1_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.list_for");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |((	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getListmakerAccess().getCommaKeyword_1_1_0_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getListmakerAccess().getAdditionalTestsTestParserRuleCall_1_1_0_1_0()); 
	    }
		lv_additionalTests_3_0=ruletest		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getListmakerRule());
	        }
       		add(
       			$current, 
       			"additionalTests",
        		lv_additionalTests_3_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.test");
	        afterParserOrEnumRuleCall();
	    }

)
))*(
(
		lv_optionalComma_4_0=	',' 
    {
        newLeafNode(lv_optionalComma_4_0, grammarAccess.getListmakerAccess().getOptionalCommaCommaKeyword_1_1_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getListmakerRule());
	        }
       		setWithLastConsumed($current, "optionalComma", true, ",");
	    }

)
)?))?)
;





// Entry rule entryRuletestlist_comp
entryRuletestlist_comp returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTestlist_compRule()); }
	 iv_ruletestlist_comp=ruletestlist_comp 
	 { $current=$iv_ruletestlist_comp.current; } 
	 EOF 
;

// Rule testlist_comp
ruletestlist_comp returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getTestlist_compAccess().getTestTestParserRuleCall_0_0()); 
	    }
		lv_test_0_0=ruletest		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTestlist_compRule());
	        }
       		set(
       			$current, 
       			"test",
        		lv_test_0_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.test");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		{ 
	        newCompositeNode(grammarAccess.getTestlist_compAccess().getComp_forComp_forParserRuleCall_1_0_0()); 
	    }
		lv_comp_for_1_0=rulecomp_for		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTestlist_compRule());
	        }
       		set(
       			$current, 
       			"comp_for",
        		lv_comp_for_1_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.comp_for");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |((	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTestlist_compAccess().getCommaKeyword_1_1_0_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTestlist_compAccess().getAdditionalTestsTestParserRuleCall_1_1_0_1_0()); 
	    }
		lv_additionalTests_3_0=ruletest		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTestlist_compRule());
	        }
       		add(
       			$current, 
       			"additionalTests",
        		lv_additionalTests_3_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.test");
	        afterParserOrEnumRuleCall();
	    }

)
))*(
(
		lv_optionalComma_4_0=	',' 
    {
        newLeafNode(lv_optionalComma_4_0, grammarAccess.getTestlist_compAccess().getOptionalCommaCommaKeyword_1_1_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTestlist_compRule());
	        }
       		setWithLastConsumed($current, "optionalComma", true, ",");
	    }

)
)?))?)
;





// Entry rule entryRulelambdef
entryRulelambdef returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLambdefRule()); }
	 iv_rulelambdef=rulelambdef 
	 { $current=$iv_rulelambdef.current; } 
	 EOF 
;

// Rule lambdef
rulelambdef returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getLambdefAccess().getLambdefAction_0(),
            $current);
    }
)	otherlv_1='lambda' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getLambdefAccess().getLambdaKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLambdefAccess().getVarargslistVarargslistParserRuleCall_2_0()); 
	    }
		lv_varargslist_2_0=rulevarargslist		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLambdefRule());
	        }
       		set(
       			$current, 
       			"varargslist",
        		lv_varargslist_2_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.varargslist");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_3=':' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getLambdefAccess().getColonKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLambdefAccess().getTestTestParserRuleCall_4_0()); 
	    }
		lv_test_4_0=ruletest		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLambdefRule());
	        }
       		set(
       			$current, 
       			"test",
        		lv_test_4_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.test");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuletrailer
entryRuletrailer returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTrailerRule()); }
	 iv_ruletrailer=ruletrailer 
	 { $current=$iv_ruletrailer.current; } 
	 EOF 
;

// Rule trailer
ruletrailer returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		lv_roundBracket_0_0=	'(' 
    {
        newLeafNode(lv_roundBracket_0_0, grammarAccess.getTrailerAccess().getRoundBracketLeftParenthesisKeyword_0_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTrailerRule());
	        }
       		setWithLastConsumed($current, "roundBracket", true, "(");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTrailerAccess().getArglistArglistParserRuleCall_0_1_0()); 
	    }
		lv_arglist_1_0=rulearglist		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTrailerRule());
	        }
       		set(
       			$current, 
       			"arglist",
        		lv_arglist_1_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.arglist");
	        afterParserOrEnumRuleCall();
	    }

)
)?(	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTrailerAccess().getCommaKeyword_0_2());
    }
)?	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getTrailerAccess().getRightParenthesisKeyword_0_3());
    }
)
    |((
(
		lv_squareBracket_4_0=	'[' 
    {
        newLeafNode(lv_squareBracket_4_0, grammarAccess.getTrailerAccess().getSquareBracketLeftSquareBracketKeyword_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTrailerRule());
	        }
       		setWithLastConsumed($current, "squareBracket", true, "[");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTrailerAccess().getSubscriptlistSubscriptlistParserRuleCall_1_1_0()); 
	    }
		lv_subscriptlist_5_0=rulesubscriptlist		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTrailerRule());
	        }
       		set(
       			$current, 
       			"subscriptlist",
        		lv_subscriptlist_5_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.subscriptlist");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_6=']' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getTrailerAccess().getRightSquareBracketKeyword_1_2());
    }
)
    |(	otherlv_7='.' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getTrailerAccess().getFullStopKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTrailerAccess().getDotNameNAMEParserRuleCall_2_1_0()); 
	    }
		lv_dotName_8_0=ruleNAME		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTrailerRule());
	        }
       		set(
       			$current, 
       			"dotName",
        		lv_dotName_8_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.NAME");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRulesubscriptlist
entryRulesubscriptlist returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSubscriptlistRule()); }
	 iv_rulesubscriptlist=rulesubscriptlist 
	 { $current=$iv_rulesubscriptlist.current; } 
	 EOF 
;

// Rule subscriptlist
rulesubscriptlist returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getSubscriptlistAccess().getSubscriptSubscriptParserRuleCall_0_0()); 
	    }
		lv_subscript_0_0=rulesubscript		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSubscriptlistRule());
	        }
       		add(
       			$current, 
       			"subscript",
        		lv_subscript_0_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.subscript");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSubscriptlistAccess().getCommaKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSubscriptlistAccess().getSubscriptSubscriptParserRuleCall_1_1_0()); 
	    }
		lv_subscript_2_0=rulesubscript		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSubscriptlistRule());
	        }
       		add(
       			$current, 
       			"subscript",
        		lv_subscript_2_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.subscript");
	        afterParserOrEnumRuleCall();
	    }

)
))*(
(
		lv_optionalComma_3_0=	',' 
    {
        newLeafNode(lv_optionalComma_3_0, grammarAccess.getSubscriptlistAccess().getOptionalCommaCommaKeyword_2_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSubscriptlistRule());
	        }
       		setWithLastConsumed($current, "optionalComma", true, ",");
	    }

)
)?)
;





// Entry rule entryRulesubscript
entryRulesubscript returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSubscriptRule()); }
	 iv_rulesubscript=rulesubscript 
	 { $current=$iv_rulesubscript.current; } 
	 EOF 
;

// Rule subscript
rulesubscript returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getSubscriptAccess().getSubscriptAction_0(),
            $current);
    }
)((	otherlv_1='.' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSubscriptAccess().getFullStopKeyword_1_0_0());
    }
	otherlv_2='.' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getSubscriptAccess().getFullStopKeyword_1_0_1());
    }
	otherlv_3='.' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getSubscriptAccess().getFullStopKeyword_1_0_2());
    }
)
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getSubscriptAccess().getSubscript1TestParserRuleCall_1_1_0_0()); 
	    }
		lv_subscript1_4_0=ruletest		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSubscriptRule());
	        }
       		set(
       			$current, 
       			"subscript1",
        		lv_subscript1_4_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.test");
	        afterParserOrEnumRuleCall();
	    }

)
)?((
(
		lv_symbol_5_0=	':' 
    {
        newLeafNode(lv_symbol_5_0, grammarAccess.getSubscriptAccess().getSymbolColonKeyword_1_1_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSubscriptRule());
	        }
       		setWithLastConsumed($current, "symbol", lv_symbol_5_0, ":");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSubscriptAccess().getSubscript2TestParserRuleCall_1_1_1_1_0()); 
	    }
		lv_subscript2_6_0=ruletest		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSubscriptRule());
	        }
       		set(
       			$current, 
       			"subscript2",
        		lv_subscript2_6_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.test");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getSubscriptAccess().getSliceopSliceopParserRuleCall_1_1_1_2_0()); 
	    }
		lv_sliceop_7_0=rulesliceop		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSubscriptRule());
	        }
       		set(
       			$current, 
       			"sliceop",
        		lv_sliceop_7_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.sliceop");
	        afterParserOrEnumRuleCall();
	    }

)
)?)?)))
;





// Entry rule entryRulesliceop
entryRulesliceop returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSliceopRule()); }
	 iv_rulesliceop=rulesliceop 
	 { $current=$iv_rulesliceop.current; } 
	 EOF 
;

// Rule sliceop
rulesliceop returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getSliceopAccess().getSliceopAction_0(),
            $current);
    }
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSliceopAccess().getColonKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSliceopAccess().getTestTestParserRuleCall_2_0()); 
	    }
		lv_test_2_0=ruletest		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSliceopRule());
	        }
       		set(
       			$current, 
       			"test",
        		lv_test_2_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.test");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleexprlist
entryRuleexprlist returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExprlistRule()); }
	 iv_ruleexprlist=ruleexprlist 
	 { $current=$iv_ruleexprlist.current; } 
	 EOF 
;

// Rule exprlist
ruleexprlist returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getExprlistAccess().getExprsExprParserRuleCall_0_0()); 
	    }
		lv_exprs_0_0=ruleexpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExprlistRule());
	        }
       		add(
       			$current, 
       			"exprs",
        		lv_exprs_0_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.expr");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getExprlistAccess().getCommaKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExprlistAccess().getExprsExprParserRuleCall_1_1_0()); 
	    }
		lv_exprs_2_0=ruleexpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExprlistRule());
	        }
       		add(
       			$current, 
       			"exprs",
        		lv_exprs_2_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.expr");
	        afterParserOrEnumRuleCall();
	    }

)
))*(
(
		lv_optionalComma_3_0=	',' 
    {
        newLeafNode(lv_optionalComma_3_0, grammarAccess.getExprlistAccess().getOptionalCommaCommaKeyword_2_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExprlistRule());
	        }
       		setWithLastConsumed($current, "optionalComma", true, ",");
	    }

)
)?)
;





// Entry rule entryRuletestlist
entryRuletestlist returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTestlistRule()); }
	 iv_ruletestlist=ruletestlist 
	 { $current=$iv_ruletestlist.current; } 
	 EOF 
;

// Rule testlist
ruletestlist returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getTestlistAccess().getTestParserRuleCall_0()); 
    }
    this_test_0=ruletest
    { 
        $current = $this_test_0.current; 
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndAdd(
            grammarAccess.getTestlistAccess().getTestlistTestsAction_1_0(),
            $current);
    }
)	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTestlistAccess().getCommaKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTestlistAccess().getTestsTestParserRuleCall_1_2_0()); 
	    }
		lv_tests_3_0=ruletest		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTestlistRule());
	        }
       		add(
       			$current, 
       			"tests",
        		lv_tests_3_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.test");
	        afterParserOrEnumRuleCall();
	    }

)
))*(
(
		lv_optionalComma_4_0=	',' 
    {
        newLeafNode(lv_optionalComma_4_0, grammarAccess.getTestlistAccess().getOptionalCommaCommaKeyword_2_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTestlistRule());
	        }
       		setWithLastConsumed($current, "optionalComma", true, ",");
	    }

)
)?)
;





// Entry rule entryRuledictorset_entry
entryRuledictorset_entry returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDictorset_entryRule()); }
	 iv_ruledictorset_entry=ruledictorset_entry 
	 { $current=$iv_ruledictorset_entry.current; } 
	 EOF 
;

// Rule dictorset_entry
ruledictorset_entry returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getDictorset_entryAccess().getTest1TestParserRuleCall_0_0()); 
	    }
		lv_test1_0_0=ruletest		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDictorset_entryRule());
	        }
       		set(
       			$current, 
       			"test1",
        		lv_test1_0_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.test");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getDictorset_entryAccess().getColonKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDictorset_entryAccess().getTest2TestParserRuleCall_2_0()); 
	    }
		lv_test2_2_0=ruletest		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDictorset_entryRule());
	        }
       		set(
       			$current, 
       			"test2",
        		lv_test2_2_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.test");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuledictorsetmaker
entryRuledictorsetmaker returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDictorsetmakerRule()); }
	 iv_ruledictorsetmaker=ruledictorsetmaker 
	 { $current=$iv_ruledictorsetmaker.current; } 
	 EOF 
;

// Rule dictorsetmaker
ruledictorsetmaker returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getDictorsetmakerAccess().getEntriesDictorset_entryParserRuleCall_0_0()); 
	    }
		lv_entries_0_0=ruledictorset_entry		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDictorsetmakerRule());
	        }
       		add(
       			$current, 
       			"entries",
        		lv_entries_0_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.dictorset_entry");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		{ 
	        newCompositeNode(grammarAccess.getDictorsetmakerAccess().getComp_forComp_forParserRuleCall_1_0_0()); 
	    }
		lv_comp_for_1_0=rulecomp_for		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDictorsetmakerRule());
	        }
       		set(
       			$current, 
       			"comp_for",
        		lv_comp_for_1_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.comp_for");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |((	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getDictorsetmakerAccess().getCommaKeyword_1_1_0_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDictorsetmakerAccess().getEntriesDictorset_entryParserRuleCall_1_1_0_1_0()); 
	    }
		lv_entries_3_0=ruledictorset_entry		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDictorsetmakerRule());
	        }
       		add(
       			$current, 
       			"entries",
        		lv_entries_3_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.dictorset_entry");
	        afterParserOrEnumRuleCall();
	    }

)
))*(
(
		lv_optionalComma_4_0=	',' 
    {
        newLeafNode(lv_optionalComma_4_0, grammarAccess.getDictorsetmakerAccess().getOptionalCommaCommaKeyword_1_1_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDictorsetmakerRule());
	        }
       		setWithLastConsumed($current, "optionalComma", true, ",");
	    }

)
)?)))
;





// Entry rule entryRuleclassdef
entryRuleclassdef returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getClassdefRule()); }
	 iv_ruleclassdef=ruleclassdef 
	 { $current=$iv_ruleclassdef.current; } 
	 EOF 
;

// Rule classdef
ruleclassdef returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='class' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getClassdefAccess().getClassKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getClassdefAccess().getNameNAMEParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleNAME		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClassdefRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.NAME");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		lv_roundBrackets_2_0=	'(' 
    {
        newLeafNode(lv_roundBrackets_2_0, grammarAccess.getClassdefAccess().getRoundBracketsLeftParenthesisKeyword_2_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getClassdefRule());
	        }
       		setWithLastConsumed($current, "roundBrackets", true, "(");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getClassdefAccess().getTestlistTestlistParserRuleCall_2_1_0()); 
	    }
		lv_testlist_3_0=ruletestlist		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClassdefRule());
	        }
       		set(
       			$current, 
       			"testlist",
        		lv_testlist_3_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.testlist");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=')' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getClassdefAccess().getRightParenthesisKeyword_2_2());
    }
)?	otherlv_5=':' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getClassdefAccess().getColonKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getClassdefAccess().getSuiteSuiteParserRuleCall_4_0()); 
	    }
		lv_suite_6_0=rulesuite		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClassdefRule());
	        }
       		set(
       			$current, 
       			"suite",
        		lv_suite_6_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.suite");
	        afterParserOrEnumRuleCall();
	    }

)
)this_ENDCLASS_7=RULE_ENDCLASS
    { 
    newLeafNode(this_ENDCLASS_7, grammarAccess.getClassdefAccess().getENDCLASSTerminalRuleCall_5()); 
    }
)
;





// Entry rule entryRulearglist
entryRulearglist returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getArglistRule()); }
	 iv_rulearglist=rulearglist 
	 { $current=$iv_rulearglist.current; } 
	 EOF 
;

// Rule arglist
rulearglist returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		{ 
	        newCompositeNode(grammarAccess.getArglistAccess().getArgumentsArgumentParserRuleCall_0_0_0()); 
	    }
		lv_arguments_0_0=ruleargument		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArglistRule());
	        }
       		add(
       			$current, 
       			"arguments",
        		lv_arguments_0_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.argument");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getArglistAccess().getCommaKeyword_0_1());
    }
)*(((
(
		{ 
	        newCompositeNode(grammarAccess.getArglistAccess().getArgumentsArgumentParserRuleCall_1_0_0_0()); 
	    }
		lv_arguments_2_0=ruleargument		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArglistRule());
	        }
       		add(
       			$current, 
       			"arguments",
        		lv_arguments_2_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.argument");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_optionalComma_3_0=	',' 
    {
        newLeafNode(lv_optionalComma_3_0, grammarAccess.getArglistAccess().getOptionalCommaCommaKeyword_1_0_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getArglistRule());
	        }
       		setWithLastConsumed($current, "optionalComma", true, ",");
	    }

)
)?)
    |(	otherlv_4='*' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getArglistAccess().getAsteriskKeyword_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArglistAccess().getDot1_testTestParserRuleCall_1_1_1_0()); 
	    }
		lv_dot1_test_5_0=ruletest		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArglistRule());
	        }
       		set(
       			$current, 
       			"dot1_test",
        		lv_dot1_test_5_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.test");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_6=',' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getArglistAccess().getCommaKeyword_1_1_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArglistAccess().getDot1_argumentsArgumentParserRuleCall_1_1_2_1_0()); 
	    }
		lv_dot1_arguments_7_0=ruleargument		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArglistRule());
	        }
       		add(
       			$current, 
       			"dot1_arguments",
        		lv_dot1_arguments_7_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.argument");
	        afterParserOrEnumRuleCall();
	    }

)
))*(	otherlv_8=',' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getArglistAccess().getCommaKeyword_1_1_3_0());
    }
	otherlv_9='**' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getArglistAccess().getAsteriskAsteriskKeyword_1_1_3_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArglistAccess().getDot2_testTestParserRuleCall_1_1_3_2_0()); 
	    }
		lv_dot2_test_10_0=ruletest		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArglistRule());
	        }
       		set(
       			$current, 
       			"dot2_test",
        		lv_dot2_test_10_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.test");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
    |(	otherlv_11='**' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getArglistAccess().getAsteriskAsteriskKeyword_1_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArglistAccess().getDot2_testTestParserRuleCall_1_2_1_0()); 
	    }
		lv_dot2_test_12_0=ruletest		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArglistRule());
	        }
       		set(
       			$current, 
       			"dot2_test",
        		lv_dot2_test_12_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.test");
	        afterParserOrEnumRuleCall();
	    }

)
)))(	otherlv_13=',' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getArglistAccess().getCommaKeyword_2());
    }
)?)
;





// Entry rule entryRuleargument
entryRuleargument returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getArgumentRule()); }
	 iv_ruleargument=ruleargument 
	 { $current=$iv_ruleargument.current; } 
	 EOF 
;

// Rule argument
ruleargument returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getArgumentAccess().getTestParserRuleCall_0()); 
    }
    this_test_0=ruletest
    { 
        $current = $this_test_0.current; 
        afterParserOrEnumRuleCall();
    }
(((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getArgumentAccess().getArgumentTestAction_1_0_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getArgumentAccess().getComp_forComp_forParserRuleCall_1_0_1_0()); 
	    }
		lv_comp_for_2_0=rulecomp_for		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArgumentRule());
	        }
       		set(
       			$current, 
       			"comp_for",
        		lv_comp_for_2_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.comp_for");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getArgumentAccess().getArgumentTestAction_1_1_0(),
            $current);
    }
)	otherlv_4='=' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getArgumentAccess().getEqualsSignKeyword_1_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArgumentAccess().getTest2TestParserRuleCall_1_1_2_0()); 
	    }
		lv_test2_5_0=ruletest		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArgumentRule());
	        }
       		set(
       			$current, 
       			"test2",
        		lv_test2_5_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.test");
	        afterParserOrEnumRuleCall();
	    }

)
)))?)
;





// Entry rule entryRulelist_iter
entryRulelist_iter returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getList_iterRule()); }
	 iv_rulelist_iter=rulelist_iter 
	 { $current=$iv_rulelist_iter.current; } 
	 EOF 
;

// Rule list_iter
rulelist_iter returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getList_iterAccess().getList_forParserRuleCall_0()); 
    }
    this_list_for_0=rulelist_for
    { 
        $current = $this_list_for_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getList_iterAccess().getList_ifParserRuleCall_1()); 
    }
    this_list_if_1=rulelist_if
    { 
        $current = $this_list_if_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRulelist_for
entryRulelist_for returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getList_forRule()); }
	 iv_rulelist_for=rulelist_for 
	 { $current=$iv_rulelist_for.current; } 
	 EOF 
;

// Rule list_for
rulelist_for returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='for' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getList_forAccess().getForKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getList_forAccess().getExprlistExprlistParserRuleCall_1_0()); 
	    }
		lv_exprlist_1_0=ruleexprlist		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getList_forRule());
	        }
       		set(
       			$current, 
       			"exprlist",
        		lv_exprlist_1_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.exprlist");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='in' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getList_forAccess().getInKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getList_forAccess().getTestlist_safeTestlist_safeParserRuleCall_3_0()); 
	    }
		lv_testlist_safe_3_0=ruletestlist_safe		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getList_forRule());
	        }
       		set(
       			$current, 
       			"testlist_safe",
        		lv_testlist_safe_3_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.testlist_safe");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getList_forAccess().getList_iterList_iterParserRuleCall_4_0()); 
	    }
		lv_list_iter_4_0=rulelist_iter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getList_forRule());
	        }
       		set(
       			$current, 
       			"list_iter",
        		lv_list_iter_4_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.list_iter");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRulelist_if
entryRulelist_if returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getList_ifRule()); }
	 iv_rulelist_if=rulelist_if 
	 { $current=$iv_rulelist_if.current; } 
	 EOF 
;

// Rule list_if
rulelist_if returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='if' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getList_ifAccess().getIfKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getList_ifAccess().getOld_testTestParserRuleCall_1_0()); 
	    }
		lv_old_test_1_0=ruletest		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getList_ifRule());
	        }
       		set(
       			$current, 
       			"old_test",
        		lv_old_test_1_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.test");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getList_ifAccess().getList_iterList_iterParserRuleCall_2_0()); 
	    }
		lv_list_iter_2_0=rulelist_iter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getList_ifRule());
	        }
       		set(
       			$current, 
       			"list_iter",
        		lv_list_iter_2_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.list_iter");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRulecomp_iter
entryRulecomp_iter returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getComp_iterRule()); }
	 iv_rulecomp_iter=rulecomp_iter 
	 { $current=$iv_rulecomp_iter.current; } 
	 EOF 
;

// Rule comp_iter
rulecomp_iter returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getComp_iterAccess().getComp_forParserRuleCall_0()); 
    }
    this_comp_for_0=rulecomp_for
    { 
        $current = $this_comp_for_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getComp_iterAccess().getComp_ifParserRuleCall_1()); 
    }
    this_comp_if_1=rulecomp_if
    { 
        $current = $this_comp_if_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRulecomp_for
entryRulecomp_for returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getComp_forRule()); }
	 iv_rulecomp_for=rulecomp_for 
	 { $current=$iv_rulecomp_for.current; } 
	 EOF 
;

// Rule comp_for
rulecomp_for returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='for' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getComp_forAccess().getForKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getComp_forAccess().getExprlistExprlistParserRuleCall_1_0()); 
	    }
		lv_exprlist_1_0=ruleexprlist		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getComp_forRule());
	        }
       		set(
       			$current, 
       			"exprlist",
        		lv_exprlist_1_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.exprlist");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='in' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getComp_forAccess().getInKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getComp_forAccess().getOr_testOr_testParserRuleCall_3_0()); 
	    }
		lv_or_test_3_0=ruleor_test		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getComp_forRule());
	        }
       		set(
       			$current, 
       			"or_test",
        		lv_or_test_3_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.or_test");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getComp_forAccess().getComp_iterComp_iterParserRuleCall_4_0()); 
	    }
		lv_comp_iter_4_0=rulecomp_iter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getComp_forRule());
	        }
       		set(
       			$current, 
       			"comp_iter",
        		lv_comp_iter_4_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.comp_iter");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRulecomp_if
entryRulecomp_if returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getComp_ifRule()); }
	 iv_rulecomp_if=rulecomp_if 
	 { $current=$iv_rulecomp_if.current; } 
	 EOF 
;

// Rule comp_if
rulecomp_if returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='if' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getComp_ifAccess().getIfKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getComp_ifAccess().getTestTestParserRuleCall_1_0()); 
	    }
		lv_test_1_0=ruletest		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getComp_ifRule());
	        }
       		set(
       			$current, 
       			"test",
        		lv_test_1_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.test");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getComp_ifAccess().getComp_iterComp_iterParserRuleCall_2_0()); 
	    }
		lv_comp_iter_2_0=rulecomp_iter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getComp_ifRule());
	        }
       		set(
       			$current, 
       			"comp_iter",
        		lv_comp_iter_2_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.comp_iter");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuletestlist1
entryRuletestlist1 returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTestlist1Rule()); }
	 iv_ruletestlist1=ruletestlist1 
	 { $current=$iv_ruletestlist1.current; } 
	 EOF 
;

// Rule testlist1
ruletestlist1 returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getTestlist1Access().getTestlist1Action_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTestlist1Access().getTestsTestParserRuleCall_1_0()); 
	    }
		lv_tests_1_0=ruletest		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTestlist1Rule());
	        }
       		add(
       			$current, 
       			"tests",
        		lv_tests_1_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.test");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTestlist1Access().getCommaKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTestlist1Access().getTestsTestParserRuleCall_2_1_0()); 
	    }
		lv_tests_3_0=ruletest		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTestlist1Rule());
	        }
       		add(
       			$current, 
       			"tests",
        		lv_tests_3_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.test");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleyield_expr
entryRuleyield_expr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getYield_exprRule()); }
	 iv_ruleyield_expr=ruleyield_expr 
	 { $current=$iv_ruleyield_expr.current; } 
	 EOF 
;

// Rule yield_expr
ruleyield_expr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getYield_exprAccess().getYield_exprAction_0(),
            $current);
    }
)	otherlv_1='yield' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getYield_exprAccess().getYieldKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getYield_exprAccess().getTestlistTestlistParserRuleCall_2_0()); 
	    }
		lv_testlist_2_0=ruletestlist		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getYield_exprRule());
	        }
       		set(
       			$current, 
       			"testlist",
        		lv_testlist_2_0, 
        		"lu.ses.engineering.spell.controlflow.SpellGrammar.testlist");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRulePython_Statement
entryRulePython_Statement returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getPython_StatementRule()); } 
	 iv_rulePython_Statement=rulePython_Statement 
	 { $current=$iv_rulePython_Statement.current.getText(); }  
	 EOF 
;

// Rule Python_Statement
rulePython_Statement returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='Step' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPython_StatementAccess().getStepKeyword_0()); 
    }

    |
	kw='ShowTM' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPython_StatementAccess().getShowTMKeyword_1()); 
    }

    |
	kw='Verify' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPython_StatementAccess().getVerifyKeyword_2()); 
    }

    |
	kw='Send' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPython_StatementAccess().getSendKeyword_3()); 
    }

    |
	kw='GetTM' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPython_StatementAccess().getGetTMKeyword_4()); 
    }

    |
	kw='Goto' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPython_StatementAccess().getGotoKeyword_5()); 
    }

    |
	kw='SetLimits' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPython_StatementAccess().getSetLimitsKeyword_6()); 
    }

    |
	kw='GetLimits' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPython_StatementAccess().getGetLimitsKeyword_7()); 
    }

    |
	kw='BuildTC' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPython_StatementAccess().getBuildTCKeyword_8()); 
    }

    |
	kw='DisplayStep' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPython_StatementAccess().getDisplayStepKeyword_9()); 
    }

    |
	kw='WaitFor' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPython_StatementAccess().getWaitForKeyword_10()); 
    }

    |    this_NAME_TERMINAL_11=RULE_NAME_TERMINAL    {
		$current.merge(this_NAME_TERMINAL_11);
    }

    { 
    newLeafNode(this_NAME_TERMINAL_11, grammarAccess.getPython_StatementAccess().getNAME_TERMINALTerminalRuleCall_11()); 
    }
)
    ;





// Entry rule entryRuleNumberWithPlusOrMinus
entryRuleNumberWithPlusOrMinus returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getNumberWithPlusOrMinusRule()); } 
	 iv_ruleNumberWithPlusOrMinus=ruleNumberWithPlusOrMinus 
	 { $current=$iv_ruleNumberWithPlusOrMinus.current.getText(); }  
	 EOF 
;

// Rule NumberWithPlusOrMinus
ruleNumberWithPlusOrMinus returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	kw='+' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNumberWithPlusOrMinusAccess().getPlusSignKeyword_0_0()); 
    }

    |
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNumberWithPlusOrMinusAccess().getHyphenMinusKeyword_0_1()); 
    }
)?(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNumberWithPlusOrMinusAccess().getFullStopKeyword_1()); 
    }
)?    this_NUMBER_3=RULE_NUMBER    {
		$current.merge(this_NUMBER_3);
    }

    { 
    newLeafNode(this_NUMBER_3, grammarAccess.getNumberWithPlusOrMinusAccess().getNUMBERTerminalRuleCall_2()); 
    }
)
    ;





// Entry rule entryRuleNAME
entryRuleNAME returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getNAMERule()); } 
	 iv_ruleNAME=ruleNAME 
	 { $current=$iv_ruleNAME.current.getText(); }  
	 EOF 
;

// Rule NAME
ruleNAME returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getNAMEAccess().getPython_StatementParserRuleCall()); 
    }
    this_Python_Statement_0=rulePython_Statement    {
		$current.merge(this_Python_Statement_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    ;





// Entry rule entryRuleNL
entryRuleNL returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getNLRule()); } 
	 iv_ruleNL=ruleNL 
	 { $current=$iv_ruleNL.current.getText(); }  
	 EOF 
;

// Rule NL
ruleNL returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='\\' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNLAccess().getReverseSolidusKeyword_0()); 
    }
    this_WS_1=RULE_WS    {
		$current.merge(this_WS_1);
    }

    { 
    newLeafNode(this_WS_1, grammarAccess.getNLAccess().getWSTerminalRuleCall_1()); 
    }
)
    ;





RULE_ENDIF : '#' 'ENDIF' ~(('\n'|'\r'))*;

RULE_ENDWHILE : '#' 'ENDWHILE' ~(('\n'|'\r'))*;

RULE_ENDFOR : '#' 'ENDFOR' ~(('\n'|'\r'))*;

RULE_ENDWITH : '#' 'ENDWITH' ~(('\n'|'\r'))*;

RULE_ENDDEF : '#' 'ENDDEF' ~(('\n'|'\r'))*;

RULE_ENDTRY : '#' 'ENDTRY' ~(('\n'|'\r'))*;

RULE_ENDCLASS : '#' 'ENDCLASS' ~(('\n'|'\r'))*;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '\'\'\'' ( options {greedy=false;} : . )*'\'\'\'';

RULE_SL_COMMENT : '#' ~(('\n'|'\r'))*;

RULE_WS : (' '|'\t'|'\\'? '\r'? '\n')+;

RULE_NAME_TERMINAL : ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_NUMBER : ('0'..'9')+ (('x'|'X'|'b'|'O'|'o'|'B') ('0'..'9'|'a'..'f'|'A'..'F')+)? ('.' ('0'..'9')+)? (('E'|'e') ('-'|'+')? ('0'..'9')+)? 'L'?;

RULE_ANY_OTHER : .;


