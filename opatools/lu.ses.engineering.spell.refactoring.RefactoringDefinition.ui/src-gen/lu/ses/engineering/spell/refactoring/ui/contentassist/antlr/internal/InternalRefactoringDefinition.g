/*
 * generated by Xtext
 */
grammar InternalRefactoringDefinition;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package lu.ses.engineering.spell.refactoring.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package lu.ses.engineering.spell.refactoring.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import lu.ses.engineering.spell.refactoring.services.RefactoringDefinitionGrammarAccess;

}

@parser::members {
 
 	private RefactoringDefinitionGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(RefactoringDefinitionGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleRefactorings
entryRuleRefactorings 
:
{ before(grammarAccess.getRefactoringsRule()); }
	 ruleRefactorings
{ after(grammarAccess.getRefactoringsRule()); } 
	 EOF 
;

// Rule Refactorings
ruleRefactorings
    @init {
		int stackSize = keepStackSize();
    }
	:
(
(
{ before(grammarAccess.getRefactoringsAccess().getRefactoringsAssignment()); }
(rule__Refactorings__RefactoringsAssignment)
{ after(grammarAccess.getRefactoringsAccess().getRefactoringsAssignment()); }
)
(
{ before(grammarAccess.getRefactoringsAccess().getRefactoringsAssignment()); }
(rule__Refactorings__RefactoringsAssignment)*
{ after(grammarAccess.getRefactoringsAccess().getRefactoringsAssignment()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulerefactorMapEntry
entryRulerefactorMapEntry 
:
{ before(grammarAccess.getRefactorMapEntryRule()); }
	 rulerefactorMapEntry
{ after(grammarAccess.getRefactorMapEntryRule()); } 
	 EOF 
;

// Rule refactorMapEntry
rulerefactorMapEntry
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRefactorMapEntryAccess().getGroup()); }
(rule__RefactorMapEntry__Group__0)
{ after(grammarAccess.getRefactorMapEntryAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}





// Entry rule entryRuleargRefactor
entryRuleargRefactor 
:
{ before(grammarAccess.getArgRefactorRule()); }
	 ruleargRefactor
{ after(grammarAccess.getArgRefactorRule()); } 
	 EOF 
;

// Rule argRefactor
ruleargRefactor
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getArgRefactorAccess().getGroup()); }
(rule__ArgRefactor__Group__0)
{ after(grammarAccess.getArgRefactorAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__RefactorMapEntry__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RefactorMapEntry__Group__0__Impl
	rule__RefactorMapEntry__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RefactorMapEntry__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRefactorMapEntryAccess().getKeyAssignment_0()); }
(rule__RefactorMapEntry__KeyAssignment_0)
{ after(grammarAccess.getRefactorMapEntryAccess().getKeyAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RefactorMapEntry__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RefactorMapEntry__Group__1__Impl
	rule__RefactorMapEntry__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RefactorMapEntry__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRefactorMapEntryAccess().getWSTerminalRuleCall_1()); }
	RULE_WS
{ after(grammarAccess.getRefactorMapEntryAccess().getWSTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RefactorMapEntry__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RefactorMapEntry__Group__2__Impl
	rule__RefactorMapEntry__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__RefactorMapEntry__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRefactorMapEntryAccess().getValueAssignment_2()); }
(rule__RefactorMapEntry__ValueAssignment_2)
{ after(grammarAccess.getRefactorMapEntryAccess().getValueAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RefactorMapEntry__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RefactorMapEntry__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RefactorMapEntry__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRefactorMapEntryAccess().getNLTerminalRuleCall_3()); }
(	RULE_NL)?
{ after(grammarAccess.getRefactorMapEntryAccess().getNLTerminalRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}











rule__ArgRefactor__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArgRefactor__Group__0__Impl
	rule__ArgRefactor__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ArgRefactor__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArgRefactorAccess().getMnemAssignment_0()); }
(rule__ArgRefactor__MnemAssignment_0)
{ after(grammarAccess.getArgRefactorAccess().getMnemAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArgRefactor__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArgRefactor__Group__1__Impl
	rule__ArgRefactor__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ArgRefactor__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArgRefactorAccess().getWSTerminalRuleCall_1()); }
	RULE_WS
{ after(grammarAccess.getArgRefactorAccess().getWSTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArgRefactor__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArgRefactor__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ArgRefactor__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArgRefactorAccess().getRawAssignment_2()); }
(rule__ArgRefactor__RawAssignment_2)
{ after(grammarAccess.getArgRefactorAccess().getRawAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}









rule__Refactorings__RefactoringsAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRefactoringsAccess().getRefactoringsRefactorMapEntryParserRuleCall_0()); }
	rulerefactorMapEntry{ after(grammarAccess.getRefactoringsAccess().getRefactoringsRefactorMapEntryParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RefactorMapEntry__KeyAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRefactorMapEntryAccess().getKeyVALUETerminalRuleCall_0_0()); }
	RULE_VALUE{ after(grammarAccess.getRefactorMapEntryAccess().getKeyVALUETerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RefactorMapEntry__ValueAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRefactorMapEntryAccess().getValueVALUETerminalRuleCall_2_0()); }
	RULE_VALUE{ after(grammarAccess.getRefactorMapEntryAccess().getValueVALUETerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__ArgRefactor__MnemAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArgRefactorAccess().getMnemVALUETerminalRuleCall_0_0()); }
	RULE_VALUE{ after(grammarAccess.getArgRefactorAccess().getMnemVALUETerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ArgRefactor__RawAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArgRefactorAccess().getRawVALUETerminalRuleCall_2_0()); }
	RULE_VALUE{ after(grammarAccess.getArgRefactorAccess().getRawVALUETerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_WS : '\t'+;

RULE_NL : ('\r'|'\n')+;

RULE_VALUE : ~(('\t'|'\r'|'\n'))*;


