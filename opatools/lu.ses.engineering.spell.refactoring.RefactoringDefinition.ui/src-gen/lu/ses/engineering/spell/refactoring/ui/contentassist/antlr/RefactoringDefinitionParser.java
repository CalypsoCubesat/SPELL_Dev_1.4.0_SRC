/*
 * generated by Xtext
 */
package lu.ses.engineering.spell.refactoring.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import lu.ses.engineering.spell.refactoring.services.RefactoringDefinitionGrammarAccess;

public class RefactoringDefinitionParser extends AbstractContentAssistParser {
	
	@Inject
	private RefactoringDefinitionGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected lu.ses.engineering.spell.refactoring.ui.contentassist.antlr.internal.InternalRefactoringDefinitionParser createParser() {
		lu.ses.engineering.spell.refactoring.ui.contentassist.antlr.internal.InternalRefactoringDefinitionParser result = new lu.ses.engineering.spell.refactoring.ui.contentassist.antlr.internal.InternalRefactoringDefinitionParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getRefactorMapEntryAccess().getGroup(), "rule__RefactorMapEntry__Group__0");
					put(grammarAccess.getArgRefactorMapEntryAccess().getGroup(), "rule__ArgRefactorMapEntry__Group__0");
					put(grammarAccess.getArgRefactorAccess().getGroup(), "rule__ArgRefactor__Group__0");
					put(grammarAccess.getRefactoringsAccess().getRefactoringsAssignment(), "rule__Refactorings__RefactoringsAssignment");
					put(grammarAccess.getRefactorMapEntryAccess().getKeyAssignment_0(), "rule__RefactorMapEntry__KeyAssignment_0");
					put(grammarAccess.getRefactorMapEntryAccess().getValueAssignment_2(), "rule__RefactorMapEntry__ValueAssignment_2");
					put(grammarAccess.getArgRefactorMapEntryAccess().getKeyAssignment_0(), "rule__ArgRefactorMapEntry__KeyAssignment_0");
					put(grammarAccess.getArgRefactorMapEntryAccess().getValueAssignment_2(), "rule__ArgRefactorMapEntry__ValueAssignment_2");
					put(grammarAccess.getArgRefactorAccess().getMnemAssignment_0(), "rule__ArgRefactor__MnemAssignment_0");
					put(grammarAccess.getArgRefactorAccess().getRawAssignment_2(), "rule__ArgRefactor__RawAssignment_2");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			lu.ses.engineering.spell.refactoring.ui.contentassist.antlr.internal.InternalRefactoringDefinitionParser typedParser = (lu.ses.engineering.spell.refactoring.ui.contentassist.antlr.internal.InternalRefactoringDefinitionParser) parser;
			typedParser.entryRuleRefactorings();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] {  };
	}
	
	public RefactoringDefinitionGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(RefactoringDefinitionGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
