/*
* generated by Xtext
*/
package lu.ses.engineering.B7022SPELL.pages.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;


@Singleton
public class TmDisplayPagesGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class TmDisplayPageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TmDisplayPage");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPageFileParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIMP_FileParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//TmDisplayPage:
		//	PageFile | IMP_File;
		public ParserRule getRule() { return rule; }

		//=> PageFile | IMP_File
		public Alternatives getAlternatives() { return cAlternatives; }

		//=> PageFile
		public RuleCall getPageFileParserRuleCall_0() { return cPageFileParserRuleCall_0; }

		//IMP_File
		public RuleCall getIMP_FileParserRuleCall_1() { return cIMP_FileParserRuleCall_1; }
	}

	public class PageFileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PageFile");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXmltabulardisplaydefinitionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cRowAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRowEntryParserRuleCall_1_0 = (RuleCall)cRowAssignment_1.eContents().get(0);
		
		//PageFile returns Xmltabulardisplaydefinition:
		//	{Xmltabulardisplaydefinition} row+=Entry*;
		public ParserRule getRule() { return rule; }

		//{Xmltabulardisplaydefinition} row+=Entry*
		public Group getGroup() { return cGroup; }

		//{Xmltabulardisplaydefinition}
		public Action getXmltabulardisplaydefinitionAction_0() { return cXmltabulardisplaydefinitionAction_0; }

		//row+=Entry*
		public Assignment getRowAssignment_1() { return cRowAssignment_1; }

		//Entry
		public RuleCall getRowEntryParserRuleCall_1_0() { return cRowEntryParserRuleCall_1_0; }
	}

	public class EntryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Entry");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCommentParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTmRowParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cMnemonicRowParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cStringTmRowParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Entry returns Row:
		//	Comment | TmRow | => MnemonicRow | StringTmRow;
		public ParserRule getRule() { return rule; }

		//Comment | TmRow | => MnemonicRow | StringTmRow
		public Alternatives getAlternatives() { return cAlternatives; }

		//Comment
		public RuleCall getCommentParserRuleCall_0() { return cCommentParserRuleCall_0; }

		//TmRow
		public RuleCall getTmRowParserRuleCall_1() { return cTmRowParserRuleCall_1; }

		//=> MnemonicRow
		public RuleCall getMnemonicRowParserRuleCall_2() { return cMnemonicRowParserRuleCall_2; }

		//StringTmRow
		public RuleCall getStringTmRowParserRuleCall_3() { return cStringTmRowParserRuleCall_3; }
	}

	public class MnemonicRowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MnemonicRow");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMnemonicRowAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNoteAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNoteSCP_IDParserRuleCall_1_0 = (RuleCall)cNoteAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameNoteParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final RuleCall cNLTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//MnemonicRow returns Row:
		//	{MnemonicRow} note=SCP_ID name=Note NL;
		public ParserRule getRule() { return rule; }

		//{MnemonicRow} note=SCP_ID name=Note NL
		public Group getGroup() { return cGroup; }

		//{MnemonicRow}
		public Action getMnemonicRowAction_0() { return cMnemonicRowAction_0; }

		//note=SCP_ID
		public Assignment getNoteAssignment_1() { return cNoteAssignment_1; }

		//SCP_ID
		public RuleCall getNoteSCP_IDParserRuleCall_1_0() { return cNoteSCP_IDParserRuleCall_1_0; }

		//name=Note
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//Note
		public RuleCall getNameNoteParserRuleCall_2_0() { return cNameNoteParserRuleCall_2_0; }

		//NL
		public RuleCall getNLTerminalRuleCall_3() { return cNLTerminalRuleCall_3; }
	}

	public class StringTmRowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringTmRow");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTmRowAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cNoteAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNoteNoteParserRuleCall_2_0 = (RuleCall)cNoteAssignment_2.eContents().get(0);
		private final RuleCall cNLTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//StringTmRow returns Row:
		//	{TmRow} name=ID note=Note NL;
		public ParserRule getRule() { return rule; }

		//{TmRow} name=ID note=Note NL
		public Group getGroup() { return cGroup; }

		//{TmRow}
		public Action getTmRowAction_0() { return cTmRowAction_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//note=Note
		public Assignment getNoteAssignment_2() { return cNoteAssignment_2; }

		//Note
		public RuleCall getNoteNoteParserRuleCall_2_0() { return cNoteNoteParserRuleCall_2_0; }

		//NL
		public RuleCall getNLTerminalRuleCall_3() { return cNLTerminalRuleCall_3; }
	}

	public class TmRowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TmRow");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTmRowAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameNUMTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cNoteAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNoteNoteParserRuleCall_2_0 = (RuleCall)cNoteAssignment_2.eContents().get(0);
		private final RuleCall cNLTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//TmRow returns Row:
		//	{TmRow} name=NUM note=Note NL;
		public ParserRule getRule() { return rule; }

		//{TmRow} name=NUM note=Note NL
		public Group getGroup() { return cGroup; }

		//{TmRow}
		public Action getTmRowAction_0() { return cTmRowAction_0; }

		//name=NUM
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//NUM
		public RuleCall getNameNUMTerminalRuleCall_1_0() { return cNameNUMTerminalRuleCall_1_0; }

		//note=Note
		public Assignment getNoteAssignment_2() { return cNoteAssignment_2; }

		//Note
		public RuleCall getNoteNoteParserRuleCall_2_0() { return cNoteNoteParserRuleCall_2_0; }

		//NL
		public RuleCall getNLTerminalRuleCall_3() { return cNLTerminalRuleCall_3; }
	}

	public class CommentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Comment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCommentAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTitleAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTitleCOMMENT_STRINGTerminalRuleCall_1_0 = (RuleCall)cTitleAssignment_1.eContents().get(0);
		private final RuleCall cNLTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//Comment returns Row:
		//	{Comment} title=COMMENT_STRING NL;
		public ParserRule getRule() { return rule; }

		//{Comment} title=COMMENT_STRING NL
		public Group getGroup() { return cGroup; }

		//{Comment}
		public Action getCommentAction_0() { return cCommentAction_0; }

		//title=COMMENT_STRING
		public Assignment getTitleAssignment_1() { return cTitleAssignment_1; }

		//COMMENT_STRING
		public RuleCall getTitleCOMMENT_STRINGTerminalRuleCall_1_0() { return cTitleCOMMENT_STRINGTerminalRuleCall_1_0; }

		//NL
		public RuleCall getNLTerminalRuleCall_2() { return cNLTerminalRuleCall_2; }
	}

	public class NoteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Note");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cNUMTerminalRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final Keyword cQuotationMarkKeyword_0_2 = (Keyword)cAlternatives_0.eContents().get(2);
		private final Keyword cApostropheKeyword_0_3 = (Keyword)cAlternatives_0.eContents().get(3);
		private final RuleCall cSCP_IDParserRuleCall_0_4 = (RuleCall)cAlternatives_0.eContents().get(4);
		private final Keyword cSPELLKeyword_0_5 = (Keyword)cAlternatives_0.eContents().get(5);
		private final Keyword cCMDKeyword_0_6 = (Keyword)cAlternatives_0.eContents().get(6);
		private final Keyword cTMKeyword_0_7 = (Keyword)cAlternatives_0.eContents().get(7);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final RuleCall cNUMTerminalRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		private final RuleCall cWSTerminalRuleCall_1_2 = (RuleCall)cAlternatives_1.eContents().get(2);
		private final Keyword cQuotationMarkKeyword_1_3 = (Keyword)cAlternatives_1.eContents().get(3);
		private final Keyword cApostropheKeyword_1_4 = (Keyword)cAlternatives_1.eContents().get(4);
		private final RuleCall cSCP_IDParserRuleCall_1_5 = (RuleCall)cAlternatives_1.eContents().get(5);
		private final Keyword cSPELLKeyword_1_6 = (Keyword)cAlternatives_1.eContents().get(6);
		private final Keyword cCMDKeyword_1_7 = (Keyword)cAlternatives_1.eContents().get(7);
		private final Keyword cTMKeyword_1_8 = (Keyword)cAlternatives_1.eContents().get(8);
		
		//Note returns ecore::EString:
		//	(ID | NUM | "\"" | "\'" | SCP_ID | "SPELL" | "CMD" | "TM") (ID | NUM | WS | "\"" | "\'" | SCP_ID | "SPELL" | "CMD" |
		//	"TM")*;
		public ParserRule getRule() { return rule; }

		//(ID | NUM | "\"" | "\'" | SCP_ID | "SPELL" | "CMD" | "TM") (ID | NUM | WS | "\"" | "\'" | SCP_ID | "SPELL" | "CMD" |
		//"TM")*
		public Group getGroup() { return cGroup; }

		//ID | NUM | "\"" | "\'" | SCP_ID | "SPELL" | "CMD" | "TM"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_0_0() { return cIDTerminalRuleCall_0_0; }

		//NUM
		public RuleCall getNUMTerminalRuleCall_0_1() { return cNUMTerminalRuleCall_0_1; }

		//"\""
		public Keyword getQuotationMarkKeyword_0_2() { return cQuotationMarkKeyword_0_2; }

		//"\'"
		public Keyword getApostropheKeyword_0_3() { return cApostropheKeyword_0_3; }

		//SCP_ID
		public RuleCall getSCP_IDParserRuleCall_0_4() { return cSCP_IDParserRuleCall_0_4; }

		//"SPELL"
		public Keyword getSPELLKeyword_0_5() { return cSPELLKeyword_0_5; }

		//"CMD"
		public Keyword getCMDKeyword_0_6() { return cCMDKeyword_0_6; }

		//"TM"
		public Keyword getTMKeyword_0_7() { return cTMKeyword_0_7; }

		//(ID | NUM | WS | "\"" | "\'" | SCP_ID | "SPELL" | "CMD" | "TM")*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_0() { return cIDTerminalRuleCall_1_0; }

		//NUM
		public RuleCall getNUMTerminalRuleCall_1_1() { return cNUMTerminalRuleCall_1_1; }

		//WS
		public RuleCall getWSTerminalRuleCall_1_2() { return cWSTerminalRuleCall_1_2; }

		//"\""
		public Keyword getQuotationMarkKeyword_1_3() { return cQuotationMarkKeyword_1_3; }

		//"\'"
		public Keyword getApostropheKeyword_1_4() { return cApostropheKeyword_1_4; }

		//SCP_ID
		public RuleCall getSCP_IDParserRuleCall_1_5() { return cSCP_IDParserRuleCall_1_5; }

		//"SPELL"
		public Keyword getSPELLKeyword_1_6() { return cSPELLKeyword_1_6; }

		//"CMD"
		public Keyword getCMDKeyword_1_7() { return cCMDKeyword_1_7; }

		//"TM"
		public Keyword getTMKeyword_1_8() { return cTMKeyword_1_8; }
	}

	public class SCP_IDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SCP_ID");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cSCP1Keyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cSCP2Keyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//SCP_ID returns ecore::EString:
		//	"SCP1" | "SCP2";
		public ParserRule getRule() { return rule; }

		//"SCP1" | "SCP2"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"SCP1"
		public Keyword getSCP1Keyword_0() { return cSCP1Keyword_0; }

		//"SCP2"
		public Keyword getSCP2Keyword_1() { return cSCP2Keyword_1; }
	}

	public class IMP_FileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IMP_File");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXmltabulardisplaydefinitionAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cSPELLKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final RuleCall cIMP_CMD_EntryParserRuleCall_1_0_1 = (RuleCall)cGroup_1_0.eContents().get(1);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cCMDKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final RuleCall cIMP_CMD_EntryParserRuleCall_1_1_1 = (RuleCall)cGroup_1_1.eContents().get(1);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Group cGroup_1_2_0 = (Group)cGroup_1_2.eContents().get(0);
		private final Keyword cTMKeyword_1_2_0_0 = (Keyword)cGroup_1_2_0.eContents().get(0);
		private final Assignment cRowAssignment_1_2_0_1 = (Assignment)cGroup_1_2_0.eContents().get(1);
		private final RuleCall cRowIMP_TM_EntryParserRuleCall_1_2_0_1_0 = (RuleCall)cRowAssignment_1_2_0_1.eContents().get(0);
		private final Assignment cRowAssignment_1_3 = (Assignment)cAlternatives_1.eContents().get(3);
		private final RuleCall cRowCommentParserRuleCall_1_3_0 = (RuleCall)cRowAssignment_1_3.eContents().get(0);
		private final RuleCall cIMP_CMD_EntryParserRuleCall_1_4 = (RuleCall)cAlternatives_1.eContents().get(4);
		
		//IMP_File returns Xmltabulardisplaydefinition:
		//	{Xmltabulardisplaydefinition} ("SPELL" IMP_CMD_Entry | "CMD" IMP_CMD_Entry | => ("TM" row+=IMP_TM_Entry) |
		//	row+=Comment | IMP_CMD_Entry)*;
		public ParserRule getRule() { return rule; }

		//{Xmltabulardisplaydefinition} ("SPELL" IMP_CMD_Entry | "CMD" IMP_CMD_Entry | => ("TM" row+=IMP_TM_Entry) | row+=Comment
		//| IMP_CMD_Entry)*
		public Group getGroup() { return cGroup; }

		//{Xmltabulardisplaydefinition}
		public Action getXmltabulardisplaydefinitionAction_0() { return cXmltabulardisplaydefinitionAction_0; }

		//("SPELL" IMP_CMD_Entry | "CMD" IMP_CMD_Entry | => ("TM" row+=IMP_TM_Entry) | row+=Comment | IMP_CMD_Entry)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"SPELL" IMP_CMD_Entry
		public Group getGroup_1_0() { return cGroup_1_0; }

		//"SPELL"
		public Keyword getSPELLKeyword_1_0_0() { return cSPELLKeyword_1_0_0; }

		//IMP_CMD_Entry
		public RuleCall getIMP_CMD_EntryParserRuleCall_1_0_1() { return cIMP_CMD_EntryParserRuleCall_1_0_1; }

		//"CMD" IMP_CMD_Entry
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"CMD"
		public Keyword getCMDKeyword_1_1_0() { return cCMDKeyword_1_1_0; }

		//IMP_CMD_Entry
		public RuleCall getIMP_CMD_EntryParserRuleCall_1_1_1() { return cIMP_CMD_EntryParserRuleCall_1_1_1; }

		//=> ("TM" row+=IMP_TM_Entry)
		public Group getGroup_1_2() { return cGroup_1_2; }

		//"TM" row+=IMP_TM_Entry
		public Group getGroup_1_2_0() { return cGroup_1_2_0; }

		//"TM"
		public Keyword getTMKeyword_1_2_0_0() { return cTMKeyword_1_2_0_0; }

		//row+=IMP_TM_Entry
		public Assignment getRowAssignment_1_2_0_1() { return cRowAssignment_1_2_0_1; }

		//IMP_TM_Entry
		public RuleCall getRowIMP_TM_EntryParserRuleCall_1_2_0_1_0() { return cRowIMP_TM_EntryParserRuleCall_1_2_0_1_0; }

		//row+=Comment
		public Assignment getRowAssignment_1_3() { return cRowAssignment_1_3; }

		//Comment
		public RuleCall getRowCommentParserRuleCall_1_3_0() { return cRowCommentParserRuleCall_1_3_0; }

		//IMP_CMD_Entry
		public RuleCall getIMP_CMD_EntryParserRuleCall_1_4() { return cIMP_CMD_EntryParserRuleCall_1_4; }
	}

	public class IMP_CMD_EntryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IMP_CMD_Entry");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNoteParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cNLTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//IMP_CMD_Entry:
		//	Note NL;
		public ParserRule getRule() { return rule; }

		//Note NL
		public Group getGroup() { return cGroup; }

		//Note
		public RuleCall getNoteParserRuleCall_0() { return cNoteParserRuleCall_0; }

		//NL
		public RuleCall getNLTerminalRuleCall_1() { return cNLTerminalRuleCall_1; }
	}

	public class IMP_TM_EntryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IMP_TM_Entry");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTmRowAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cNoteAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNoteNoteParserRuleCall_2_0 = (RuleCall)cNoteAssignment_2.eContents().get(0);
		private final RuleCall cNLTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//IMP_TM_Entry returns Row:
		//	{TmRow} name=ID note=Note NL;
		public ParserRule getRule() { return rule; }

		//{TmRow} name=ID note=Note NL
		public Group getGroup() { return cGroup; }

		//{TmRow}
		public Action getTmRowAction_0() { return cTmRowAction_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//note=Note
		public Assignment getNoteAssignment_2() { return cNoteAssignment_2; }

		//Note
		public RuleCall getNoteNoteParserRuleCall_2_0() { return cNoteNoteParserRuleCall_2_0; }

		//NL
		public RuleCall getNLTerminalRuleCall_3() { return cNLTerminalRuleCall_3; }
	}
	
	
	private TmDisplayPageElements pTmDisplayPage;
	private PageFileElements pPageFile;
	private EntryElements pEntry;
	private MnemonicRowElements pMnemonicRow;
	private StringTmRowElements pStringTmRow;
	private TmRowElements pTmRow;
	private CommentElements pComment;
	private NoteElements pNote;
	private SCP_IDElements pSCP_ID;
	private IMP_FileElements pIMP_File;
	private IMP_CMD_EntryElements pIMP_CMD_Entry;
	private IMP_TM_EntryElements pIMP_TM_Entry;
	private TerminalRule tCOMMENT_STRING;
	private TerminalRule tID;
	private TerminalRule tNUM;
	private TerminalRule tWS;
	private TerminalRule tNL;
	private TerminalRule tANY_OTHER;
	
	private final Grammar grammar;

	@Inject
	public TmDisplayPagesGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("lu.ses.engineering.B7022SPELL.pages.TmDisplayPages".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//TmDisplayPage:
	//	PageFile | IMP_File;
	public TmDisplayPageElements getTmDisplayPageAccess() {
		return (pTmDisplayPage != null) ? pTmDisplayPage : (pTmDisplayPage = new TmDisplayPageElements());
	}
	
	public ParserRule getTmDisplayPageRule() {
		return getTmDisplayPageAccess().getRule();
	}

	//PageFile returns Xmltabulardisplaydefinition:
	//	{Xmltabulardisplaydefinition} row+=Entry*;
	public PageFileElements getPageFileAccess() {
		return (pPageFile != null) ? pPageFile : (pPageFile = new PageFileElements());
	}
	
	public ParserRule getPageFileRule() {
		return getPageFileAccess().getRule();
	}

	//Entry returns Row:
	//	Comment | TmRow | => MnemonicRow | StringTmRow;
	public EntryElements getEntryAccess() {
		return (pEntry != null) ? pEntry : (pEntry = new EntryElements());
	}
	
	public ParserRule getEntryRule() {
		return getEntryAccess().getRule();
	}

	//MnemonicRow returns Row:
	//	{MnemonicRow} note=SCP_ID name=Note NL;
	public MnemonicRowElements getMnemonicRowAccess() {
		return (pMnemonicRow != null) ? pMnemonicRow : (pMnemonicRow = new MnemonicRowElements());
	}
	
	public ParserRule getMnemonicRowRule() {
		return getMnemonicRowAccess().getRule();
	}

	//StringTmRow returns Row:
	//	{TmRow} name=ID note=Note NL;
	public StringTmRowElements getStringTmRowAccess() {
		return (pStringTmRow != null) ? pStringTmRow : (pStringTmRow = new StringTmRowElements());
	}
	
	public ParserRule getStringTmRowRule() {
		return getStringTmRowAccess().getRule();
	}

	//TmRow returns Row:
	//	{TmRow} name=NUM note=Note NL;
	public TmRowElements getTmRowAccess() {
		return (pTmRow != null) ? pTmRow : (pTmRow = new TmRowElements());
	}
	
	public ParserRule getTmRowRule() {
		return getTmRowAccess().getRule();
	}

	//Comment returns Row:
	//	{Comment} title=COMMENT_STRING NL;
	public CommentElements getCommentAccess() {
		return (pComment != null) ? pComment : (pComment = new CommentElements());
	}
	
	public ParserRule getCommentRule() {
		return getCommentAccess().getRule();
	}

	//Note returns ecore::EString:
	//	(ID | NUM | "\"" | "\'" | SCP_ID | "SPELL" | "CMD" | "TM") (ID | NUM | WS | "\"" | "\'" | SCP_ID | "SPELL" | "CMD" |
	//	"TM")*;
	public NoteElements getNoteAccess() {
		return (pNote != null) ? pNote : (pNote = new NoteElements());
	}
	
	public ParserRule getNoteRule() {
		return getNoteAccess().getRule();
	}

	//SCP_ID returns ecore::EString:
	//	"SCP1" | "SCP2";
	public SCP_IDElements getSCP_IDAccess() {
		return (pSCP_ID != null) ? pSCP_ID : (pSCP_ID = new SCP_IDElements());
	}
	
	public ParserRule getSCP_IDRule() {
		return getSCP_IDAccess().getRule();
	}

	//IMP_File returns Xmltabulardisplaydefinition:
	//	{Xmltabulardisplaydefinition} ("SPELL" IMP_CMD_Entry | "CMD" IMP_CMD_Entry | => ("TM" row+=IMP_TM_Entry) |
	//	row+=Comment | IMP_CMD_Entry)*;
	public IMP_FileElements getIMP_FileAccess() {
		return (pIMP_File != null) ? pIMP_File : (pIMP_File = new IMP_FileElements());
	}
	
	public ParserRule getIMP_FileRule() {
		return getIMP_FileAccess().getRule();
	}

	//IMP_CMD_Entry:
	//	Note NL;
	public IMP_CMD_EntryElements getIMP_CMD_EntryAccess() {
		return (pIMP_CMD_Entry != null) ? pIMP_CMD_Entry : (pIMP_CMD_Entry = new IMP_CMD_EntryElements());
	}
	
	public ParserRule getIMP_CMD_EntryRule() {
		return getIMP_CMD_EntryAccess().getRule();
	}

	//IMP_TM_Entry returns Row:
	//	{TmRow} name=ID note=Note NL;
	public IMP_TM_EntryElements getIMP_TM_EntryAccess() {
		return (pIMP_TM_Entry != null) ? pIMP_TM_Entry : (pIMP_TM_Entry = new IMP_TM_EntryElements());
	}
	
	public ParserRule getIMP_TM_EntryRule() {
		return getIMP_TM_EntryAccess().getRule();
	}

	//terminal COMMENT_STRING:
	//	"#" !("\r" | "\n")*;
	public TerminalRule getCOMMENT_STRINGRule() {
		return (tCOMMENT_STRING != null) ? tCOMMENT_STRING : (tCOMMENT_STRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "COMMENT_STRING"));
	} 

	//terminal ID:
	//	"^"? !("0".."9" | "\r" | "\n" | "\t" | " " | ",") !("\t" | " " | "," | "\r" | "\n")*;
	public TerminalRule getIDRule() {
		return (tID != null) ? tID : (tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ID"));
	} 

	//terminal NUM:
	//	"0".."9"+;
	public TerminalRule getNUMRule() {
		return (tNUM != null) ? tNUM : (tNUM = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "NUM"));
	} 

	//terminal WS:
	//	(" " | "\t" | ",")+;
	public TerminalRule getWSRule() {
		return (tWS != null) ? tWS : (tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WS"));
	} 

	//terminal NL:
	//	("\r" | "\n")+;
	public TerminalRule getNLRule() {
		return (tNL != null) ? tNL : (tNL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "NL"));
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return (tANY_OTHER != null) ? tANY_OTHER : (tANY_OTHER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ANY_OTHER"));
	} 
}
