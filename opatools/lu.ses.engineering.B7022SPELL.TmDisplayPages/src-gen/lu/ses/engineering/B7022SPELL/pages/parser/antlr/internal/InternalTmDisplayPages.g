/*
* generated by Xtext
*/
grammar InternalTmDisplayPages;

options {
	superClass=AbstractInternalAntlrParser;
	backtrack=true;
	
}

@lexer::header {
package lu.ses.engineering.B7022SPELL.pages.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package lu.ses.engineering.B7022SPELL.pages.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import lu.ses.engineering.B7022SPELL.pages.services.TmDisplayPagesGrammarAccess;

}

@parser::members {

/*
  This grammar contains a lot of empty actions to work around a bug in ANTLR.
  Otherwise the ANTLR tool will create synpreds that cannot be compiled in some rare cases.
*/
 
 	private TmDisplayPagesGrammarAccess grammarAccess;
 	
    public InternalTmDisplayPagesParser(TokenStream input, TmDisplayPagesGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "TmDisplayPage";	
   	}
   	
   	@Override
   	protected TmDisplayPagesGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleTmDisplayPage
entryRuleTmDisplayPage returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTmDisplayPageRule()); }
	 iv_ruleTmDisplayPage=ruleTmDisplayPage 
	 { $current=$iv_ruleTmDisplayPage.current; } 
	 EOF 
;

// Rule TmDisplayPage
ruleTmDisplayPage returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((	rulePageFile)=>
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getTmDisplayPageAccess().getPageFileParserRuleCall_0()); 
    }
    this_PageFile_0=rulePageFile
    { 
        $current = $this_PageFile_0.current; 
        afterParserOrEnumRuleCall();
    }
)
    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getTmDisplayPageAccess().getIMP_FileParserRuleCall_1()); 
    }
    this_IMP_File_1=ruleIMP_File
    { 
        $current = $this_IMP_File_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRulePageFile
entryRulePageFile returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPageFileRule()); }
	 iv_rulePageFile=rulePageFile 
	 { $current=$iv_rulePageFile.current; } 
	 EOF 
;

// Rule PageFile
rulePageFile returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getPageFileAccess().getXmltabulardisplaydefinitionAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPageFileAccess().getRowEntryParserRuleCall_1_0()); 
	    }
		lv_row_1_0=ruleEntry		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPageFileRule());
	        }
       		add(
       			$current, 
       			"row",
        		lv_row_1_0, 
        		"Entry");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleEntry
entryRuleEntry returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEntryRule()); }
	 iv_ruleEntry=ruleEntry 
	 { $current=$iv_ruleEntry.current; } 
	 EOF 
;

// Rule Entry
ruleEntry returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getEntryAccess().getCommentParserRuleCall_0()); 
    }
    this_Comment_0=ruleComment
    { 
        $current = $this_Comment_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getEntryAccess().getTmRowParserRuleCall_1()); 
    }
    this_TmRow_1=ruleTmRow
    { 
        $current = $this_TmRow_1.current; 
        afterParserOrEnumRuleCall();
    }

    |((	ruleMnemonicRow)=>
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getEntryAccess().getMnemonicRowParserRuleCall_2()); 
    }
    this_MnemonicRow_2=ruleMnemonicRow
    { 
        $current = $this_MnemonicRow_2.current; 
        afterParserOrEnumRuleCall();
    }
)
    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getEntryAccess().getStringTmRowParserRuleCall_3()); 
    }
    this_StringTmRow_3=ruleStringTmRow
    { 
        $current = $this_StringTmRow_3.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleMnemonicRow
entryRuleMnemonicRow returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMnemonicRowRule()); }
	 iv_ruleMnemonicRow=ruleMnemonicRow 
	 { $current=$iv_ruleMnemonicRow.current; } 
	 EOF 
;

// Rule MnemonicRow
ruleMnemonicRow returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getMnemonicRowAccess().getMnemonicRowAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMnemonicRowAccess().getNoteSCP_IDParserRuleCall_1_0()); 
	    }
		lv_note_1_0=ruleSCP_ID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMnemonicRowRule());
	        }
       		set(
       			$current, 
       			"note",
        		lv_note_1_0, 
        		"SCP_ID");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMnemonicRowAccess().getNameNoteParserRuleCall_2_0()); 
	    }
		lv_name_2_0=ruleNote		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMnemonicRowRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"Note");
	        afterParserOrEnumRuleCall();
	    }

)
)this_NL_3=RULE_NL
    { 
    newLeafNode(this_NL_3, grammarAccess.getMnemonicRowAccess().getNLTerminalRuleCall_3()); 
    }
)
;





// Entry rule entryRuleStringTmRow
entryRuleStringTmRow returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStringTmRowRule()); }
	 iv_ruleStringTmRow=ruleStringTmRow 
	 { $current=$iv_ruleStringTmRow.current; } 
	 EOF 
;

// Rule StringTmRow
ruleStringTmRow returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getStringTmRowAccess().getTmRowAction_0(),
            $current);
    }
)(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getStringTmRowAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStringTmRowRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getStringTmRowAccess().getNoteNoteParserRuleCall_2_0()); 
	    }
		lv_note_2_0=ruleNote		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStringTmRowRule());
	        }
       		set(
       			$current, 
       			"note",
        		lv_note_2_0, 
        		"Note");
	        afterParserOrEnumRuleCall();
	    }

)
)this_NL_3=RULE_NL
    { 
    newLeafNode(this_NL_3, grammarAccess.getStringTmRowAccess().getNLTerminalRuleCall_3()); 
    }
)
;





// Entry rule entryRuleTmRow
entryRuleTmRow returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTmRowRule()); }
	 iv_ruleTmRow=ruleTmRow 
	 { $current=$iv_ruleTmRow.current; } 
	 EOF 
;

// Rule TmRow
ruleTmRow returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getTmRowAccess().getTmRowAction_0(),
            $current);
    }
)(
(
		lv_name_1_0=RULE_NUM
		{
			newLeafNode(lv_name_1_0, grammarAccess.getTmRowAccess().getNameNUMTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTmRowRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"NUM");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTmRowAccess().getNoteNoteParserRuleCall_2_0()); 
	    }
		lv_note_2_0=ruleNote		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTmRowRule());
	        }
       		set(
       			$current, 
       			"note",
        		lv_note_2_0, 
        		"Note");
	        afterParserOrEnumRuleCall();
	    }

)
)this_NL_3=RULE_NL
    { 
    newLeafNode(this_NL_3, grammarAccess.getTmRowAccess().getNLTerminalRuleCall_3()); 
    }
)
;





// Entry rule entryRuleComment
entryRuleComment returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCommentRule()); }
	 iv_ruleComment=ruleComment 
	 { $current=$iv_ruleComment.current; } 
	 EOF 
;

// Rule Comment
ruleComment returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getCommentAccess().getCommentAction_0(),
            $current);
    }
)(
(
		lv_title_1_0=RULE_COMMENT_STRING
		{
			newLeafNode(lv_title_1_0, grammarAccess.getCommentAccess().getTitleCOMMENT_STRINGTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCommentRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"title",
        		lv_title_1_0, 
        		"COMMENT_STRING");
	    }

)
)this_NL_2=RULE_NL
    { 
    newLeafNode(this_NL_2, grammarAccess.getCommentAccess().getNLTerminalRuleCall_2()); 
    }
)
;





// Entry rule entryRuleNote
entryRuleNote returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getNoteRule()); } 
	 iv_ruleNote=ruleNote 
	 { $current=$iv_ruleNote.current.getText(); }  
	 EOF 
;

// Rule Note
ruleNote returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getNoteAccess().getIDTerminalRuleCall_0_0()); 
    }

    |    this_NUM_1=RULE_NUM    {
		$current.merge(this_NUM_1);
    }

    { 
    newLeafNode(this_NUM_1, grammarAccess.getNoteAccess().getNUMTerminalRuleCall_0_1()); 
    }

    |
	kw='"' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNoteAccess().getQuotationMarkKeyword_0_2()); 
    }

    |
	kw='\'' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNoteAccess().getApostropheKeyword_0_3()); 
    }

    |
    { 
        newCompositeNode(grammarAccess.getNoteAccess().getSCP_IDParserRuleCall_0_4()); 
    }
    this_SCP_ID_4=ruleSCP_ID    {
		$current.merge(this_SCP_ID_4);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
	kw='SPELL' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNoteAccess().getSPELLKeyword_0_5()); 
    }

    |
	kw='CMD' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNoteAccess().getCMDKeyword_0_6()); 
    }

    |
	kw='TM' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNoteAccess().getTMKeyword_0_7()); 
    }
)(    this_ID_8=RULE_ID    {
		$current.merge(this_ID_8);
    }

    { 
    newLeafNode(this_ID_8, grammarAccess.getNoteAccess().getIDTerminalRuleCall_1_0()); 
    }

    |    this_NUM_9=RULE_NUM    {
		$current.merge(this_NUM_9);
    }

    { 
    newLeafNode(this_NUM_9, grammarAccess.getNoteAccess().getNUMTerminalRuleCall_1_1()); 
    }

    |    this_WS_10=RULE_WS    {
		$current.merge(this_WS_10);
    }

    { 
    newLeafNode(this_WS_10, grammarAccess.getNoteAccess().getWSTerminalRuleCall_1_2()); 
    }

    |
	kw='"' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNoteAccess().getQuotationMarkKeyword_1_3()); 
    }

    |
	kw='\'' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNoteAccess().getApostropheKeyword_1_4()); 
    }

    |
    { 
        newCompositeNode(grammarAccess.getNoteAccess().getSCP_IDParserRuleCall_1_5()); 
    }
    this_SCP_ID_13=ruleSCP_ID    {
		$current.merge(this_SCP_ID_13);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
	kw='SPELL' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNoteAccess().getSPELLKeyword_1_6()); 
    }

    |
	kw='CMD' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNoteAccess().getCMDKeyword_1_7()); 
    }

    |
	kw='TM' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNoteAccess().getTMKeyword_1_8()); 
    }
)*)
    ;





// Entry rule entryRuleSCP_ID
entryRuleSCP_ID returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getSCP_IDRule()); } 
	 iv_ruleSCP_ID=ruleSCP_ID 
	 { $current=$iv_ruleSCP_ID.current.getText(); }  
	 EOF 
;

// Rule SCP_ID
ruleSCP_ID returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='SCP1' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSCP_IDAccess().getSCP1Keyword_0()); 
    }

    |
	kw='SCP2' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSCP_IDAccess().getSCP2Keyword_1()); 
    }
)
    ;





// Entry rule entryRuleIMP_File
entryRuleIMP_File returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIMP_FileRule()); }
	 iv_ruleIMP_File=ruleIMP_File 
	 { $current=$iv_ruleIMP_File.current; } 
	 EOF 
;

// Rule IMP_File
ruleIMP_File returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getIMP_FileAccess().getXmltabulardisplaydefinitionAction_0(),
            $current);
    }
)((	otherlv_1='SPELL' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getIMP_FileAccess().getSPELLKeyword_1_0_0());
    }

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getIMP_FileAccess().getIMP_CMD_EntryParserRuleCall_1_0_1()); 
    }
ruleIMP_CMD_Entry
    { 
        afterParserOrEnumRuleCall();
    }
)
    |(	otherlv_3='CMD' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getIMP_FileAccess().getCMDKeyword_1_1_0());
    }

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getIMP_FileAccess().getIMP_CMD_EntryParserRuleCall_1_1_1()); 
    }
ruleIMP_CMD_Entry
    { 
        afterParserOrEnumRuleCall();
    }
)
    |(((	'TM' 
(
(
ruleIMP_TM_Entry
)
)))=>(	otherlv_5='TM' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getIMP_FileAccess().getTMKeyword_1_2_0_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIMP_FileAccess().getRowIMP_TM_EntryParserRuleCall_1_2_0_1_0()); 
	    }
		lv_row_6_0=ruleIMP_TM_Entry		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIMP_FileRule());
	        }
       		add(
       			$current, 
       			"row",
        		lv_row_6_0, 
        		"IMP_TM_Entry");
	        afterParserOrEnumRuleCall();
	    }

)
)))
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getIMP_FileAccess().getRowCommentParserRuleCall_1_3_0()); 
	    }
		lv_row_7_0=ruleComment		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIMP_FileRule());
	        }
       		add(
       			$current, 
       			"row",
        		lv_row_7_0, 
        		"Comment");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getIMP_FileAccess().getIMP_CMD_EntryParserRuleCall_1_4()); 
    }
ruleIMP_CMD_Entry
    { 
        afterParserOrEnumRuleCall();
    }
)*)
;





// Entry rule entryRuleIMP_CMD_Entry
entryRuleIMP_CMD_Entry returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getIMP_CMD_EntryRule()); } 
	 iv_ruleIMP_CMD_Entry=ruleIMP_CMD_Entry 
	 { $current=$iv_ruleIMP_CMD_Entry.current.getText(); }  
	 EOF 
;

// Rule IMP_CMD_Entry
ruleIMP_CMD_Entry returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getIMP_CMD_EntryAccess().getNoteParserRuleCall_0()); 
    }
    this_Note_0=ruleNote    {
		$current.merge(this_Note_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
    this_NL_1=RULE_NL    {
		$current.merge(this_NL_1);
    }

    { 
    newLeafNode(this_NL_1, grammarAccess.getIMP_CMD_EntryAccess().getNLTerminalRuleCall_1()); 
    }
)
    ;





// Entry rule entryRuleIMP_TM_Entry
entryRuleIMP_TM_Entry returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIMP_TM_EntryRule()); }
	 iv_ruleIMP_TM_Entry=ruleIMP_TM_Entry 
	 { $current=$iv_ruleIMP_TM_Entry.current; } 
	 EOF 
;

// Rule IMP_TM_Entry
ruleIMP_TM_Entry returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getIMP_TM_EntryAccess().getTmRowAction_0(),
            $current);
    }
)(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getIMP_TM_EntryAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIMP_TM_EntryRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getIMP_TM_EntryAccess().getNoteNoteParserRuleCall_2_0()); 
	    }
		lv_note_2_0=ruleNote		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIMP_TM_EntryRule());
	        }
       		set(
       			$current, 
       			"note",
        		lv_note_2_0, 
        		"Note");
	        afterParserOrEnumRuleCall();
	    }

)
)this_NL_3=RULE_NL
    { 
    newLeafNode(this_NL_3, grammarAccess.getIMP_TM_EntryAccess().getNLTerminalRuleCall_3()); 
    }
)
;





RULE_COMMENT_STRING : '#' ~(('\r'|'\n'))*;

RULE_ID : '^'? ~(('0'..'9'|'\r'|'\n'|'\t'|' '|',')) ~(('\t'|' '|','|'\r'|'\n'))*;

RULE_NUM : ('0'..'9')+;

RULE_WS : (' '|'\t'|',')+;

RULE_NL : ('\r'|'\n')+;

RULE_ANY_OTHER : .;


