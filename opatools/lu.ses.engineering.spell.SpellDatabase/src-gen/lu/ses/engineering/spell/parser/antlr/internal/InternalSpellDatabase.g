/*
 * generated by Xtext
 */
grammar InternalSpellDatabase;

options {
	superClass=AbstractInternalAntlrParser;
	
	 k=3;
	
}

@lexer::header {
package lu.ses.engineering.spell.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package lu.ses.engineering.spell.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import lu.ses.engineering.spell.services.SpellDatabaseGrammarAccess;

}

@parser::members {

 	private SpellDatabaseGrammarAccess grammarAccess;
 	
    public InternalSpellDatabaseParser(TokenStream input, SpellDatabaseGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "SpellDatabase";	
   	}
   	
   	@Override
   	protected SpellDatabaseGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleSpellDatabase
entryRuleSpellDatabase returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ANY_OTHER", "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT");
	}
	:
	{ newCompositeNode(grammarAccess.getSpellDatabaseRule()); }
	 iv_ruleSpellDatabase=ruleSpellDatabase 
	 { $current=$iv_ruleSpellDatabase.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule SpellDatabase
ruleSpellDatabase returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ANY_OTHER", "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT");
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getSpellDatabaseAccess().getSkipNLAndCommentsParserRuleCall_0()); 
    }
ruleSkipNLAndComments
    { 
        afterParserOrEnumRuleCall();
    }
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getSpellDatabaseAccess().getAstriumSpellDatabaseAction_1_0_0(),
            $current);
    }
)	otherlv_2='FILE_HEADER' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getSpellDatabaseAccess().getFILE_HEADERKeyword_1_0_1());
    }

    { 
        newCompositeNode(grammarAccess.getSpellDatabaseAccess().getSkipNLAndCommentsParserRuleCall_1_0_2()); 
    }
ruleSkipNLAndComments
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSpellDatabaseAccess().getDatabaseAstriumDatabaseParserRuleCall_1_0_3_0()); 
	    }
		lv_database_4_0=ruleAstriumDatabase		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSpellDatabaseRule());
	        }
       		set(
       			$current, 
       			"database",
        		lv_database_4_0, 
        		"lu.ses.engineering.spell.SpellDatabase.AstriumDatabase");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getSpellDatabaseAccess().getSpellDatabaseAction_1_1_0(),
            $current);
    }
)((
(
		{ 
	        newCompositeNode(grammarAccess.getSpellDatabaseAccess().getDatabaseEntryDatabaseEntryParserRuleCall_1_1_1_0_0()); 
	    }
		lv_databaseEntry_6_0=ruleDatabaseEntry		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSpellDatabaseRule());
	        }
       		add(
       			$current, 
       			"databaseEntry",
        		lv_databaseEntry_6_0, 
        		"lu.ses.engineering.spell.SpellDatabase.DatabaseEntry");
	        afterParserOrEnumRuleCall();
	    }

)
)(
    { 
        newCompositeNode(grammarAccess.getSpellDatabaseAccess().getSkipNLAndComments2ParserRuleCall_1_1_1_1_0()); 
    }
ruleSkipNLAndComments2
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSpellDatabaseAccess().getDatabaseEntryDatabaseEntryParserRuleCall_1_1_1_1_1_0()); 
	    }
		lv_databaseEntry_8_0=ruleDatabaseEntry		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSpellDatabaseRule());
	        }
       		add(
       			$current, 
       			"databaseEntry",
        		lv_databaseEntry_8_0, 
        		"lu.ses.engineering.spell.SpellDatabase.DatabaseEntry");
	        afterParserOrEnumRuleCall();
	    }

)
)?)*
    { 
        newCompositeNode(grammarAccess.getSpellDatabaseAccess().getSkipNLAndCommentsParserRuleCall_1_1_1_2()); 
    }
ruleSkipNLAndComments
    { 
        afterParserOrEnumRuleCall();
    }
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getSpellDatabaseAccess().getCSVFileAction_1_2_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSpellDatabaseAccess().getCsvEntriesCSVEntryParserRuleCall_1_2_1_0()); 
	    }
		lv_csvEntries_11_0=ruleCSVEntry		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSpellDatabaseRule());
	        }
       		add(
       			$current, 
       			"csvEntries",
        		lv_csvEntries_11_0, 
        		"lu.ses.engineering.spell.SpellDatabase.CSVEntry");
	        afterParserOrEnumRuleCall();
	    }

)
)(
    { 
        newCompositeNode(grammarAccess.getSpellDatabaseAccess().getSkipNLAndComments2ParserRuleCall_1_2_2()); 
    }
ruleSkipNLAndComments2
    { 
        afterParserOrEnumRuleCall();
    }
)?((
    { 
        newCompositeNode(grammarAccess.getSpellDatabaseAccess().getSkipNLAndComments2ParserRuleCall_1_2_3_0()); 
    }
ruleSkipNLAndComments2
    { 
        afterParserOrEnumRuleCall();
    }
)?((
(
ruleCSVEntry
)
)=>
(
		{ 
	        newCompositeNode(grammarAccess.getSpellDatabaseAccess().getCsvEntriesCSVEntryParserRuleCall_1_2_3_1_0()); 
	    }
		lv_csvEntries_14_0=ruleCSVEntry		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSpellDatabaseRule());
	        }
       		add(
       			$current, 
       			"csvEntries",
        		lv_csvEntries_14_0, 
        		"lu.ses.engineering.spell.SpellDatabase.CSVEntry");
	        afterParserOrEnumRuleCall();
	    }

)
))*
    { 
        newCompositeNode(grammarAccess.getSpellDatabaseAccess().getSkipNLAndCommentsParserRuleCall_1_2_4()); 
    }
ruleSkipNLAndComments
    { 
        afterParserOrEnumRuleCall();
    }
)))
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleAstriumDatabase
entryRuleAstriumDatabase returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT");
	}
	:
	{ newCompositeNode(grammarAccess.getAstriumDatabaseRule()); }
	 iv_ruleAstriumDatabase=ruleAstriumDatabase 
	 { $current=$iv_ruleAstriumDatabase.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule AstriumDatabase
ruleAstriumDatabase returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT");
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAstriumDatabaseAccess().getAstriumDatabaseAction_0(),
            $current);
    }
)((
(
		{ 
	        newCompositeNode(grammarAccess.getAstriumDatabaseAccess().getEntriesAstriumHeaderEntryParserRuleCall_1_0_0()); 
	    }
		lv_entries_1_0=ruleAstriumHeaderEntry		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAstriumDatabaseRule());
	        }
       		add(
       			$current, 
       			"entries",
        		lv_entries_1_0, 
        		"lu.ses.engineering.spell.SpellDatabase.AstriumHeaderEntry");
	        afterParserOrEnumRuleCall();
	    }

)
)
    { 
        newCompositeNode(grammarAccess.getAstriumDatabaseAccess().getSkipNLAndCommentsParserRuleCall_1_1()); 
    }
ruleSkipNLAndComments
    { 
        afterParserOrEnumRuleCall();
    }
)*	otherlv_3='END_FILE_HEADER' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getAstriumDatabaseAccess().getEND_FILE_HEADERKeyword_2());
    }

    { 
        newCompositeNode(grammarAccess.getAstriumDatabaseAccess().getSkipNLAndCommentsParserRuleCall_3()); 
    }
ruleSkipNLAndComments
    { 
        afterParserOrEnumRuleCall();
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getAstriumDatabaseAccess().getEntriesAstriumVariableEntryParserRuleCall_4_0_0()); 
	    }
		lv_entries_5_0=ruleAstriumVariableEntry		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAstriumDatabaseRule());
	        }
       		add(
       			$current, 
       			"entries",
        		lv_entries_5_0, 
        		"lu.ses.engineering.spell.SpellDatabase.AstriumVariableEntry");
	        afterParserOrEnumRuleCall();
	    }

)
)
    { 
        newCompositeNode(grammarAccess.getAstriumDatabaseAccess().getSkipNLAndCommentsParserRuleCall_4_1()); 
    }
ruleSkipNLAndComments
    { 
        afterParserOrEnumRuleCall();
    }
)*)
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleAstriumVariableEntry
entryRuleAstriumVariableEntry returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT");
	}
	:
	{ newCompositeNode(grammarAccess.getAstriumVariableEntryRule()); }
	 iv_ruleAstriumVariableEntry=ruleAstriumVariableEntry 
	 { $current=$iv_ruleAstriumVariableEntry.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule AstriumVariableEntry
ruleAstriumVariableEntry returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT");
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAstriumVariableEntryAccess().getAstriumVariableCommentAction_0_0(),
            $current);
    }
)(
(
		lv_comment_1_0=RULE_ASTRIUM_COMMENT
		{
			newLeafNode(lv_comment_1_0, grammarAccess.getAstriumVariableEntryAccess().getCommentASTRIUM_COMMENTTerminalRuleCall_0_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAstriumVariableEntryRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"comment",
        		lv_comment_1_0, 
        		"lu.ses.engineering.spell.SpellDatabase.ASTRIUM_COMMENT");
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAstriumVariableEntryAccess().getAstriumVariableEntryAction_1_0(),
            $current);
    }
)this_DOLLAR_3=RULE_DOLLAR
    { 
    newLeafNode(this_DOLLAR_3, grammarAccess.getAstriumVariableEntryAccess().getDOLLARTerminalRuleCall_1_1()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAstriumVariableEntryAccess().getNameASTRIUM_IDParserRuleCall_1_2_0()); 
	    }
		lv_name_4_0=ruleASTRIUM_ID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAstriumVariableEntryRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_4_0, 
        		"lu.ses.engineering.spell.SpellDatabase.ASTRIUM_ID");
	        afterParserOrEnumRuleCall();
	    }

)
)this_COLON_5=RULE_COLON
    { 
    newLeafNode(this_COLON_5, grammarAccess.getAstriumVariableEntryAccess().getCOLONTerminalRuleCall_1_3()); 
    }
	otherlv_6='=' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getAstriumVariableEntryAccess().getEqualsSignKeyword_1_4());
    }
(((
(
ruleASTRIUM_TIME
)
)=>
(
		{ 
	        newCompositeNode(grammarAccess.getAstriumVariableEntryAccess().getAstriumTimeASTRIUM_TIMEParserRuleCall_1_5_0_0()); 
	    }
		lv_astriumTime_7_0=ruleASTRIUM_TIME		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAstriumVariableEntryRule());
	        }
       		set(
       			$current, 
       			"astriumTime",
        		lv_astriumTime_7_0, 
        		"lu.ses.engineering.spell.SpellDatabase.ASTRIUM_TIME");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |((
(
ruleAtom
)
)=>
(
		{ 
	        newCompositeNode(grammarAccess.getAstriumVariableEntryAccess().getValueAtomParserRuleCall_1_5_1_0()); 
	    }
		lv_value_8_0=ruleAtom		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAstriumVariableEntryRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_8_0, 
        		"lu.ses.engineering.spell.SpellDatabase.Atom");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getAstriumVariableEntryAccess().getSimpleValueSINGLE_VALUEParserRuleCall_1_5_2_0()); 
	    }
		lv_simpleValue_9_0=ruleSINGLE_VALUE		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAstriumVariableEntryRule());
	        }
       		set(
       			$current, 
       			"simpleValue",
        		lv_simpleValue_9_0, 
        		"lu.ses.engineering.spell.SpellDatabase.SINGLE_VALUE");
	        afterParserOrEnumRuleCall();
	    }

)
))?))
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleAstriumHeaderEntry
entryRuleAstriumHeaderEntry returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT");
	}
	:
	{ newCompositeNode(grammarAccess.getAstriumHeaderEntryRule()); }
	 iv_ruleAstriumHeaderEntry=ruleAstriumHeaderEntry 
	 { $current=$iv_ruleAstriumHeaderEntry.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule AstriumHeaderEntry
ruleAstriumHeaderEntry returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT");
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAstriumHeaderEntryAccess().getAstriumHeaderCommentAction_0_0(),
            $current);
    }
)(
(
		lv_comment_1_0=RULE_ASTRIUM_COMMENT
		{
			newLeafNode(lv_comment_1_0, grammarAccess.getAstriumHeaderEntryAccess().getCommentASTRIUM_COMMENTTerminalRuleCall_0_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAstriumHeaderEntryRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"comment",
        		lv_comment_1_0, 
        		"lu.ses.engineering.spell.SpellDatabase.ASTRIUM_COMMENT");
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAstriumHeaderEntryAccess().getAstriumHeaderEntryAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAstriumHeaderEntryAccess().getNameASTRIUM_IDParserRuleCall_1_1_0()); 
	    }
		lv_name_3_0=ruleASTRIUM_ID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAstriumHeaderEntryRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_3_0, 
        		"lu.ses.engineering.spell.SpellDatabase.ASTRIUM_ID");
	        afterParserOrEnumRuleCall();
	    }

)
)this_COLON_4=RULE_COLON
    { 
    newLeafNode(this_COLON_4, grammarAccess.getAstriumHeaderEntryAccess().getCOLONTerminalRuleCall_1_2()); 
    }
	otherlv_5='=' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getAstriumHeaderEntryAccess().getEqualsSignKeyword_1_3());
    }
(((
(
ruleASTRIUM_TIME
)
)=>
(
		{ 
	        newCompositeNode(grammarAccess.getAstriumHeaderEntryAccess().getAstriumTimeASTRIUM_TIMEParserRuleCall_1_4_0_0()); 
	    }
		lv_astriumTime_6_0=ruleASTRIUM_TIME		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAstriumHeaderEntryRule());
	        }
       		set(
       			$current, 
       			"astriumTime",
        		lv_astriumTime_6_0, 
        		"lu.ses.engineering.spell.SpellDatabase.ASTRIUM_TIME");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |((
(
ruleAtom
)
)=>
(
		{ 
	        newCompositeNode(grammarAccess.getAstriumHeaderEntryAccess().getValueAtomParserRuleCall_1_4_1_0()); 
	    }
		lv_value_7_0=ruleAtom		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAstriumHeaderEntryRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_7_0, 
        		"lu.ses.engineering.spell.SpellDatabase.Atom");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getAstriumHeaderEntryAccess().getSimpleValueSINGLE_VALUEParserRuleCall_1_4_2_0()); 
	    }
		lv_simpleValue_8_0=ruleSINGLE_VALUE		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAstriumHeaderEntryRule());
	        }
       		set(
       			$current, 
       			"simpleValue",
        		lv_simpleValue_8_0, 
        		"lu.ses.engineering.spell.SpellDatabase.SINGLE_VALUE");
	        afterParserOrEnumRuleCall();
	    }

)
))?))
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleSkipNLAndComments2
entryRuleSkipNLAndComments2 returns [String current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT");
	}
	:
	{ newCompositeNode(grammarAccess.getSkipNLAndComments2Rule()); } 
	 iv_ruleSkipNLAndComments2=ruleSkipNLAndComments2 
	 { $current=$iv_ruleSkipNLAndComments2.current.getText(); }  
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule SkipNLAndComments2
ruleSkipNLAndComments2 returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT");
    }
    @after { leaveRule(); }:
((    this_NL_0=RULE_NL    {
		$current.merge(this_NL_0);
    }

    { 
    newLeafNode(this_NL_0, grammarAccess.getSkipNLAndComments2Access().getNLTerminalRuleCall_0()); 
    }
)+(( ruleSkipNLAndComments)=>
    { 
        newCompositeNode(grammarAccess.getSkipNLAndComments2Access().getSkipNLAndCommentsParserRuleCall_1()); 
    }
    this_SkipNLAndComments_1=ruleSkipNLAndComments    {
		$current.merge(this_SkipNLAndComments_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
))
    ;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleSkipNLAndComments
entryRuleSkipNLAndComments returns [String current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
	}
	:
	{ newCompositeNode(grammarAccess.getSkipNLAndCommentsRule()); } 
	 iv_ruleSkipNLAndComments=ruleSkipNLAndComments 
	 { $current=$iv_ruleSkipNLAndComments.current.getText(); }  
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule SkipNLAndComments
ruleSkipNLAndComments returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
    }
    @after { leaveRule(); }:
(    this_WS_0=RULE_WS    {
		$current.merge(this_WS_0);
    }

    { 
    newLeafNode(this_WS_0, grammarAccess.getSkipNLAndCommentsAccess().getWSTerminalRuleCall_0()); 
    }

    |    this_ML_COMMENT_1=RULE_ML_COMMENT    {
		$current.merge(this_ML_COMMENT_1);
    }

    { 
    newLeafNode(this_ML_COMMENT_1, grammarAccess.getSkipNLAndCommentsAccess().getML_COMMENTTerminalRuleCall_1()); 
    }

    |    this_SL_COMMENT_2=RULE_SL_COMMENT    {
		$current.merge(this_SL_COMMENT_2);
    }

    { 
    newLeafNode(this_SL_COMMENT_2, grammarAccess.getSkipNLAndCommentsAccess().getSL_COMMENTTerminalRuleCall_2()); 
    }

    |    this_NL_3=RULE_NL    {
		$current.merge(this_NL_3);
    }

    { 
    newLeafNode(this_NL_3, grammarAccess.getSkipNLAndCommentsAccess().getNLTerminalRuleCall_3()); 
    }
)*
    ;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleCSVEntry
entryRuleCSVEntry returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCSVEntryRule()); }
	 iv_ruleCSVEntry=ruleCSVEntry 
	 { $current=$iv_ruleCSVEntry.current; } 
	 EOF 
;

// Rule CSVEntry
ruleCSVEntry returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getCSVEntryAccess().getCSVCommandParserRuleCall_0()); 
    }
    this_CSVCommand_0=ruleCSVCommand
    { 
        $current = $this_CSVCommand_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getCSVEntryAccess().getCSVTelemetryParserRuleCall_1()); 
    }
    this_CSVTelemetry_1=ruleCSVTelemetry
    { 
        $current = $this_CSVTelemetry_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getCSVEntryAccess().getCSVSpellParserRuleCall_2()); 
    }
    this_CSVSpell_2=ruleCSVSpell
    { 
        $current = $this_CSVSpell_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleCSVCommand
entryRuleCSVCommand returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT");
	}
	:
	{ newCompositeNode(grammarAccess.getCSVCommandRule()); }
	 iv_ruleCSVCommand=ruleCSVCommand 
	 { $current=$iv_ruleCSVCommand.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule CSVCommand
ruleCSVCommand returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT");
    }
    @after { leaveRule(); }:
(this_CMD_0=RULE_CMD
    { 
    newLeafNode(this_CMD_0, grammarAccess.getCSVCommandAccess().getCMDTerminalRuleCall_0()); 
    }
	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getCSVCommandAccess().getCommaKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCSVCommandAccess().getCommandID_STMTParserRuleCall_2_0()); 
	    }
		lv_command_2_0=ruleID_STMT		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCSVCommandRule());
	        }
       		set(
       			$current, 
       			"command",
        		lv_command_2_0, 
        		"lu.ses.engineering.spell.SpellDatabase.ID_STMT");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getCSVCommandAccess().getCommaKeyword_3_0());
    }
((
(
ruleTCArgs
)
)=>
(
		{ 
	        newCompositeNode(grammarAccess.getCSVCommandAccess().getArgsTCArgsParserRuleCall_3_1_0()); 
	    }
		lv_args_4_0=ruleTCArgs		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCSVCommandRule());
	        }
       		add(
       			$current, 
       			"args",
        		lv_args_4_0, 
        		"lu.ses.engineering.spell.SpellDatabase.TCArgs");
	        afterParserOrEnumRuleCall();
	    }

)
)(((	ruleSkipNLAndComments2	',' 
	',' 
((
(
ruleTCArgs
)
)=>
(
ruleTCArgs
)
)(	',' 
)*))=>(
    { 
        newCompositeNode(grammarAccess.getCSVCommandAccess().getSkipNLAndComments2ParserRuleCall_3_2_0_0()); 
    }
ruleSkipNLAndComments2
    { 
        afterParserOrEnumRuleCall();
    }
	otherlv_6=',' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getCSVCommandAccess().getCommaKeyword_3_2_0_1());
    }
	otherlv_7=',' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getCSVCommandAccess().getCommaKeyword_3_2_0_2());
    }
((
(
ruleTCArgs
)
)=>
(
		{ 
	        newCompositeNode(grammarAccess.getCSVCommandAccess().getArgsTCArgsParserRuleCall_3_2_0_3_0()); 
	    }
		lv_args_8_0=ruleTCArgs		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCSVCommandRule());
	        }
       		add(
       			$current, 
       			"args",
        		lv_args_8_0, 
        		"lu.ses.engineering.spell.SpellDatabase.TCArgs");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_9=',' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getCSVCommandAccess().getCommaKeyword_3_2_0_4());
    }
)*))*)?(	otherlv_10=',' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getCSVCommandAccess().getCommaKeyword_4());
    }
)*)
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleTCArgs
entryRuleTCArgs returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT");
	}
	:
	{ newCompositeNode(grammarAccess.getTCArgsRule()); }
	 iv_ruleTCArgs=ruleTCArgs 
	 { $current=$iv_ruleTCArgs.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule TCArgs
ruleTCArgs returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT");
    }
    @after { leaveRule(); }:
(((
(
ruleTCValue
)
)=>
(
		{ 
	        newCompositeNode(grammarAccess.getTCArgsAccess().getTcNameTCValueParserRuleCall_0_0()); 
	    }
		lv_tcName_0_0=ruleTCValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTCArgsRule());
	        }
       		set(
       			$current, 
       			"tcName",
        		lv_tcName_0_0, 
        		"lu.ses.engineering.spell.SpellDatabase.TCValue");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTCArgsAccess().getCommaKeyword_1());
    }
((
(
ruleTCValue
)
)=>
(
		{ 
	        newCompositeNode(grammarAccess.getTCArgsAccess().getTcValueTCValueParserRuleCall_2_0()); 
	    }
		lv_tcValue_2_0=ruleTCValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTCArgsRule());
	        }
       		set(
       			$current, 
       			"tcValue",
        		lv_tcValue_2_0, 
        		"lu.ses.engineering.spell.SpellDatabase.TCValue");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getTCArgsAccess().getCommaKeyword_3());
    }
((
(
RULE_STATE_EXPR

)
)=>
(
		lv_tcMod_4_0=RULE_STATE_EXPR
		{
			newLeafNode(lv_tcMod_4_0, grammarAccess.getTCArgsAccess().getTcModSTATE_EXPRTerminalRuleCall_4_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTCArgsRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"tcMod",
        		lv_tcMod_4_0, 
        		"lu.ses.engineering.spell.SpellDatabase.STATE_EXPR");
	    }

)
)(((	',' 
(
(
rulePosIntOrFloat
)
)?))=>(	otherlv_5=',' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getTCArgsAccess().getCommaKeyword_5_0_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTCArgsAccess().getTolerancePosIntOrFloatParserRuleCall_5_0_1_0()); 
	    }
		lv_tolerance_6_0=rulePosIntOrFloat		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTCArgsRule());
	        }
       		set(
       			$current, 
       			"tolerance",
        		lv_tolerance_6_0, 
        		"lu.ses.engineering.spell.SpellDatabase.PosIntOrFloat");
	        afterParserOrEnumRuleCall();
	    }

)
)?))?(	otherlv_7=',' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getTCArgsAccess().getCommaKeyword_6());
    }
)*)
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleTCValue
entryRuleTCValue returns [String current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT");
	}
	:
	{ newCompositeNode(grammarAccess.getTCValueRule()); } 
	 iv_ruleTCValue=ruleTCValue 
	 { $current=$iv_ruleTCValue.current.getText(); }  
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule TCValue
ruleTCValue returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT");
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getTCValueAccess().getID_STMTParserRuleCall_0()); 
    }
    this_ID_STMT_0=ruleID_STMT    {
		$current.merge(this_ID_STMT_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |    this_BIN_HEX_OCT_1=RULE_BIN_HEX_OCT    {
		$current.merge(this_BIN_HEX_OCT_1);
    }

    { 
    newLeafNode(this_BIN_HEX_OCT_1, grammarAccess.getTCValueAccess().getBIN_HEX_OCTTerminalRuleCall_1()); 
    }

    |    this_PLUS_2=RULE_PLUS    {
		$current.merge(this_PLUS_2);
    }

    { 
    newLeafNode(this_PLUS_2, grammarAccess.getTCValueAccess().getPLUSTerminalRuleCall_2()); 
    }

    |    this_MINUS_3=RULE_MINUS    {
		$current.merge(this_MINUS_3);
    }

    { 
    newLeafNode(this_MINUS_3, grammarAccess.getTCValueAccess().getMINUSTerminalRuleCall_3()); 
    }

    |(( ruleINTEGER)=>
    { 
        newCompositeNode(grammarAccess.getTCValueAccess().getINTEGERParserRuleCall_4()); 
    }
    this_INTEGER_4=ruleINTEGER    {
		$current.merge(this_INTEGER_4);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    |(( RULE_FLOAT)=>    this_FLOAT_5=RULE_FLOAT    {
		$current.merge(this_FLOAT_5);
    }

    { 
    newLeafNode(this_FLOAT_5, grammarAccess.getTCValueAccess().getFLOATTerminalRuleCall_5()); 
    }
)
    |
	kw='*' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTCValueAccess().getAsteriskKeyword_6()); 
    }

    |    this_BOOL_EXPR_7=RULE_BOOL_EXPR    {
		$current.merge(this_BOOL_EXPR_7);
    }

    { 
    newLeafNode(this_BOOL_EXPR_7, grammarAccess.getTCValueAccess().getBOOL_EXPRTerminalRuleCall_7()); 
    }
)+
    ;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleKeyValue
entryRuleKeyValue returns [String current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT");
	}
	:
	{ newCompositeNode(grammarAccess.getKeyValueRule()); } 
	 iv_ruleKeyValue=ruleKeyValue 
	 { $current=$iv_ruleKeyValue.current.getText(); }  
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule KeyValue
ruleKeyValue returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT");
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getKeyValueAccess().getID_STMTParserRuleCall_0()); 
    }
    this_ID_STMT_0=ruleID_STMT    {
		$current.merge(this_ID_STMT_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |    this_BIN_HEX_OCT_1=RULE_BIN_HEX_OCT    {
		$current.merge(this_BIN_HEX_OCT_1);
    }

    { 
    newLeafNode(this_BIN_HEX_OCT_1, grammarAccess.getKeyValueAccess().getBIN_HEX_OCTTerminalRuleCall_1()); 
    }

    |    this_PLUS_2=RULE_PLUS    {
		$current.merge(this_PLUS_2);
    }

    { 
    newLeafNode(this_PLUS_2, grammarAccess.getKeyValueAccess().getPLUSTerminalRuleCall_2()); 
    }

    |    this_MINUS_3=RULE_MINUS    {
		$current.merge(this_MINUS_3);
    }

    { 
    newLeafNode(this_MINUS_3, grammarAccess.getKeyValueAccess().getMINUSTerminalRuleCall_3()); 
    }

    |(( ruleINTEGER)=>
    { 
        newCompositeNode(grammarAccess.getKeyValueAccess().getINTEGERParserRuleCall_4()); 
    }
    this_INTEGER_4=ruleINTEGER    {
		$current.merge(this_INTEGER_4);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    |(( RULE_FLOAT)=>    this_FLOAT_5=RULE_FLOAT    {
		$current.merge(this_FLOAT_5);
    }

    { 
    newLeafNode(this_FLOAT_5, grammarAccess.getKeyValueAccess().getFLOATTerminalRuleCall_5()); 
    }
)
    |
	kw='*' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeyValueAccess().getAsteriskKeyword_6()); 
    }

    |(( RULE_STRING)=>    this_STRING_7=RULE_STRING    {
		$current.merge(this_STRING_7);
    }

    { 
    newLeafNode(this_STRING_7, grammarAccess.getKeyValueAccess().getSTRINGTerminalRuleCall_7()); 
    }
)
    |    this_BOOL_EXPR_8=RULE_BOOL_EXPR    {
		$current.merge(this_BOOL_EXPR_8);
    }

    { 
    newLeafNode(this_BOOL_EXPR_8, grammarAccess.getKeyValueAccess().getBOOL_EXPRTerminalRuleCall_8()); 
    }
)+
    ;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleCSVTelemetry
entryRuleCSVTelemetry returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT");
	}
	:
	{ newCompositeNode(grammarAccess.getCSVTelemetryRule()); }
	 iv_ruleCSVTelemetry=ruleCSVTelemetry 
	 { $current=$iv_ruleCSVTelemetry.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule CSVTelemetry
ruleCSVTelemetry returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT");
    }
    @after { leaveRule(); }:
(this_TM_0=RULE_TM
    { 
    newLeafNode(this_TM_0, grammarAccess.getCSVTelemetryAccess().getTMTerminalRuleCall_0()); 
    }
	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getCSVTelemetryAccess().getCommaKeyword_1());
    }
	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getCSVTelemetryAccess().getCommaKeyword_2());
    }
((
(
ruleTCArgs
)
)=>
(
		{ 
	        newCompositeNode(grammarAccess.getCSVTelemetryAccess().getTmArgTCArgsParserRuleCall_3_0()); 
	    }
		lv_tmArg_3_0=ruleTCArgs		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCSVTelemetryRule());
	        }
       		set(
       			$current, 
       			"tmArg",
        		lv_tmArg_3_0, 
        		"lu.ses.engineering.spell.SpellDatabase.TCArgs");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getCSVTelemetryAccess().getCommaKeyword_4());
    }
)*)
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleCSVSpell
entryRuleCSVSpell returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT");
	}
	:
	{ newCompositeNode(grammarAccess.getCSVSpellRule()); }
	 iv_ruleCSVSpell=ruleCSVSpell 
	 { $current=$iv_ruleCSVSpell.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule CSVSpell
ruleCSVSpell returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT");
    }
    @after { leaveRule(); }:
(this_SPELL_0=RULE_SPELL
    { 
    newLeafNode(this_SPELL_0, grammarAccess.getCSVSpellAccess().getSPELLTerminalRuleCall_0()); 
    }
	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getCSVSpellAccess().getCommaKeyword_1());
    }
((
(
ruleSpellCommand
)
)=>
(
		{ 
	        newCompositeNode(grammarAccess.getCSVSpellAccess().getCmdSpellCommandParserRuleCall_2_0()); 
	    }
		lv_cmd_2_0=ruleSpellCommand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCSVSpellRule());
	        }
       		set(
       			$current, 
       			"cmd",
        		lv_cmd_2_0, 
        		"lu.ses.engineering.spell.SpellDatabase.SpellCommand");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getCSVSpellAccess().getCommaKeyword_3());
    }
)*)
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleSpellCommand
entryRuleSpellCommand returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT");
	}
	:
	{ newCompositeNode(grammarAccess.getSpellCommandRule()); }
	 iv_ruleSpellCommand=ruleSpellCommand 
	 { $current=$iv_ruleSpellCommand.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule SpellCommand
ruleSpellCommand returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT");
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getSpellCommandAccess().getWaitCommandAction_0_0(),
            $current);
    }
)this_WAIT_1=RULE_WAIT
    { 
    newLeafNode(this_WAIT_1, grammarAccess.getSpellCommandAccess().getWAITTerminalRuleCall_0_1()); 
    }
	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getSpellCommandAccess().getCommaKeyword_0_2());
    }
((
(
ruleIntOrFloat
)
)=>
(
		{ 
	        newCompositeNode(grammarAccess.getSpellCommandAccess().getValueIntOrFloatParserRuleCall_0_3_0()); 
	    }
		lv_value_3_0=ruleIntOrFloat		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSpellCommandRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_3_0, 
        		"lu.ses.engineering.spell.SpellDatabase.IntOrFloat");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getSpellCommandAccess().getCommaKeyword_0_4());
    }
((
(
RULE_TIME_EXPR

)
)=>
(
		lv_unit_5_0=RULE_TIME_EXPR
		{
			newLeafNode(lv_unit_5_0, grammarAccess.getSpellCommandAccess().getUnitTIME_EXPRTerminalRuleCall_0_5_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSpellCommandRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"unit",
        		lv_unit_5_0, 
        		"lu.ses.engineering.spell.SpellDatabase.TIME_EXPR");
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getSpellCommandAccess().getPauseCommandAction_1_0(),
            $current);
    }
)this_PAUSE_7=RULE_PAUSE
    { 
    newLeafNode(this_PAUSE_7, grammarAccess.getSpellCommandAccess().getPAUSETerminalRuleCall_1_1()); 
    }
(	otherlv_8=',' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getSpellCommandAccess().getCommaKeyword_1_2());
    }
)*))
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleIntOrFloat
entryRuleIntOrFloat returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getIntOrFloatRule()); } 
	 iv_ruleIntOrFloat=ruleIntOrFloat 
	 { $current=$iv_ruleIntOrFloat.current.getText(); }  
	 EOF 
;

// Rule IntOrFloat
ruleIntOrFloat returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getIntOrFloatAccess().getFLOAT_ValParserRuleCall_0()); 
    }
    this_FLOAT_Val_0=ruleFLOAT_Val    {
		$current.merge(this_FLOAT_Val_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getIntOrFloatAccess().getINTEGERParserRuleCall_1()); 
    }
    this_INTEGER_1=ruleINTEGER    {
		$current.merge(this_INTEGER_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRulePosIntOrFloat
entryRulePosIntOrFloat returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getPosIntOrFloatRule()); } 
	 iv_rulePosIntOrFloat=rulePosIntOrFloat 
	 { $current=$iv_rulePosIntOrFloat.current.getText(); }  
	 EOF 
;

// Rule PosIntOrFloat
rulePosIntOrFloat returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_FLOAT_0=RULE_FLOAT    {
		$current.merge(this_FLOAT_0);
    }

    { 
    newLeafNode(this_FLOAT_0, grammarAccess.getPosIntOrFloatAccess().getFLOATTerminalRuleCall_0()); 
    }

    |    this_INT_1=RULE_INT    {
		$current.merge(this_INT_1);
    }

    { 
    newLeafNode(this_INT_1, grammarAccess.getPosIntOrFloatAccess().getINTTerminalRuleCall_1()); 
    }
)
    ;





// Entry rule entryRuleDatabaseEntry
entryRuleDatabaseEntry returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT");
	}
	:
	{ newCompositeNode(grammarAccess.getDatabaseEntryRule()); }
	 iv_ruleDatabaseEntry=ruleDatabaseEntry 
	 { $current=$iv_ruleDatabaseEntry.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule DatabaseEntry
ruleDatabaseEntry returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT");
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getDatabaseEntryAccess().getNameKeyValueParserRuleCall_0_0()); 
	    }
		lv_name_0_0=ruleKeyValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDatabaseEntryRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"lu.ses.engineering.spell.SpellDatabase.KeyValue");
	        afterParserOrEnumRuleCall();
	    }

)
)(this_WS_1=RULE_WS
    { 
    newLeafNode(this_WS_1, grammarAccess.getDatabaseEntryAccess().getWSTerminalRuleCall_1()); 
    }
)?
    { 
        newCompositeNode(grammarAccess.getDatabaseEntryAccess().getSkipped_NLParserRuleCall_2()); 
    }
ruleSkipped_NL
    { 
        afterParserOrEnumRuleCall();
    }
(this_WS_3=RULE_WS
    { 
    newLeafNode(this_WS_3, grammarAccess.getDatabaseEntryAccess().getWSTerminalRuleCall_3()); 
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getDatabaseEntryAccess().getValueDatabaseValueParserRuleCall_4_0()); 
	    }
		lv_value_4_0=ruleDatabaseValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDatabaseEntryRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_4_0, 
        		"lu.ses.engineering.spell.SpellDatabase.DatabaseValue");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleDatabaseValue
entryRuleDatabaseValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDatabaseValueRule()); }
	 iv_ruleDatabaseValue=ruleDatabaseValue 
	 { $current=$iv_ruleDatabaseValue.current; } 
	 EOF 
;

// Rule DatabaseValue
ruleDatabaseValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getDatabaseValueAccess().getComplexValueParserRuleCall_0()); 
    }
    this_ComplexValue_0=ruleComplexValue
    { 
        $current = $this_ComplexValue_0.current; 
        afterParserOrEnumRuleCall();
    }

    |((	ruleRelDate)=>
    { 
        newCompositeNode(grammarAccess.getDatabaseValueAccess().getRelDateParserRuleCall_1()); 
    }
    this_RelDate_1=ruleRelDate
    { 
        $current = $this_RelDate_1.current; 
        afterParserOrEnumRuleCall();
    }
)
    |((	ruleDate)=>
    { 
        newCompositeNode(grammarAccess.getDatabaseValueAccess().getDateParserRuleCall_2()); 
    }
    this_Date_2=ruleDate
    { 
        $current = $this_Date_2.current; 
        afterParserOrEnumRuleCall();
    }
)
    |((	ruleAtom)=>
    { 
        newCompositeNode(grammarAccess.getDatabaseValueAccess().getAtomParserRuleCall_3()); 
    }
    this_Atom_3=ruleAtom
    { 
        $current = $this_Atom_3.current; 
        afterParserOrEnumRuleCall();
    }
))
;





// Entry rule entryRuleLambda_Stmt
entryRuleLambda_Stmt returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLambda_StmtRule()); }
	 iv_ruleLambda_Stmt=ruleLambda_Stmt 
	 { $current=$iv_ruleLambda_Stmt.current; } 
	 EOF 
;

// Rule Lambda_Stmt
ruleLambda_Stmt returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getLambda_StmtAccess().getLambda_StmtAction_0(),
            $current);
    }
)this_LAMBDA_1=RULE_LAMBDA
    { 
    newLeafNode(this_LAMBDA_1, grammarAccess.getLambda_StmtAccess().getLAMBDATerminalRuleCall_1()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLambda_StmtAccess().getVariablesLambda_VarsParserRuleCall_2_0()); 
	    }
		lv_variables_2_0=ruleLambda_Vars		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLambda_StmtRule());
	        }
       		set(
       			$current, 
       			"variables",
        		lv_variables_2_0, 
        		"lu.ses.engineering.spell.SpellDatabase.Lambda_Vars");
	        afterParserOrEnumRuleCall();
	    }

)
)?this_COLON_3=RULE_COLON
    { 
    newLeafNode(this_COLON_3, grammarAccess.getLambda_StmtAccess().getCOLONTerminalRuleCall_3()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLambda_StmtAccess().getValLambda_FunctionParserRuleCall_4_0()); 
	    }
		lv_val_4_0=ruleLambda_Function		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLambda_StmtRule());
	        }
       		set(
       			$current, 
       			"val",
        		lv_val_4_0, 
        		"lu.ses.engineering.spell.SpellDatabase.Lambda_Function");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleLambda_Function
entryRuleLambda_Function returns [String current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ANY_OTHER", "RULE_WS");
	}
	:
	{ newCompositeNode(grammarAccess.getLambda_FunctionRule()); } 
	 iv_ruleLambda_Function=ruleLambda_Function 
	 { $current=$iv_ruleLambda_Function.current.getText(); }  
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule Lambda_Function
ruleLambda_Function returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ANY_OTHER", "RULE_WS");
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getLambda_FunctionAccess().getLambda_Partial_FuncParserRuleCall()); 
    }
    this_Lambda_Partial_Func_0=ruleLambda_Partial_Func    {
		$current.merge(this_Lambda_Partial_Func_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)+
    ;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleLambda_Partial_Func
entryRuleLambda_Partial_Func returns [String current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ANY_OTHER", "RULE_WS");
	}
	:
	{ newCompositeNode(grammarAccess.getLambda_Partial_FuncRule()); } 
	 iv_ruleLambda_Partial_Func=ruleLambda_Partial_Func 
	 { $current=$iv_ruleLambda_Partial_Func.current.getText(); }  
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule Lambda_Partial_Func
ruleLambda_Partial_Func returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ANY_OTHER", "RULE_WS");
    }
    @after { leaveRule(); }:
((    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getLambda_Partial_FuncAccess().getIDTerminalRuleCall_0_0()); 
    }

    |    this_FLOAT_1=RULE_FLOAT    {
		$current.merge(this_FLOAT_1);
    }

    { 
    newLeafNode(this_FLOAT_1, grammarAccess.getLambda_Partial_FuncAccess().getFLOATTerminalRuleCall_0_1()); 
    }

    |    this_INT_2=RULE_INT    {
		$current.merge(this_INT_2);
    }

    { 
    newLeafNode(this_INT_2, grammarAccess.getLambda_Partial_FuncAccess().getINTTerminalRuleCall_0_2()); 
    }

    |    this_PLUS_3=RULE_PLUS    {
		$current.merge(this_PLUS_3);
    }

    { 
    newLeafNode(this_PLUS_3, grammarAccess.getLambda_Partial_FuncAccess().getPLUSTerminalRuleCall_0_3()); 
    }

    |    this_MINUS_4=RULE_MINUS    {
		$current.merge(this_MINUS_4);
    }

    { 
    newLeafNode(this_MINUS_4, grammarAccess.getLambda_Partial_FuncAccess().getMINUSTerminalRuleCall_0_4()); 
    }

    |    this_ML_COMMENT_5=RULE_ML_COMMENT    {
		$current.merge(this_ML_COMMENT_5);
    }

    { 
    newLeafNode(this_ML_COMMENT_5, grammarAccess.getLambda_Partial_FuncAccess().getML_COMMENTTerminalRuleCall_0_5()); 
    }

    |    this_BIN_HEX_OCT_6=RULE_BIN_HEX_OCT    {
		$current.merge(this_BIN_HEX_OCT_6);
    }

    { 
    newLeafNode(this_BIN_HEX_OCT_6, grammarAccess.getLambda_Partial_FuncAccess().getBIN_HEX_OCTTerminalRuleCall_0_6()); 
    }

    |    this_BOOL_EXPR_7=RULE_BOOL_EXPR    {
		$current.merge(this_BOOL_EXPR_7);
    }

    { 
    newLeafNode(this_BOOL_EXPR_7, grammarAccess.getLambda_Partial_FuncAccess().getBOOL_EXPRTerminalRuleCall_0_7()); 
    }

    |    this_STRING_8=RULE_STRING    {
		$current.merge(this_STRING_8);
    }

    { 
    newLeafNode(this_STRING_8, grammarAccess.getLambda_Partial_FuncAccess().getSTRINGTerminalRuleCall_0_8()); 
    }

    |    this_ANY_OTHER_9=RULE_ANY_OTHER    {
		$current.merge(this_ANY_OTHER_9);
    }

    { 
    newLeafNode(this_ANY_OTHER_9, grammarAccess.getLambda_Partial_FuncAccess().getANY_OTHERTerminalRuleCall_0_9()); 
    }
)
    |(    this_LAMBDA_10=RULE_LAMBDA    {
		$current.merge(this_LAMBDA_10);
    }

    { 
    newLeafNode(this_LAMBDA_10, grammarAccess.getLambda_Partial_FuncAccess().getLAMBDATerminalRuleCall_1_0()); 
    }
(
    { 
        newCompositeNode(grammarAccess.getLambda_Partial_FuncAccess().getLambda_VarsParserRuleCall_1_1()); 
    }
    this_Lambda_Vars_11=ruleLambda_Vars    {
		$current.merge(this_Lambda_Vars_11);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?    this_COLON_12=RULE_COLON    {
		$current.merge(this_COLON_12);
    }

    { 
    newLeafNode(this_COLON_12, grammarAccess.getLambda_Partial_FuncAccess().getCOLONTerminalRuleCall_1_2()); 
    }
(
    { 
        newCompositeNode(grammarAccess.getLambda_Partial_FuncAccess().getLambda_FunctionParserRuleCall_1_3()); 
    }
    this_Lambda_Function_13=ruleLambda_Function    {
		$current.merge(this_Lambda_Function_13);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?))
    ;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleLambda_Vars
entryRuleLambda_Vars returns [String current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ANY_OTHER", "RULE_WS");
	}
	:
	{ newCompositeNode(grammarAccess.getLambda_VarsRule()); } 
	 iv_ruleLambda_Vars=ruleLambda_Vars 
	 { $current=$iv_ruleLambda_Vars.current.getText(); }  
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule Lambda_Vars
ruleLambda_Vars returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ANY_OTHER", "RULE_WS");
    }
    @after { leaveRule(); }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getLambda_VarsAccess().getIDTerminalRuleCall_0()); 
    }
(
	kw=',' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLambda_VarsAccess().getCommaKeyword_1_0()); 
    }
    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    newLeafNode(this_ID_2, grammarAccess.getLambda_VarsAccess().getIDTerminalRuleCall_1_1()); 
    }
)*)
    ;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleComplexValue
entryRuleComplexValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getComplexValueRule()); }
	 iv_ruleComplexValue=ruleComplexValue 
	 { $current=$iv_ruleComplexValue.current; } 
	 EOF 
;

// Rule ComplexValue
ruleComplexValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getComplexValueAccess().getDictionaryParserRuleCall_0()); 
    }
    this_Dictionary_0=ruleDictionary
    { 
        $current = $this_Dictionary_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getComplexValueAccess().getListParserRuleCall_1()); 
    }
    this_List_1=ruleList
    { 
        $current = $this_List_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getComplexValueAccess().getTupleParserRuleCall_2()); 
    }
    this_Tuple_2=ruleTuple
    { 
        $current = $this_Tuple_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleTuple
entryRuleTuple returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT");
	}
	:
	{ newCompositeNode(grammarAccess.getTupleRule()); }
	 iv_ruleTuple=ruleTuple 
	 { $current=$iv_ruleTuple.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule Tuple
ruleTuple returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT");
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTupleAccess().getTupleAction_0(),
            $current);
    }
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTupleAccess().getLeftParenthesisKeyword_1());
    }
(
    { 
        newCompositeNode(grammarAccess.getTupleAccess().getSkipped_NLParserRuleCall_2_0()); 
    }
ruleSkipped_NL
    { 
        afterParserOrEnumRuleCall();
    }
(
(
(
		{ 
	        newCompositeNode(grammarAccess.getTupleAccess().getValuesAtomParserRuleCall_2_1_0_0()); 
	    }
		lv_values_3_1=ruleAtom		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTupleRule());
	        }
       		add(
       			$current, 
       			"values",
        		lv_values_3_1, 
        		"lu.ses.engineering.spell.SpellDatabase.Atom");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getTupleAccess().getValuesComplexValueParserRuleCall_2_1_0_1()); 
	    }
		lv_values_3_2=ruleComplexValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTupleRule());
	        }
       		add(
       			$current, 
       			"values",
        		lv_values_3_2, 
        		"lu.ses.engineering.spell.SpellDatabase.ComplexValue");
	        afterParserOrEnumRuleCall();
	    }

)

)
)
    { 
        newCompositeNode(grammarAccess.getTupleAccess().getSkipped_NLParserRuleCall_2_2()); 
    }
ruleSkipped_NL
    { 
        afterParserOrEnumRuleCall();
    }
(	otherlv_5=',' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getTupleAccess().getCommaKeyword_2_3_0());
    }

    { 
        newCompositeNode(grammarAccess.getTupleAccess().getSkipped_NLParserRuleCall_2_3_1()); 
    }
ruleSkipped_NL
    { 
        afterParserOrEnumRuleCall();
    }
(
(
(
		{ 
	        newCompositeNode(grammarAccess.getTupleAccess().getValuesAtomParserRuleCall_2_3_2_0_0()); 
	    }
		lv_values_7_1=ruleAtom		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTupleRule());
	        }
       		add(
       			$current, 
       			"values",
        		lv_values_7_1, 
        		"lu.ses.engineering.spell.SpellDatabase.Atom");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getTupleAccess().getValuesComplexValueParserRuleCall_2_3_2_0_1()); 
	    }
		lv_values_7_2=ruleComplexValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTupleRule());
	        }
       		add(
       			$current, 
       			"values",
        		lv_values_7_2, 
        		"lu.ses.engineering.spell.SpellDatabase.ComplexValue");
	        afterParserOrEnumRuleCall();
	    }

)

)
))*)?
    { 
        newCompositeNode(grammarAccess.getTupleAccess().getSkipped_NLParserRuleCall_3()); 
    }
ruleSkipped_NL
    { 
        afterParserOrEnumRuleCall();
    }
(	otherlv_9=',' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getTupleAccess().getCommaKeyword_4());
    }
)?
    { 
        newCompositeNode(grammarAccess.getTupleAccess().getSkipped_NLParserRuleCall_5()); 
    }
ruleSkipped_NL
    { 
        afterParserOrEnumRuleCall();
    }
	otherlv_11=')' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getTupleAccess().getRightParenthesisKeyword_6());
    }
)
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleList
entryRuleList returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT");
	}
	:
	{ newCompositeNode(grammarAccess.getListRule()); }
	 iv_ruleList=ruleList 
	 { $current=$iv_ruleList.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule List
ruleList returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT");
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getListAccess().getListAction_0(),
            $current);
    }
)	otherlv_1='[' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getListAccess().getLeftSquareBracketKeyword_1());
    }
(
    { 
        newCompositeNode(grammarAccess.getListAccess().getSkipped_NLParserRuleCall_2_0()); 
    }
ruleSkipped_NL
    { 
        afterParserOrEnumRuleCall();
    }
(
(
(
		{ 
	        newCompositeNode(grammarAccess.getListAccess().getValuesAtomParserRuleCall_2_1_0_0()); 
	    }
		lv_values_3_1=ruleAtom		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getListRule());
	        }
       		add(
       			$current, 
       			"values",
        		lv_values_3_1, 
        		"lu.ses.engineering.spell.SpellDatabase.Atom");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getListAccess().getValuesComplexValueParserRuleCall_2_1_0_1()); 
	    }
		lv_values_3_2=ruleComplexValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getListRule());
	        }
       		add(
       			$current, 
       			"values",
        		lv_values_3_2, 
        		"lu.ses.engineering.spell.SpellDatabase.ComplexValue");
	        afterParserOrEnumRuleCall();
	    }

)

)
)
    { 
        newCompositeNode(grammarAccess.getListAccess().getSkipped_NLParserRuleCall_2_2()); 
    }
ruleSkipped_NL
    { 
        afterParserOrEnumRuleCall();
    }
(	otherlv_5=',' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getListAccess().getCommaKeyword_2_3_0());
    }

    { 
        newCompositeNode(grammarAccess.getListAccess().getSkipped_NLParserRuleCall_2_3_1()); 
    }
ruleSkipped_NL
    { 
        afterParserOrEnumRuleCall();
    }
(
(
(
		{ 
	        newCompositeNode(grammarAccess.getListAccess().getValuesAtomParserRuleCall_2_3_2_0_0()); 
	    }
		lv_values_7_1=ruleAtom		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getListRule());
	        }
       		add(
       			$current, 
       			"values",
        		lv_values_7_1, 
        		"lu.ses.engineering.spell.SpellDatabase.Atom");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getListAccess().getValuesComplexValueParserRuleCall_2_3_2_0_1()); 
	    }
		lv_values_7_2=ruleComplexValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getListRule());
	        }
       		add(
       			$current, 
       			"values",
        		lv_values_7_2, 
        		"lu.ses.engineering.spell.SpellDatabase.ComplexValue");
	        afterParserOrEnumRuleCall();
	    }

)

)
))*)?
    { 
        newCompositeNode(grammarAccess.getListAccess().getSkipped_NLParserRuleCall_3()); 
    }
ruleSkipped_NL
    { 
        afterParserOrEnumRuleCall();
    }
(	otherlv_9=',' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getListAccess().getCommaKeyword_4());
    }
)?
    { 
        newCompositeNode(grammarAccess.getListAccess().getSkipped_NLParserRuleCall_5()); 
    }
ruleSkipped_NL
    { 
        afterParserOrEnumRuleCall();
    }
	otherlv_11=']' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getListAccess().getRightSquareBracketKeyword_6());
    }
)
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleDictionary
entryRuleDictionary returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT");
	}
	:
	{ newCompositeNode(grammarAccess.getDictionaryRule()); }
	 iv_ruleDictionary=ruleDictionary 
	 { $current=$iv_ruleDictionary.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule Dictionary
ruleDictionary returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT");
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getDictionaryAccess().getDicitonaryAction_0(),
            $current);
    }
)	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getDictionaryAccess().getLeftCurlyBracketKeyword_1());
    }
(
    { 
        newCompositeNode(grammarAccess.getDictionaryAccess().getSkipped_NLParserRuleCall_2_0()); 
    }
ruleSkipped_NL
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDictionaryAccess().getEntriesDictionaryEntryParserRuleCall_2_1_0()); 
	    }
		lv_entries_3_0=ruleDictionaryEntry		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDictionaryRule());
	        }
       		add(
       			$current, 
       			"entries",
        		lv_entries_3_0, 
        		"lu.ses.engineering.spell.SpellDatabase.DictionaryEntry");
	        afterParserOrEnumRuleCall();
	    }

)
)
    { 
        newCompositeNode(grammarAccess.getDictionaryAccess().getSkipped_NLParserRuleCall_2_2()); 
    }
ruleSkipped_NL
    { 
        afterParserOrEnumRuleCall();
    }
(	otherlv_5=',' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getDictionaryAccess().getCommaKeyword_2_3_0());
    }

    { 
        newCompositeNode(grammarAccess.getDictionaryAccess().getSkipped_NLParserRuleCall_2_3_1()); 
    }
ruleSkipped_NL
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDictionaryAccess().getEntriesDictionaryEntryParserRuleCall_2_3_2_0()); 
	    }
		lv_entries_7_0=ruleDictionaryEntry		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDictionaryRule());
	        }
       		add(
       			$current, 
       			"entries",
        		lv_entries_7_0, 
        		"lu.ses.engineering.spell.SpellDatabase.DictionaryEntry");
	        afterParserOrEnumRuleCall();
	    }

)
)
    { 
        newCompositeNode(grammarAccess.getDictionaryAccess().getSkipped_NLParserRuleCall_2_3_3()); 
    }
ruleSkipped_NL
    { 
        afterParserOrEnumRuleCall();
    }
)*)?
    { 
        newCompositeNode(grammarAccess.getDictionaryAccess().getSkipped_NLParserRuleCall_3()); 
    }
ruleSkipped_NL
    { 
        afterParserOrEnumRuleCall();
    }
(	otherlv_10=',' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getDictionaryAccess().getCommaKeyword_4());
    }
)?
    { 
        newCompositeNode(grammarAccess.getDictionaryAccess().getSkipped_NLParserRuleCall_5()); 
    }
ruleSkipped_NL
    { 
        afterParserOrEnumRuleCall();
    }
	otherlv_12='}' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getDictionaryAccess().getRightCurlyBracketKeyword_6());
    }
)
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleDictionaryEntry
entryRuleDictionaryEntry returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT");
	}
	:
	{ newCompositeNode(grammarAccess.getDictionaryEntryRule()); }
	 iv_ruleDictionaryEntry=ruleDictionaryEntry 
	 { $current=$iv_ruleDictionaryEntry.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule DictionaryEntry
ruleDictionaryEntry returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT");
    }
    @after { leaveRule(); }:
((
(
(
		{ 
	        newCompositeNode(grammarAccess.getDictionaryEntryAccess().getKeyAtomParserRuleCall_0_0_0()); 
	    }
		lv_key_0_1=ruleAtom		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDictionaryEntryRule());
	        }
       		set(
       			$current, 
       			"key",
        		lv_key_0_1, 
        		"lu.ses.engineering.spell.SpellDatabase.Atom");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getDictionaryEntryAccess().getKeyComplexValueParserRuleCall_0_0_1()); 
	    }
		lv_key_0_2=ruleComplexValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDictionaryEntryRule());
	        }
       		set(
       			$current, 
       			"key",
        		lv_key_0_2, 
        		"lu.ses.engineering.spell.SpellDatabase.ComplexValue");
	        afterParserOrEnumRuleCall();
	    }

)

)
)
    { 
        newCompositeNode(grammarAccess.getDictionaryEntryAccess().getSkipped_NLParserRuleCall_1()); 
    }
ruleSkipped_NL
    { 
        afterParserOrEnumRuleCall();
    }
(this_COLON_2=RULE_COLON
    { 
    newLeafNode(this_COLON_2, grammarAccess.getDictionaryEntryAccess().getCOLONTerminalRuleCall_2_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getDictionaryEntryAccess().getSkipped_NLParserRuleCall_2_1()); 
    }
ruleSkipped_NL
    { 
        afterParserOrEnumRuleCall();
    }
(
(
(
		{ 
	        newCompositeNode(grammarAccess.getDictionaryEntryAccess().getValueAtomParserRuleCall_2_2_0_0()); 
	    }
		lv_value_4_1=ruleAtom		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDictionaryEntryRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_4_1, 
        		"lu.ses.engineering.spell.SpellDatabase.Atom");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getDictionaryEntryAccess().getValueComplexValueParserRuleCall_2_2_0_1()); 
	    }
		lv_value_4_2=ruleComplexValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDictionaryEntryRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_4_2, 
        		"lu.ses.engineering.spell.SpellDatabase.ComplexValue");
	        afterParserOrEnumRuleCall();
	    }

)

)
))?)
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleAtom
entryRuleAtom returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAtomRule()); }
	 iv_ruleAtom=ruleAtom 
	 { $current=$iv_ruleAtom.current; } 
	 EOF 
;

// Rule Atom
ruleAtom returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAtomAccess().getNumberParserRuleCall_0()); 
    }
    this_Number_0=ruleNumber
    { 
        $current = $this_Number_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getAtomAccess().getStringValueParserRuleCall_1()); 
    }
    this_StringValue_1=ruleStringValue
    { 
        $current = $this_StringValue_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getAtomAccess().getBooleanParserRuleCall_2()); 
    }
    this_Boolean_2=ruleBoolean
    { 
        $current = $this_Boolean_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getAtomAccess().getLambda_StmtParserRuleCall_3()); 
    }
    this_Lambda_Stmt_3=ruleLambda_Stmt
    { 
        $current = $this_Lambda_Stmt_3.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleRelDate
entryRuleRelDate returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRelDateRule()); }
	 iv_ruleRelDate=ruleRelDate 
	 { $current=$iv_ruleRelDate.current; } 
	 EOF 
;

// Rule RelDate
ruleRelDate returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
ruleRELTIME
)
)=>
(
		{ 
	        newCompositeNode(grammarAccess.getRelDateAccess().getValRELTIMEParserRuleCall_0()); 
	    }
		lv_val_0_0=ruleRELTIME		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRelDateRule());
	        }
       		set(
       			$current, 
       			"val",
        		lv_val_0_0, 
        		"lu.ses.engineering.spell.SpellDatabase.RELTIME");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleDate
entryRuleDate returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDateRule()); }
	 iv_ruleDate=ruleDate 
	 { $current=$iv_ruleDate.current; } 
	 EOF 
;

// Rule Date
ruleDate returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
ruleABSTIME
)
)=>
(
		{ 
	        newCompositeNode(grammarAccess.getDateAccess().getValABSTIMEParserRuleCall_0()); 
	    }
		lv_val_0_0=ruleABSTIME		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDateRule());
	        }
       		set(
       			$current, 
       			"val",
        		lv_val_0_0, 
        		"lu.ses.engineering.spell.SpellDatabase.ABSTIME");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleBoolean
entryRuleBoolean returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBooleanRule()); }
	 iv_ruleBoolean=ruleBoolean 
	 { $current=$iv_ruleBoolean.current; } 
	 EOF 
;

// Rule Boolean
ruleBoolean returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_val_0_0=RULE_BOOL_EXPR
		{
			newLeafNode(lv_val_0_0, grammarAccess.getBooleanAccess().getValBOOL_EXPRTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBooleanRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"val",
        		lv_val_0_0, 
        		"lu.ses.engineering.spell.SpellDatabase.BOOL_EXPR");
	    }

)
)
;





// Entry rule entryRuleStringValue
entryRuleStringValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStringValueRule()); }
	 iv_ruleStringValue=ruleStringValue 
	 { $current=$iv_ruleStringValue.current; } 
	 EOF 
;

// Rule StringValue
ruleStringValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_val_0_0=RULE_STRING
		{
			newLeafNode(lv_val_0_0, grammarAccess.getStringValueAccess().getValSTRINGTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStringValueRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"val",
        		lv_val_0_0, 
        		"lu.ses.engineering.spell.SpellDatabase.STRING");
	    }

)
)
;





// Entry rule entryRuleNumber
entryRuleNumber returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNumberRule()); }
	 iv_ruleNumber=ruleNumber 
	 { $current=$iv_ruleNumber.current; } 
	 EOF 
;

// Rule Number
ruleNumber returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_val_0_0=RULE_BIN_HEX_OCT
		{
			newLeafNode(lv_val_0_0, grammarAccess.getNumberAccess().getValBIN_HEX_OCTTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNumberRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"val",
        		lv_val_0_0, 
        		"lu.ses.engineering.spell.SpellDatabase.BIN_HEX_OCT");
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getNumberAccess().getValIntINTEGERParserRuleCall_1_0()); 
	    }
		lv_valInt_1_0=ruleINTEGER		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNumberRule());
	        }
       		set(
       			$current, 
       			"valInt",
        		lv_valInt_1_0, 
        		"lu.ses.engineering.spell.SpellDatabase.INTEGER");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |((
(
ruleFLOAT_Val
)
)=>
(
		{ 
	        newCompositeNode(grammarAccess.getNumberAccess().getValStrFLOAT_ValParserRuleCall_2_0()); 
	    }
		lv_valStr_2_0=ruleFLOAT_Val		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNumberRule());
	        }
       		set(
       			$current, 
       			"valStr",
        		lv_valStr_2_0, 
        		"lu.ses.engineering.spell.SpellDatabase.FLOAT_Val");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleFLOAT_Val
entryRuleFLOAT_Val returns [String current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
	}
	:
	{ newCompositeNode(grammarAccess.getFLOAT_ValRule()); } 
	 iv_ruleFLOAT_Val=ruleFLOAT_Val 
	 { $current=$iv_ruleFLOAT_Val.current.getText(); }  
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule FLOAT_Val
ruleFLOAT_Val returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
    }
    @after { leaveRule(); }:
((    this_PLUS_0=RULE_PLUS    {
		$current.merge(this_PLUS_0);
    }

    { 
    newLeafNode(this_PLUS_0, grammarAccess.getFLOAT_ValAccess().getPLUSTerminalRuleCall_0_0()); 
    }

    |    this_MINUS_1=RULE_MINUS    {
		$current.merge(this_MINUS_1);
    }

    { 
    newLeafNode(this_MINUS_1, grammarAccess.getFLOAT_ValAccess().getMINUSTerminalRuleCall_0_1()); 
    }
)?    this_FLOAT_2=RULE_FLOAT    {
		$current.merge(this_FLOAT_2);
    }

    { 
    newLeafNode(this_FLOAT_2, grammarAccess.getFLOAT_ValAccess().getFLOATTerminalRuleCall_1()); 
    }
)
    ;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleSkipped_NL
entryRuleSkipped_NL returns [String current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
	}
	:
	{ newCompositeNode(grammarAccess.getSkipped_NLRule()); } 
	 iv_ruleSkipped_NL=ruleSkipped_NL 
	 { $current=$iv_ruleSkipped_NL.current.getText(); }  
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule Skipped_NL
ruleSkipped_NL returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
    }
    @after { leaveRule(); }:
(
	kw='\\' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSkipped_NLAccess().getReverseSolidusKeyword_0()); 
    }
    this_NL_1=RULE_NL    {
		$current.merge(this_NL_1);
    }

    { 
    newLeafNode(this_NL_1, grammarAccess.getSkipped_NLAccess().getNLTerminalRuleCall_1()); 
    }
)*
    ;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleRELTIME
entryRuleRELTIME returns [String current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
	}
	:
	{ newCompositeNode(grammarAccess.getRELTIMERule()); } 
	 iv_ruleRELTIME=ruleRELTIME 
	 { $current=$iv_ruleRELTIME.current.getText(); }  
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule RELTIME
ruleRELTIME returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getRELTIMEAccess().getINTEGERParserRuleCall_0()); 
    }
    this_INTEGER_0=ruleINTEGER    {
		$current.merge(this_INTEGER_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
((    this_INT_1=RULE_INT    {
		$current.merge(this_INT_1);
    }

    { 
    newLeafNode(this_INT_1, grammarAccess.getRELTIMEAccess().getINTTerminalRuleCall_1_0_0()); 
    }
    this_COLON_2=RULE_COLON    {
		$current.merge(this_COLON_2);
    }

    { 
    newLeafNode(this_COLON_2, grammarAccess.getRELTIMEAccess().getCOLONTerminalRuleCall_1_0_1()); 
    }
    this_INT_3=RULE_INT    {
		$current.merge(this_INT_3);
    }

    { 
    newLeafNode(this_INT_3, grammarAccess.getRELTIMEAccess().getINTTerminalRuleCall_1_0_2()); 
    }
    this_COLON_4=RULE_COLON    {
		$current.merge(this_COLON_4);
    }

    { 
    newLeafNode(this_COLON_4, grammarAccess.getRELTIMEAccess().getCOLONTerminalRuleCall_1_0_3()); 
    }
    this_INT_5=RULE_INT    {
		$current.merge(this_INT_5);
    }

    { 
    newLeafNode(this_INT_5, grammarAccess.getRELTIMEAccess().getINTTerminalRuleCall_1_0_4()); 
    }
)
    |(    this_COLON_6=RULE_COLON    {
		$current.merge(this_COLON_6);
    }

    { 
    newLeafNode(this_COLON_6, grammarAccess.getRELTIMEAccess().getCOLONTerminalRuleCall_1_1_0()); 
    }
    this_INT_7=RULE_INT    {
		$current.merge(this_INT_7);
    }

    { 
    newLeafNode(this_INT_7, grammarAccess.getRELTIMEAccess().getINTTerminalRuleCall_1_1_1()); 
    }
    this_COLON_8=RULE_COLON    {
		$current.merge(this_COLON_8);
    }

    { 
    newLeafNode(this_COLON_8, grammarAccess.getRELTIMEAccess().getCOLONTerminalRuleCall_1_1_2()); 
    }
    this_INT_9=RULE_INT    {
		$current.merge(this_INT_9);
    }

    { 
    newLeafNode(this_INT_9, grammarAccess.getRELTIMEAccess().getINTTerminalRuleCall_1_1_3()); 
    }
)))
    ;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleABSTIME
entryRuleABSTIME returns [String current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
	}
	:
	{ newCompositeNode(grammarAccess.getABSTIMERule()); } 
	 iv_ruleABSTIME=ruleABSTIME 
	 { $current=$iv_ruleABSTIME.current.getText(); }  
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule ABSTIME
ruleABSTIME returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
    }
    @after { leaveRule(); }:
(((    this_INT_0=RULE_INT    {
		$current.merge(this_INT_0);
    }

    { 
    newLeafNode(this_INT_0, grammarAccess.getABSTIMEAccess().getINTTerminalRuleCall_0_0_0()); 
    }
    this_MINUS_1=RULE_MINUS    {
		$current.merge(this_MINUS_1);
    }

    { 
    newLeafNode(this_MINUS_1, grammarAccess.getABSTIMEAccess().getMINUSTerminalRuleCall_0_0_1()); 
    }
(    this_INT_2=RULE_INT    {
		$current.merge(this_INT_2);
    }

    { 
    newLeafNode(this_INT_2, grammarAccess.getABSTIMEAccess().getINTTerminalRuleCall_0_0_2_0()); 
    }

    |
    { 
        newCompositeNode(grammarAccess.getABSTIMEAccess().getID_STMTParserRuleCall_0_0_2_1()); 
    }
    this_ID_STMT_3=ruleID_STMT    {
		$current.merge(this_ID_STMT_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)    this_MINUS_4=RULE_MINUS    {
		$current.merge(this_MINUS_4);
    }

    { 
    newLeafNode(this_MINUS_4, grammarAccess.getABSTIMEAccess().getMINUSTerminalRuleCall_0_0_3()); 
    }
    this_INT_5=RULE_INT    {
		$current.merge(this_INT_5);
    }

    { 
    newLeafNode(this_INT_5, grammarAccess.getABSTIMEAccess().getINTTerminalRuleCall_0_0_4()); 
    }
)(    this_COLON_6=RULE_COLON    {
		$current.merge(this_COLON_6);
    }

    { 
    newLeafNode(this_COLON_6, grammarAccess.getABSTIMEAccess().getCOLONTerminalRuleCall_0_1_0()); 
    }

    |    this_WS_7=RULE_WS    {
		$current.merge(this_WS_7);
    }

    { 
    newLeafNode(this_WS_7, grammarAccess.getABSTIMEAccess().getWSTerminalRuleCall_0_1_1()); 
    }
)(    this_INT_8=RULE_INT    {
		$current.merge(this_INT_8);
    }

    { 
    newLeafNode(this_INT_8, grammarAccess.getABSTIMEAccess().getINTTerminalRuleCall_0_2_0()); 
    }
    this_COLON_9=RULE_COLON    {
		$current.merge(this_COLON_9);
    }

    { 
    newLeafNode(this_COLON_9, grammarAccess.getABSTIMEAccess().getCOLONTerminalRuleCall_0_2_1()); 
    }
    this_INT_10=RULE_INT    {
		$current.merge(this_INT_10);
    }

    { 
    newLeafNode(this_INT_10, grammarAccess.getABSTIMEAccess().getINTTerminalRuleCall_0_2_2()); 
    }
(    this_COLON_11=RULE_COLON    {
		$current.merge(this_COLON_11);
    }

    { 
    newLeafNode(this_COLON_11, grammarAccess.getABSTIMEAccess().getCOLONTerminalRuleCall_0_2_3_0()); 
    }
    this_INT_12=RULE_INT    {
		$current.merge(this_INT_12);
    }

    { 
    newLeafNode(this_INT_12, grammarAccess.getABSTIMEAccess().getINTTerminalRuleCall_0_2_3_1()); 
    }
)?)?)
    |((    this_INT_13=RULE_INT    {
		$current.merge(this_INT_13);
    }

    { 
    newLeafNode(this_INT_13, grammarAccess.getABSTIMEAccess().getINTTerminalRuleCall_1_0_0()); 
    }

	kw='/' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getABSTIMEAccess().getSolidusKeyword_1_0_1()); 
    }
(    this_INT_15=RULE_INT    {
		$current.merge(this_INT_15);
    }

    { 
    newLeafNode(this_INT_15, grammarAccess.getABSTIMEAccess().getINTTerminalRuleCall_1_0_2_0()); 
    }

    |    this_ID_16=RULE_ID    {
		$current.merge(this_ID_16);
    }

    { 
    newLeafNode(this_ID_16, grammarAccess.getABSTIMEAccess().getIDTerminalRuleCall_1_0_2_1()); 
    }
)
	kw='/' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getABSTIMEAccess().getSolidusKeyword_1_0_3()); 
    }
    this_INT_18=RULE_INT    {
		$current.merge(this_INT_18);
    }

    { 
    newLeafNode(this_INT_18, grammarAccess.getABSTIMEAccess().getINTTerminalRuleCall_1_0_4()); 
    }
)(    this_COLON_19=RULE_COLON    {
		$current.merge(this_COLON_19);
    }

    { 
    newLeafNode(this_COLON_19, grammarAccess.getABSTIMEAccess().getCOLONTerminalRuleCall_1_1_0()); 
    }

    |    this_WS_20=RULE_WS    {
		$current.merge(this_WS_20);
    }

    { 
    newLeafNode(this_WS_20, grammarAccess.getABSTIMEAccess().getWSTerminalRuleCall_1_1_1()); 
    }
)(    this_INT_21=RULE_INT    {
		$current.merge(this_INT_21);
    }

    { 
    newLeafNode(this_INT_21, grammarAccess.getABSTIMEAccess().getINTTerminalRuleCall_1_2_0()); 
    }
    this_COLON_22=RULE_COLON    {
		$current.merge(this_COLON_22);
    }

    { 
    newLeafNode(this_COLON_22, grammarAccess.getABSTIMEAccess().getCOLONTerminalRuleCall_1_2_1()); 
    }
    this_INT_23=RULE_INT    {
		$current.merge(this_INT_23);
    }

    { 
    newLeafNode(this_INT_23, grammarAccess.getABSTIMEAccess().getINTTerminalRuleCall_1_2_2()); 
    }
(    this_COLON_24=RULE_COLON    {
		$current.merge(this_COLON_24);
    }

    { 
    newLeafNode(this_COLON_24, grammarAccess.getABSTIMEAccess().getCOLONTerminalRuleCall_1_2_3_0()); 
    }
    this_INT_25=RULE_INT    {
		$current.merge(this_INT_25);
    }

    { 
    newLeafNode(this_INT_25, grammarAccess.getABSTIMEAccess().getINTTerminalRuleCall_1_2_3_1()); 
    }
)?)?))
    ;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleSINGLE_VALUE
entryRuleSINGLE_VALUE returns [String current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
	}
	:
	{ newCompositeNode(grammarAccess.getSINGLE_VALUERule()); } 
	 iv_ruleSINGLE_VALUE=ruleSINGLE_VALUE 
	 { $current=$iv_ruleSINGLE_VALUE.current.getText(); }  
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule SINGLE_VALUE
ruleSINGLE_VALUE returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
    }
    @after { leaveRule(); }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getSINGLE_VALUEAccess().getIDTerminalRuleCall_0()); 
    }

    |    this_FLOAT_1=RULE_FLOAT    {
		$current.merge(this_FLOAT_1);
    }

    { 
    newLeafNode(this_FLOAT_1, grammarAccess.getSINGLE_VALUEAccess().getFLOATTerminalRuleCall_1()); 
    }

    |    this_INT_2=RULE_INT    {
		$current.merge(this_INT_2);
    }

    { 
    newLeafNode(this_INT_2, grammarAccess.getSINGLE_VALUEAccess().getINTTerminalRuleCall_2()); 
    }

    |    this_PLUS_3=RULE_PLUS    {
		$current.merge(this_PLUS_3);
    }

    { 
    newLeafNode(this_PLUS_3, grammarAccess.getSINGLE_VALUEAccess().getPLUSTerminalRuleCall_3()); 
    }

    |    this_MINUS_4=RULE_MINUS    {
		$current.merge(this_MINUS_4);
    }

    { 
    newLeafNode(this_MINUS_4, grammarAccess.getSINGLE_VALUEAccess().getMINUSTerminalRuleCall_4()); 
    }

    |    this_ML_COMMENT_5=RULE_ML_COMMENT    {
		$current.merge(this_ML_COMMENT_5);
    }

    { 
    newLeafNode(this_ML_COMMENT_5, grammarAccess.getSINGLE_VALUEAccess().getML_COMMENTTerminalRuleCall_5()); 
    }

    |    this_BIN_HEX_OCT_6=RULE_BIN_HEX_OCT    {
		$current.merge(this_BIN_HEX_OCT_6);
    }

    { 
    newLeafNode(this_BIN_HEX_OCT_6, grammarAccess.getSINGLE_VALUEAccess().getBIN_HEX_OCTTerminalRuleCall_6()); 
    }

    |    this_BOOL_EXPR_7=RULE_BOOL_EXPR    {
		$current.merge(this_BOOL_EXPR_7);
    }

    { 
    newLeafNode(this_BOOL_EXPR_7, grammarAccess.getSINGLE_VALUEAccess().getBOOL_EXPRTerminalRuleCall_7()); 
    }

    |    this_STRING_8=RULE_STRING    {
		$current.merge(this_STRING_8);
    }

    { 
    newLeafNode(this_STRING_8, grammarAccess.getSINGLE_VALUEAccess().getSTRINGTerminalRuleCall_8()); 
    }

    |    this_ANY_OTHER_9=RULE_ANY_OTHER    {
		$current.merge(this_ANY_OTHER_9);
    }

    { 
    newLeafNode(this_ANY_OTHER_9, grammarAccess.getSINGLE_VALUEAccess().getANY_OTHERTerminalRuleCall_9()); 
    }

    |
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSINGLE_VALUEAccess().getFullStopKeyword_10()); 
    }
)+
    ;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleID_STMT
entryRuleID_STMT returns [String current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
	}
	:
	{ newCompositeNode(grammarAccess.getID_STMTRule()); } 
	 iv_ruleID_STMT=ruleID_STMT 
	 { $current=$iv_ruleID_STMT.current.getText(); }  
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule ID_STMT
ruleID_STMT returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
    }
    @after { leaveRule(); }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getID_STMTAccess().getIDTerminalRuleCall_0()); 
    }
(    this_ID_1=RULE_ID    {
		$current.merge(this_ID_1);
    }

    { 
    newLeafNode(this_ID_1, grammarAccess.getID_STMTAccess().getIDTerminalRuleCall_1_0()); 
    }

    |
	kw='\\' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getID_STMTAccess().getReverseSolidusKeyword_1_1()); 
    }

    |
	kw='/' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getID_STMTAccess().getSolidusKeyword_1_2()); 
    }
)*)
    ;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleASTRIUM_ID
entryRuleASTRIUM_ID returns [String current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
	}
	:
	{ newCompositeNode(grammarAccess.getASTRIUM_IDRule()); } 
	 iv_ruleASTRIUM_ID=ruleASTRIUM_ID 
	 { $current=$iv_ruleASTRIUM_ID.current.getText(); }  
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule ASTRIUM_ID
ruleASTRIUM_ID returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
    }
    @after { leaveRule(); }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getASTRIUM_IDAccess().getIDTerminalRuleCall_0()); 
    }
(    this_ID_1=RULE_ID    {
		$current.merge(this_ID_1);
    }

    { 
    newLeafNode(this_ID_1, grammarAccess.getASTRIUM_IDAccess().getIDTerminalRuleCall_1()); 
    }
)*)
    ;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleASTRIUM_TIME
entryRuleASTRIUM_TIME returns [String current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
	}
	:
	{ newCompositeNode(grammarAccess.getASTRIUM_TIMERule()); } 
	 iv_ruleASTRIUM_TIME=ruleASTRIUM_TIME 
	 { $current=$iv_ruleASTRIUM_TIME.current.getText(); }  
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule ASTRIUM_TIME
ruleASTRIUM_TIME returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
    }
    @after { leaveRule(); }:
(((    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getASTRIUM_TIMEAccess().getIDTerminalRuleCall_0_0_0()); 
    }

	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getASTRIUM_TIMEAccess().getFullStopKeyword_0_0_1()); 
    }
)?    this_INT_2=RULE_INT    {
		$current.merge(this_INT_2);
    }

    { 
    newLeafNode(this_INT_2, grammarAccess.getASTRIUM_TIMEAccess().getINTTerminalRuleCall_0_1()); 
    }
    this_ID_3=RULE_ID    {
		$current.merge(this_ID_3);
    }

    { 
    newLeafNode(this_ID_3, grammarAccess.getASTRIUM_TIMEAccess().getIDTerminalRuleCall_0_2()); 
    }
    this_INT_4=RULE_INT    {
		$current.merge(this_INT_4);
    }

    { 
    newLeafNode(this_INT_4, grammarAccess.getASTRIUM_TIMEAccess().getINTTerminalRuleCall_0_3()); 
    }
)?    this_INT_5=RULE_INT    {
		$current.merge(this_INT_5);
    }

    { 
    newLeafNode(this_INT_5, grammarAccess.getASTRIUM_TIMEAccess().getINTTerminalRuleCall_1()); 
    }
    this_COLON_6=RULE_COLON    {
		$current.merge(this_COLON_6);
    }

    { 
    newLeafNode(this_COLON_6, grammarAccess.getASTRIUM_TIMEAccess().getCOLONTerminalRuleCall_2()); 
    }
    this_INT_7=RULE_INT    {
		$current.merge(this_INT_7);
    }

    { 
    newLeafNode(this_INT_7, grammarAccess.getASTRIUM_TIMEAccess().getINTTerminalRuleCall_3()); 
    }
    this_COLON_8=RULE_COLON    {
		$current.merge(this_COLON_8);
    }

    { 
    newLeafNode(this_COLON_8, grammarAccess.getASTRIUM_TIMEAccess().getCOLONTerminalRuleCall_4()); 
    }
    this_INT_9=RULE_INT    {
		$current.merge(this_INT_9);
    }

    { 
    newLeafNode(this_INT_9, grammarAccess.getASTRIUM_TIMEAccess().getINTTerminalRuleCall_5()); 
    }
)
    ;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleINTEGER
entryRuleINTEGER returns [String current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
	}
	:
	{ newCompositeNode(grammarAccess.getINTEGERRule()); } 
	 iv_ruleINTEGER=ruleINTEGER 
	 { $current=$iv_ruleINTEGER.current.getText(); }  
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule INTEGER
ruleINTEGER returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
    }
    @after { leaveRule(); }:
((    this_PLUS_0=RULE_PLUS    {
		$current.merge(this_PLUS_0);
    }

    { 
    newLeafNode(this_PLUS_0, grammarAccess.getINTEGERAccess().getPLUSTerminalRuleCall_0_0()); 
    }

    |    this_MINUS_1=RULE_MINUS    {
		$current.merge(this_MINUS_1);
    }

    { 
    newLeafNode(this_MINUS_1, grammarAccess.getINTEGERAccess().getMINUSTerminalRuleCall_0_1()); 
    }
)?    this_INT_2=RULE_INT    {
		$current.merge(this_INT_2);
    }

    { 
    newLeafNode(this_INT_2, grammarAccess.getINTEGERAccess().getINTTerminalRuleCall_1()); 
    }
)
    ;
finally {
	myHiddenTokenState.restore();
}





RULE_ASTRIUM_COMMENT : '*' '*' ~(('\n'|'\r'))*;

RULE_PLUS : '+';

RULE_MINUS : '-';

RULE_WS : (' '|'\t')+;

RULE_COLON : ':';

RULE_LAMBDA : 'lambda';

RULE_TM : 'TM';

RULE_BOOL_EXPR : ('True'|'False'|'None');

RULE_TIME_EXPR : ('SECOND'|'MINUTE'|'HOUR'|'DAY'|'WEEK');

RULE_SPELL : 'SPELL';

RULE_WAIT : 'WAIT';

RULE_PAUSE : 'PAUSE';

RULE_CMD : 'CMD';

RULE_STATE_EXPR : ('STATE'|'ENG'|'RAW');

RULE_FLOAT : (RULE_INT '.' RULE_INT (('e'|'E') ('+'|'-')? RULE_INT?)?|RULE_INT ('.' RULE_INT)? ('e'|'E') ('+'|'-')? RULE_INT?);

RULE_INT : ('0'..'9')+;

RULE_ID : ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_DOLLAR : '$';

RULE_BIN_HEX_OCT : ('0' ('x'|'X') ('0'..'9'|'a'..'f'|'A'..'F')+|'0' ('b'|'B') ('0'..'1')+|'0' ('o'|'O') ('0'..'7')+);

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\''|'\n')))* '\'');

RULE_ML_COMMENT : ('\'\'\'' ( options {greedy=false;} : . )*'\'\'\''|'"""' ( options {greedy=false;} : . )*'"""');

RULE_SL_COMMENT : '#' ~(('\n'|'\r'))*;

RULE_NL : ('\r'|'\n')+;

RULE_ANY_OTHER : .;


