/*
 * generated by Xtext
 */
package lu.ses.engineering.spell.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;


@Singleton
public class SpellDatabaseGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class SpellDatabaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.SpellDatabase.SpellDatabase");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSkipNLAndCommentsParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Action cAstriumSpellDatabaseAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Keyword cFILE_HEADERKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final RuleCall cSkipNLAndCommentsParserRuleCall_1_0_2 = (RuleCall)cGroup_1_0.eContents().get(2);
		private final Assignment cDatabaseAssignment_1_0_3 = (Assignment)cGroup_1_0.eContents().get(3);
		private final RuleCall cDatabaseAstriumDatabaseParserRuleCall_1_0_3_0 = (RuleCall)cDatabaseAssignment_1_0_3.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Action cSpellDatabaseAction_1_1_0 = (Action)cGroup_1_1.eContents().get(0);
		private final Group cGroup_1_1_1 = (Group)cGroup_1_1.eContents().get(1);
		private final Assignment cDatabaseEntryAssignment_1_1_1_0 = (Assignment)cGroup_1_1_1.eContents().get(0);
		private final RuleCall cDatabaseEntryDatabaseEntryParserRuleCall_1_1_1_0_0 = (RuleCall)cDatabaseEntryAssignment_1_1_1_0.eContents().get(0);
		private final Group cGroup_1_1_1_1 = (Group)cGroup_1_1_1.eContents().get(1);
		private final RuleCall cSkipNLAndComments2ParserRuleCall_1_1_1_1_0 = (RuleCall)cGroup_1_1_1_1.eContents().get(0);
		private final Assignment cDatabaseEntryAssignment_1_1_1_1_1 = (Assignment)cGroup_1_1_1_1.eContents().get(1);
		private final RuleCall cDatabaseEntryDatabaseEntryParserRuleCall_1_1_1_1_1_0 = (RuleCall)cDatabaseEntryAssignment_1_1_1_1_1.eContents().get(0);
		private final RuleCall cSkipNLAndCommentsParserRuleCall_1_1_1_2 = (RuleCall)cGroup_1_1_1.eContents().get(2);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Action cCSVFileAction_1_2_0 = (Action)cGroup_1_2.eContents().get(0);
		private final Assignment cCsvEntriesAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cCsvEntriesCSVEntryParserRuleCall_1_2_1_0 = (RuleCall)cCsvEntriesAssignment_1_2_1.eContents().get(0);
		private final RuleCall cSkipNLAndComments2ParserRuleCall_1_2_2 = (RuleCall)cGroup_1_2.eContents().get(2);
		private final Group cGroup_1_2_3 = (Group)cGroup_1_2.eContents().get(3);
		private final RuleCall cSkipNLAndComments2ParserRuleCall_1_2_3_0 = (RuleCall)cGroup_1_2_3.eContents().get(0);
		private final Assignment cCsvEntriesAssignment_1_2_3_1 = (Assignment)cGroup_1_2_3.eContents().get(1);
		private final RuleCall cCsvEntriesCSVEntryParserRuleCall_1_2_3_1_0 = (RuleCall)cCsvEntriesAssignment_1_2_3_1.eContents().get(0);
		private final RuleCall cSkipNLAndCommentsParserRuleCall_1_2_4 = (RuleCall)cGroup_1_2.eContents().get(4);
		
		//SpellDatabase hidden(ANY_OTHER, WS, ML_COMMENT, SL_COMMENT):
		//	SkipNLAndComments ({AstriumSpellDatabase} 'FILE_HEADER' SkipNLAndComments database=AstriumDatabase | {SpellDatabase}
		//	(databaseEntry+=DatabaseEntry (SkipNLAndComments2 databaseEntry+=DatabaseEntry?)*
		//	SkipNLAndComments) | {CSVFile} csvEntries+=CSVEntry SkipNLAndComments2? (SkipNLAndComments2? =>
		//	csvEntries+=CSVEntry)*
		//	SkipNLAndComments);
		@Override public ParserRule getRule() { return rule; }

		//SkipNLAndComments ({AstriumSpellDatabase} 'FILE_HEADER' SkipNLAndComments database=AstriumDatabase | {SpellDatabase}
		//(databaseEntry+=DatabaseEntry (SkipNLAndComments2 databaseEntry+=DatabaseEntry?)* SkipNLAndComments) | {CSVFile}
		//csvEntries+=CSVEntry SkipNLAndComments2? (SkipNLAndComments2? => csvEntries+=CSVEntry)* SkipNLAndComments)
		public Group getGroup() { return cGroup; }

		//SkipNLAndComments
		public RuleCall getSkipNLAndCommentsParserRuleCall_0() { return cSkipNLAndCommentsParserRuleCall_0; }

		//{AstriumSpellDatabase} 'FILE_HEADER' SkipNLAndComments database=AstriumDatabase | {SpellDatabase}
		//(databaseEntry+=DatabaseEntry (SkipNLAndComments2 databaseEntry+=DatabaseEntry?)* SkipNLAndComments) | {CSVFile}
		//csvEntries+=CSVEntry SkipNLAndComments2? (SkipNLAndComments2? => csvEntries+=CSVEntry)* SkipNLAndComments
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//{AstriumSpellDatabase} 'FILE_HEADER' SkipNLAndComments database=AstriumDatabase
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{AstriumSpellDatabase}
		public Action getAstriumSpellDatabaseAction_1_0_0() { return cAstriumSpellDatabaseAction_1_0_0; }

		//'FILE_HEADER'
		public Keyword getFILE_HEADERKeyword_1_0_1() { return cFILE_HEADERKeyword_1_0_1; }

		//SkipNLAndComments
		public RuleCall getSkipNLAndCommentsParserRuleCall_1_0_2() { return cSkipNLAndCommentsParserRuleCall_1_0_2; }

		//database=AstriumDatabase
		public Assignment getDatabaseAssignment_1_0_3() { return cDatabaseAssignment_1_0_3; }

		//AstriumDatabase
		public RuleCall getDatabaseAstriumDatabaseParserRuleCall_1_0_3_0() { return cDatabaseAstriumDatabaseParserRuleCall_1_0_3_0; }

		//{SpellDatabase} (databaseEntry+=DatabaseEntry (SkipNLAndComments2 databaseEntry+=DatabaseEntry?)* SkipNLAndComments)
		public Group getGroup_1_1() { return cGroup_1_1; }

		//{SpellDatabase}
		public Action getSpellDatabaseAction_1_1_0() { return cSpellDatabaseAction_1_1_0; }

		//databaseEntry+=DatabaseEntry (SkipNLAndComments2 databaseEntry+=DatabaseEntry?)* SkipNLAndComments
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }

		//databaseEntry+=DatabaseEntry
		public Assignment getDatabaseEntryAssignment_1_1_1_0() { return cDatabaseEntryAssignment_1_1_1_0; }

		//DatabaseEntry
		public RuleCall getDatabaseEntryDatabaseEntryParserRuleCall_1_1_1_0_0() { return cDatabaseEntryDatabaseEntryParserRuleCall_1_1_1_0_0; }

		//(SkipNLAndComments2 databaseEntry+=DatabaseEntry?)*
		public Group getGroup_1_1_1_1() { return cGroup_1_1_1_1; }

		//SkipNLAndComments2
		public RuleCall getSkipNLAndComments2ParserRuleCall_1_1_1_1_0() { return cSkipNLAndComments2ParserRuleCall_1_1_1_1_0; }

		//databaseEntry+=DatabaseEntry?
		public Assignment getDatabaseEntryAssignment_1_1_1_1_1() { return cDatabaseEntryAssignment_1_1_1_1_1; }

		//DatabaseEntry
		public RuleCall getDatabaseEntryDatabaseEntryParserRuleCall_1_1_1_1_1_0() { return cDatabaseEntryDatabaseEntryParserRuleCall_1_1_1_1_1_0; }

		//SkipNLAndComments
		public RuleCall getSkipNLAndCommentsParserRuleCall_1_1_1_2() { return cSkipNLAndCommentsParserRuleCall_1_1_1_2; }

		//{CSVFile} csvEntries+=CSVEntry SkipNLAndComments2? (SkipNLAndComments2? => csvEntries+=CSVEntry)* SkipNLAndComments
		public Group getGroup_1_2() { return cGroup_1_2; }

		//{CSVFile}
		public Action getCSVFileAction_1_2_0() { return cCSVFileAction_1_2_0; }

		//csvEntries+=CSVEntry
		public Assignment getCsvEntriesAssignment_1_2_1() { return cCsvEntriesAssignment_1_2_1; }

		//CSVEntry
		public RuleCall getCsvEntriesCSVEntryParserRuleCall_1_2_1_0() { return cCsvEntriesCSVEntryParserRuleCall_1_2_1_0; }

		//SkipNLAndComments2?
		public RuleCall getSkipNLAndComments2ParserRuleCall_1_2_2() { return cSkipNLAndComments2ParserRuleCall_1_2_2; }

		//(SkipNLAndComments2? => csvEntries+=CSVEntry)*
		public Group getGroup_1_2_3() { return cGroup_1_2_3; }

		//SkipNLAndComments2?
		public RuleCall getSkipNLAndComments2ParserRuleCall_1_2_3_0() { return cSkipNLAndComments2ParserRuleCall_1_2_3_0; }

		//=> csvEntries+=CSVEntry
		public Assignment getCsvEntriesAssignment_1_2_3_1() { return cCsvEntriesAssignment_1_2_3_1; }

		//CSVEntry
		public RuleCall getCsvEntriesCSVEntryParserRuleCall_1_2_3_1_0() { return cCsvEntriesCSVEntryParserRuleCall_1_2_3_1_0; }

		//SkipNLAndComments
		public RuleCall getSkipNLAndCommentsParserRuleCall_1_2_4() { return cSkipNLAndCommentsParserRuleCall_1_2_4; }
	}

	public class AstriumDatabaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.SpellDatabase.AstriumDatabase");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAstriumDatabaseAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cEntriesAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cEntriesAstriumHeaderEntryParserRuleCall_1_0_0 = (RuleCall)cEntriesAssignment_1_0.eContents().get(0);
		private final RuleCall cSkipNLAndCommentsParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cEND_FILE_HEADERKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cSkipNLAndCommentsParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cEntriesAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cEntriesAstriumVariableEntryParserRuleCall_4_0_0 = (RuleCall)cEntriesAssignment_4_0.eContents().get(0);
		private final RuleCall cSkipNLAndCommentsParserRuleCall_4_1 = (RuleCall)cGroup_4.eContents().get(1);
		
		//AstriumDatabase hidden(WS, ML_COMMENT, SL_COMMENT):
		//	{AstriumDatabase} (entries+=AstriumHeaderEntry SkipNLAndComments)*
		//	'END_FILE_HEADER' SkipNLAndComments (entries+=AstriumVariableEntry SkipNLAndComments)*;
		@Override public ParserRule getRule() { return rule; }

		//{AstriumDatabase} (entries+=AstriumHeaderEntry SkipNLAndComments)* 'END_FILE_HEADER' SkipNLAndComments
		//(entries+=AstriumVariableEntry SkipNLAndComments)*
		public Group getGroup() { return cGroup; }

		//{AstriumDatabase}
		public Action getAstriumDatabaseAction_0() { return cAstriumDatabaseAction_0; }

		//(entries+=AstriumHeaderEntry SkipNLAndComments)*
		public Group getGroup_1() { return cGroup_1; }

		//entries+=AstriumHeaderEntry
		public Assignment getEntriesAssignment_1_0() { return cEntriesAssignment_1_0; }

		//AstriumHeaderEntry
		public RuleCall getEntriesAstriumHeaderEntryParserRuleCall_1_0_0() { return cEntriesAstriumHeaderEntryParserRuleCall_1_0_0; }

		//SkipNLAndComments
		public RuleCall getSkipNLAndCommentsParserRuleCall_1_1() { return cSkipNLAndCommentsParserRuleCall_1_1; }

		//'END_FILE_HEADER'
		public Keyword getEND_FILE_HEADERKeyword_2() { return cEND_FILE_HEADERKeyword_2; }

		//SkipNLAndComments
		public RuleCall getSkipNLAndCommentsParserRuleCall_3() { return cSkipNLAndCommentsParserRuleCall_3; }

		//(entries+=AstriumVariableEntry SkipNLAndComments)*
		public Group getGroup_4() { return cGroup_4; }

		//entries+=AstriumVariableEntry
		public Assignment getEntriesAssignment_4_0() { return cEntriesAssignment_4_0; }

		//AstriumVariableEntry
		public RuleCall getEntriesAstriumVariableEntryParserRuleCall_4_0_0() { return cEntriesAstriumVariableEntryParserRuleCall_4_0_0; }

		//SkipNLAndComments
		public RuleCall getSkipNLAndCommentsParserRuleCall_4_1() { return cSkipNLAndCommentsParserRuleCall_4_1; }
	}

	public class AstriumVariableEntryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.SpellDatabase.AstriumVariableEntry");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cAstriumVariableCommentAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cCommentAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cCommentASTRIUM_COMMENTTerminalRuleCall_0_1_0 = (RuleCall)cCommentAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cAstriumVariableEntryAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final RuleCall cDOLLARTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Assignment cNameAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cNameASTRIUM_IDParserRuleCall_1_2_0 = (RuleCall)cNameAssignment_1_2.eContents().get(0);
		private final RuleCall cCOLONTerminalRuleCall_1_3 = (RuleCall)cGroup_1.eContents().get(3);
		private final Keyword cEqualsSignKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Alternatives cAlternatives_1_5 = (Alternatives)cGroup_1.eContents().get(5);
		private final Assignment cAstriumTimeAssignment_1_5_0 = (Assignment)cAlternatives_1_5.eContents().get(0);
		private final RuleCall cAstriumTimeASTRIUM_TIMEParserRuleCall_1_5_0_0 = (RuleCall)cAstriumTimeAssignment_1_5_0.eContents().get(0);
		private final Assignment cValueAssignment_1_5_1 = (Assignment)cAlternatives_1_5.eContents().get(1);
		private final RuleCall cValueAtomParserRuleCall_1_5_1_0 = (RuleCall)cValueAssignment_1_5_1.eContents().get(0);
		private final Assignment cSimpleValueAssignment_1_5_2 = (Assignment)cAlternatives_1_5.eContents().get(2);
		private final RuleCall cSimpleValueSINGLE_VALUEParserRuleCall_1_5_2_0 = (RuleCall)cSimpleValueAssignment_1_5_2.eContents().get(0);
		
		//AstriumVariableEntry hidden(WS, ML_COMMENT, SL_COMMENT):
		//	{AstriumVariableComment} comment=ASTRIUM_COMMENT | {AstriumVariableEntry} DOLLAR name=ASTRIUM_ID COLON '=' (=>
		//	astriumTime=ASTRIUM_TIME | => value=Atom | simpleValue=SINGLE_VALUE)?;
		@Override public ParserRule getRule() { return rule; }

		//{AstriumVariableComment} comment=ASTRIUM_COMMENT | {AstriumVariableEntry} DOLLAR name=ASTRIUM_ID COLON '=' (=>
		//astriumTime=ASTRIUM_TIME | => value=Atom | simpleValue=SINGLE_VALUE)?
		public Alternatives getAlternatives() { return cAlternatives; }

		//{AstriumVariableComment} comment=ASTRIUM_COMMENT
		public Group getGroup_0() { return cGroup_0; }

		//{AstriumVariableComment}
		public Action getAstriumVariableCommentAction_0_0() { return cAstriumVariableCommentAction_0_0; }

		//comment=ASTRIUM_COMMENT
		public Assignment getCommentAssignment_0_1() { return cCommentAssignment_0_1; }

		//ASTRIUM_COMMENT
		public RuleCall getCommentASTRIUM_COMMENTTerminalRuleCall_0_1_0() { return cCommentASTRIUM_COMMENTTerminalRuleCall_0_1_0; }

		//{AstriumVariableEntry} DOLLAR name=ASTRIUM_ID COLON '=' (=> astriumTime=ASTRIUM_TIME | => value=Atom |
		//simpleValue=SINGLE_VALUE)?
		public Group getGroup_1() { return cGroup_1; }

		//{AstriumVariableEntry}
		public Action getAstriumVariableEntryAction_1_0() { return cAstriumVariableEntryAction_1_0; }

		//DOLLAR
		public RuleCall getDOLLARTerminalRuleCall_1_1() { return cDOLLARTerminalRuleCall_1_1; }

		//name=ASTRIUM_ID
		public Assignment getNameAssignment_1_2() { return cNameAssignment_1_2; }

		//ASTRIUM_ID
		public RuleCall getNameASTRIUM_IDParserRuleCall_1_2_0() { return cNameASTRIUM_IDParserRuleCall_1_2_0; }

		//COLON
		public RuleCall getCOLONTerminalRuleCall_1_3() { return cCOLONTerminalRuleCall_1_3; }

		//'='
		public Keyword getEqualsSignKeyword_1_4() { return cEqualsSignKeyword_1_4; }

		//(=> astriumTime=ASTRIUM_TIME | => value=Atom | simpleValue=SINGLE_VALUE)?
		public Alternatives getAlternatives_1_5() { return cAlternatives_1_5; }

		//=> astriumTime=ASTRIUM_TIME
		public Assignment getAstriumTimeAssignment_1_5_0() { return cAstriumTimeAssignment_1_5_0; }

		//ASTRIUM_TIME
		public RuleCall getAstriumTimeASTRIUM_TIMEParserRuleCall_1_5_0_0() { return cAstriumTimeASTRIUM_TIMEParserRuleCall_1_5_0_0; }

		//=> value=Atom
		public Assignment getValueAssignment_1_5_1() { return cValueAssignment_1_5_1; }

		//Atom
		public RuleCall getValueAtomParserRuleCall_1_5_1_0() { return cValueAtomParserRuleCall_1_5_1_0; }

		//simpleValue=SINGLE_VALUE
		public Assignment getSimpleValueAssignment_1_5_2() { return cSimpleValueAssignment_1_5_2; }

		//SINGLE_VALUE
		public RuleCall getSimpleValueSINGLE_VALUEParserRuleCall_1_5_2_0() { return cSimpleValueSINGLE_VALUEParserRuleCall_1_5_2_0; }
	}

	public class AstriumHeaderEntryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.SpellDatabase.AstriumHeaderEntry");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cAstriumHeaderCommentAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cCommentAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cCommentASTRIUM_COMMENTTerminalRuleCall_0_1_0 = (RuleCall)cCommentAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cAstriumHeaderEntryAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameASTRIUM_IDParserRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final RuleCall cCOLONTerminalRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final Keyword cEqualsSignKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Alternatives cAlternatives_1_4 = (Alternatives)cGroup_1.eContents().get(4);
		private final Assignment cAstriumTimeAssignment_1_4_0 = (Assignment)cAlternatives_1_4.eContents().get(0);
		private final RuleCall cAstriumTimeASTRIUM_TIMEParserRuleCall_1_4_0_0 = (RuleCall)cAstriumTimeAssignment_1_4_0.eContents().get(0);
		private final Assignment cValueAssignment_1_4_1 = (Assignment)cAlternatives_1_4.eContents().get(1);
		private final RuleCall cValueAtomParserRuleCall_1_4_1_0 = (RuleCall)cValueAssignment_1_4_1.eContents().get(0);
		private final Assignment cSimpleValueAssignment_1_4_2 = (Assignment)cAlternatives_1_4.eContents().get(2);
		private final RuleCall cSimpleValueSINGLE_VALUEParserRuleCall_1_4_2_0 = (RuleCall)cSimpleValueAssignment_1_4_2.eContents().get(0);
		
		//AstriumHeaderEntry hidden(WS, ML_COMMENT, SL_COMMENT):
		//	{AstriumHeaderComment} comment=ASTRIUM_COMMENT | {AstriumHeaderEntry} name=ASTRIUM_ID COLON '=' (=>
		//	astriumTime=ASTRIUM_TIME | => value=Atom | simpleValue=SINGLE_VALUE)?;
		@Override public ParserRule getRule() { return rule; }

		//{AstriumHeaderComment} comment=ASTRIUM_COMMENT | {AstriumHeaderEntry} name=ASTRIUM_ID COLON '=' (=>
		//astriumTime=ASTRIUM_TIME | => value=Atom | simpleValue=SINGLE_VALUE)?
		public Alternatives getAlternatives() { return cAlternatives; }

		//{AstriumHeaderComment} comment=ASTRIUM_COMMENT
		public Group getGroup_0() { return cGroup_0; }

		//{AstriumHeaderComment}
		public Action getAstriumHeaderCommentAction_0_0() { return cAstriumHeaderCommentAction_0_0; }

		//comment=ASTRIUM_COMMENT
		public Assignment getCommentAssignment_0_1() { return cCommentAssignment_0_1; }

		//ASTRIUM_COMMENT
		public RuleCall getCommentASTRIUM_COMMENTTerminalRuleCall_0_1_0() { return cCommentASTRIUM_COMMENTTerminalRuleCall_0_1_0; }

		//{AstriumHeaderEntry} name=ASTRIUM_ID COLON '=' (=> astriumTime=ASTRIUM_TIME | => value=Atom | simpleValue=SINGLE_VALUE)?
		public Group getGroup_1() { return cGroup_1; }

		//{AstriumHeaderEntry}
		public Action getAstriumHeaderEntryAction_1_0() { return cAstriumHeaderEntryAction_1_0; }

		//name=ASTRIUM_ID
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }

		//ASTRIUM_ID
		public RuleCall getNameASTRIUM_IDParserRuleCall_1_1_0() { return cNameASTRIUM_IDParserRuleCall_1_1_0; }

		//COLON
		public RuleCall getCOLONTerminalRuleCall_1_2() { return cCOLONTerminalRuleCall_1_2; }

		//'='
		public Keyword getEqualsSignKeyword_1_3() { return cEqualsSignKeyword_1_3; }

		//(=> astriumTime=ASTRIUM_TIME | => value=Atom | simpleValue=SINGLE_VALUE)?
		public Alternatives getAlternatives_1_4() { return cAlternatives_1_4; }

		//=> astriumTime=ASTRIUM_TIME
		public Assignment getAstriumTimeAssignment_1_4_0() { return cAstriumTimeAssignment_1_4_0; }

		//ASTRIUM_TIME
		public RuleCall getAstriumTimeASTRIUM_TIMEParserRuleCall_1_4_0_0() { return cAstriumTimeASTRIUM_TIMEParserRuleCall_1_4_0_0; }

		//=> value=Atom
		public Assignment getValueAssignment_1_4_1() { return cValueAssignment_1_4_1; }

		//Atom
		public RuleCall getValueAtomParserRuleCall_1_4_1_0() { return cValueAtomParserRuleCall_1_4_1_0; }

		//simpleValue=SINGLE_VALUE
		public Assignment getSimpleValueAssignment_1_4_2() { return cSimpleValueAssignment_1_4_2; }

		//SINGLE_VALUE
		public RuleCall getSimpleValueSINGLE_VALUEParserRuleCall_1_4_2_0() { return cSimpleValueSINGLE_VALUEParserRuleCall_1_4_2_0; }
	}

	public class SkipNLAndComments2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.SpellDatabase.SkipNLAndComments2");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNLTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cSkipNLAndCommentsParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//SkipNLAndComments2 hidden(WS, ML_COMMENT, SL_COMMENT):
		//	NL+
		//	=> SkipNLAndComments;
		@Override public ParserRule getRule() { return rule; }

		//NL+ => SkipNLAndComments
		public Group getGroup() { return cGroup; }

		//NL+
		public RuleCall getNLTerminalRuleCall_0() { return cNLTerminalRuleCall_0; }

		//=> SkipNLAndComments
		public RuleCall getSkipNLAndCommentsParserRuleCall_1() { return cSkipNLAndCommentsParserRuleCall_1; }
	}

	public class SkipNLAndCommentsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.SpellDatabase.SkipNLAndComments");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cWSTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cML_COMMENTTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSL_COMMENTTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cNLTerminalRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//SkipNLAndComments hidden():
		//	(WS | ML_COMMENT | SL_COMMENT | NL)*;
		@Override public ParserRule getRule() { return rule; }

		//(WS | ML_COMMENT | SL_COMMENT | NL)*
		public Alternatives getAlternatives() { return cAlternatives; }

		//WS
		public RuleCall getWSTerminalRuleCall_0() { return cWSTerminalRuleCall_0; }

		//ML_COMMENT
		public RuleCall getML_COMMENTTerminalRuleCall_1() { return cML_COMMENTTerminalRuleCall_1; }

		//SL_COMMENT
		public RuleCall getSL_COMMENTTerminalRuleCall_2() { return cSL_COMMENTTerminalRuleCall_2; }

		//NL
		public RuleCall getNLTerminalRuleCall_3() { return cNLTerminalRuleCall_3; }
	}

	public class CSVEntryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.SpellDatabase.CSVEntry");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCSVCommandParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCSVTelemetryParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cCSVSpellParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//CSVEntry:
		//	CSVCommand | CSVTelemetry | CSVSpell;
		@Override public ParserRule getRule() { return rule; }

		//CSVCommand | CSVTelemetry | CSVSpell
		public Alternatives getAlternatives() { return cAlternatives; }

		//CSVCommand
		public RuleCall getCSVCommandParserRuleCall_0() { return cCSVCommandParserRuleCall_0; }

		//CSVTelemetry
		public RuleCall getCSVTelemetryParserRuleCall_1() { return cCSVTelemetryParserRuleCall_1; }

		//CSVSpell
		public RuleCall getCSVSpellParserRuleCall_2() { return cCSVSpellParserRuleCall_2; }
	}

	public class CSVCommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.SpellDatabase.CSVCommand");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cCMDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cCommaKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCommandAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCommandID_STMTParserRuleCall_2_0 = (RuleCall)cCommandAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cArgsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cArgsTCArgsParserRuleCall_3_1_0 = (RuleCall)cArgsAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Group cGroup_3_2_0 = (Group)cGroup_3_2.eContents().get(0);
		private final RuleCall cSkipNLAndComments2ParserRuleCall_3_2_0_0 = (RuleCall)cGroup_3_2_0.eContents().get(0);
		private final Keyword cCommaKeyword_3_2_0_1 = (Keyword)cGroup_3_2_0.eContents().get(1);
		private final Keyword cCommaKeyword_3_2_0_2 = (Keyword)cGroup_3_2_0.eContents().get(2);
		private final Assignment cArgsAssignment_3_2_0_3 = (Assignment)cGroup_3_2_0.eContents().get(3);
		private final RuleCall cArgsTCArgsParserRuleCall_3_2_0_3_0 = (RuleCall)cArgsAssignment_3_2_0_3.eContents().get(0);
		private final Keyword cCommaKeyword_3_2_0_4 = (Keyword)cGroup_3_2_0.eContents().get(4);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//CSVCommand hidden(WS, ML_COMMENT, SL_COMMENT):
		//	CMD ',' command=ID_STMT (',' => args+=TCArgs
		//	=> (SkipNLAndComments2 ',' ',' => args+=TCArgs ','*)*)? ','*;
		@Override public ParserRule getRule() { return rule; }

		//CMD ',' command=ID_STMT (',' => args+=TCArgs => (SkipNLAndComments2 ',' ',' => args+=TCArgs ','*)*)? ','*
		public Group getGroup() { return cGroup; }

		//CMD
		public RuleCall getCMDTerminalRuleCall_0() { return cCMDTerminalRuleCall_0; }

		//','
		public Keyword getCommaKeyword_1() { return cCommaKeyword_1; }

		//command=ID_STMT
		public Assignment getCommandAssignment_2() { return cCommandAssignment_2; }

		//ID_STMT
		public RuleCall getCommandID_STMTParserRuleCall_2_0() { return cCommandID_STMTParserRuleCall_2_0; }

		//(',' => args+=TCArgs => (SkipNLAndComments2 ',' ',' => args+=TCArgs ','*)*)?
		public Group getGroup_3() { return cGroup_3; }

		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//=> args+=TCArgs
		public Assignment getArgsAssignment_3_1() { return cArgsAssignment_3_1; }

		//TCArgs
		public RuleCall getArgsTCArgsParserRuleCall_3_1_0() { return cArgsTCArgsParserRuleCall_3_1_0; }

		//=> (SkipNLAndComments2 ',' ',' => args+=TCArgs ','*)*
		public Group getGroup_3_2() { return cGroup_3_2; }

		//SkipNLAndComments2 ',' ',' => args+=TCArgs ','*
		public Group getGroup_3_2_0() { return cGroup_3_2_0; }

		//SkipNLAndComments2
		public RuleCall getSkipNLAndComments2ParserRuleCall_3_2_0_0() { return cSkipNLAndComments2ParserRuleCall_3_2_0_0; }

		//','
		public Keyword getCommaKeyword_3_2_0_1() { return cCommaKeyword_3_2_0_1; }

		//','
		public Keyword getCommaKeyword_3_2_0_2() { return cCommaKeyword_3_2_0_2; }

		//=> args+=TCArgs
		public Assignment getArgsAssignment_3_2_0_3() { return cArgsAssignment_3_2_0_3; }

		//TCArgs
		public RuleCall getArgsTCArgsParserRuleCall_3_2_0_3_0() { return cArgsTCArgsParserRuleCall_3_2_0_3_0; }

		//','*
		public Keyword getCommaKeyword_3_2_0_4() { return cCommaKeyword_3_2_0_4; }

		//','*
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
	}

	public class TCArgsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.SpellDatabase.TCArgs");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTcNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTcNameTCValueParserRuleCall_0_0 = (RuleCall)cTcNameAssignment_0.eContents().get(0);
		private final Keyword cCommaKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTcValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTcValueTCValueParserRuleCall_2_0 = (RuleCall)cTcValueAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTcModAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTcModSTATE_EXPRTerminalRuleCall_4_0 = (RuleCall)cTcModAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Group cGroup_5_0 = (Group)cGroup_5.eContents().get(0);
		private final Keyword cCommaKeyword_5_0_0 = (Keyword)cGroup_5_0.eContents().get(0);
		private final Assignment cToleranceAssignment_5_0_1 = (Assignment)cGroup_5_0.eContents().get(1);
		private final RuleCall cTolerancePosIntOrFloatParserRuleCall_5_0_1_0 = (RuleCall)cToleranceAssignment_5_0_1.eContents().get(0);
		private final Keyword cCommaKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//TCArgs hidden(WS, ML_COMMENT, SL_COMMENT):
		//	=> tcName=TCValue ',' => tcValue=TCValue ',' => tcMod=STATE_EXPR => (',' tolerance=PosIntOrFloat?)? ','*;
		@Override public ParserRule getRule() { return rule; }

		//=> tcName=TCValue ',' => tcValue=TCValue ',' => tcMod=STATE_EXPR => (',' tolerance=PosIntOrFloat?)? ','*
		public Group getGroup() { return cGroup; }

		//=> tcName=TCValue
		public Assignment getTcNameAssignment_0() { return cTcNameAssignment_0; }

		//TCValue
		public RuleCall getTcNameTCValueParserRuleCall_0_0() { return cTcNameTCValueParserRuleCall_0_0; }

		//','
		public Keyword getCommaKeyword_1() { return cCommaKeyword_1; }

		//=> tcValue=TCValue
		public Assignment getTcValueAssignment_2() { return cTcValueAssignment_2; }

		//TCValue
		public RuleCall getTcValueTCValueParserRuleCall_2_0() { return cTcValueTCValueParserRuleCall_2_0; }

		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }

		//=> tcMod=STATE_EXPR
		public Assignment getTcModAssignment_4() { return cTcModAssignment_4; }

		//STATE_EXPR
		public RuleCall getTcModSTATE_EXPRTerminalRuleCall_4_0() { return cTcModSTATE_EXPRTerminalRuleCall_4_0; }

		//=> (',' tolerance=PosIntOrFloat?)?
		public Group getGroup_5() { return cGroup_5; }

		//',' tolerance=PosIntOrFloat?
		public Group getGroup_5_0() { return cGroup_5_0; }

		//','
		public Keyword getCommaKeyword_5_0_0() { return cCommaKeyword_5_0_0; }

		//tolerance=PosIntOrFloat?
		public Assignment getToleranceAssignment_5_0_1() { return cToleranceAssignment_5_0_1; }

		//PosIntOrFloat
		public RuleCall getTolerancePosIntOrFloatParserRuleCall_5_0_1_0() { return cTolerancePosIntOrFloatParserRuleCall_5_0_1_0; }

		//','*
		public Keyword getCommaKeyword_6() { return cCommaKeyword_6; }
	}

	public class TCValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.SpellDatabase.TCValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cID_STMTParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBIN_HEX_OCTTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPLUSTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cMINUSTerminalRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cINTEGERParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cFLOATTerminalRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final Keyword cAsteriskKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final RuleCall cBOOL_EXPRTerminalRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		
		//TCValue hidden(ML_COMMENT, SL_COMMENT):
		//	(ID_STMT | BIN_HEX_OCT | PLUS | MINUS | => INTEGER | => FLOAT | '*' | BOOL_EXPR)+;
		@Override public ParserRule getRule() { return rule; }

		//(ID_STMT | BIN_HEX_OCT | PLUS | MINUS | => INTEGER | => FLOAT | '*' | BOOL_EXPR)+
		public Alternatives getAlternatives() { return cAlternatives; }

		//ID_STMT
		public RuleCall getID_STMTParserRuleCall_0() { return cID_STMTParserRuleCall_0; }

		//BIN_HEX_OCT
		public RuleCall getBIN_HEX_OCTTerminalRuleCall_1() { return cBIN_HEX_OCTTerminalRuleCall_1; }

		//PLUS
		public RuleCall getPLUSTerminalRuleCall_2() { return cPLUSTerminalRuleCall_2; }

		//MINUS
		public RuleCall getMINUSTerminalRuleCall_3() { return cMINUSTerminalRuleCall_3; }

		//=> INTEGER
		public RuleCall getINTEGERParserRuleCall_4() { return cINTEGERParserRuleCall_4; }

		//=> FLOAT
		public RuleCall getFLOATTerminalRuleCall_5() { return cFLOATTerminalRuleCall_5; }

		//'*'
		public Keyword getAsteriskKeyword_6() { return cAsteriskKeyword_6; }

		//BOOL_EXPR
		public RuleCall getBOOL_EXPRTerminalRuleCall_7() { return cBOOL_EXPRTerminalRuleCall_7; }
	}

	public class KeyValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.SpellDatabase.KeyValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cID_STMTParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBIN_HEX_OCTTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPLUSTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cMINUSTerminalRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cINTEGERParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cFLOATTerminalRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final Keyword cAsteriskKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final RuleCall cSTRINGTerminalRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cBOOL_EXPRTerminalRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		
		//KeyValue hidden(ML_COMMENT, SL_COMMENT):
		//	(ID_STMT | BIN_HEX_OCT | PLUS | MINUS | => INTEGER | => FLOAT | '*' | => STRING | BOOL_EXPR)+;
		@Override public ParserRule getRule() { return rule; }

		//(ID_STMT | BIN_HEX_OCT | PLUS | MINUS | => INTEGER | => FLOAT | '*' | => STRING | BOOL_EXPR)+
		public Alternatives getAlternatives() { return cAlternatives; }

		//ID_STMT
		public RuleCall getID_STMTParserRuleCall_0() { return cID_STMTParserRuleCall_0; }

		//BIN_HEX_OCT
		public RuleCall getBIN_HEX_OCTTerminalRuleCall_1() { return cBIN_HEX_OCTTerminalRuleCall_1; }

		//PLUS
		public RuleCall getPLUSTerminalRuleCall_2() { return cPLUSTerminalRuleCall_2; }

		//MINUS
		public RuleCall getMINUSTerminalRuleCall_3() { return cMINUSTerminalRuleCall_3; }

		//=> INTEGER
		public RuleCall getINTEGERParserRuleCall_4() { return cINTEGERParserRuleCall_4; }

		//=> FLOAT
		public RuleCall getFLOATTerminalRuleCall_5() { return cFLOATTerminalRuleCall_5; }

		//'*'
		public Keyword getAsteriskKeyword_6() { return cAsteriskKeyword_6; }

		//=> STRING
		public RuleCall getSTRINGTerminalRuleCall_7() { return cSTRINGTerminalRuleCall_7; }

		//BOOL_EXPR
		public RuleCall getBOOL_EXPRTerminalRuleCall_8() { return cBOOL_EXPRTerminalRuleCall_8; }
	}

	public class CSVTelemetryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.SpellDatabase.CSVTelemetry");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTMTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cCommaKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTmArgAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTmArgTCArgsParserRuleCall_3_0 = (RuleCall)cTmArgAssignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//CSVTelemetry hidden(WS, ML_COMMENT, SL_COMMENT):
		//	TM ',' ',' => tmArg=TCArgs ','*;
		@Override public ParserRule getRule() { return rule; }

		//TM ',' ',' => tmArg=TCArgs ','*
		public Group getGroup() { return cGroup; }

		//TM
		public RuleCall getTMTerminalRuleCall_0() { return cTMTerminalRuleCall_0; }

		//','
		public Keyword getCommaKeyword_1() { return cCommaKeyword_1; }

		//','
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }

		//=> tmArg=TCArgs
		public Assignment getTmArgAssignment_3() { return cTmArgAssignment_3; }

		//TCArgs
		public RuleCall getTmArgTCArgsParserRuleCall_3_0() { return cTmArgTCArgsParserRuleCall_3_0; }

		//','*
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
	}

	public class CSVSpellElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.SpellDatabase.CSVSpell");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSPELLTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cCommaKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCmdAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCmdSpellCommandParserRuleCall_2_0 = (RuleCall)cCmdAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//CSVSpell hidden(WS, ML_COMMENT, SL_COMMENT):
		//	SPELL ',' => cmd=SpellCommand ','*;
		@Override public ParserRule getRule() { return rule; }

		//SPELL ',' => cmd=SpellCommand ','*
		public Group getGroup() { return cGroup; }

		//SPELL
		public RuleCall getSPELLTerminalRuleCall_0() { return cSPELLTerminalRuleCall_0; }

		//','
		public Keyword getCommaKeyword_1() { return cCommaKeyword_1; }

		//=> cmd=SpellCommand
		public Assignment getCmdAssignment_2() { return cCmdAssignment_2; }

		//SpellCommand
		public RuleCall getCmdSpellCommandParserRuleCall_2_0() { return cCmdSpellCommandParserRuleCall_2_0; }

		//','*
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
	}

	public class SpellCommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.SpellDatabase.SpellCommand");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cWaitCommandAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final RuleCall cWAITTerminalRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cCommaKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cValueAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cValueIntOrFloatParserRuleCall_0_3_0 = (RuleCall)cValueAssignment_0_3.eContents().get(0);
		private final Keyword cCommaKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Assignment cUnitAssignment_0_5 = (Assignment)cGroup_0.eContents().get(5);
		private final RuleCall cUnitTIME_EXPRTerminalRuleCall_0_5_0 = (RuleCall)cUnitAssignment_0_5.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cPauseCommandAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final RuleCall cPAUSETerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//SpellCommand hidden(WS, ML_COMMENT, SL_COMMENT):
		//	{WaitCommand} WAIT ',' => value=IntOrFloat ',' => unit=TIME_EXPR | {PauseCommand} PAUSE ','*;
		@Override public ParserRule getRule() { return rule; }

		//{WaitCommand} WAIT ',' => value=IntOrFloat ',' => unit=TIME_EXPR | {PauseCommand} PAUSE ','*
		public Alternatives getAlternatives() { return cAlternatives; }

		//{WaitCommand} WAIT ',' => value=IntOrFloat ',' => unit=TIME_EXPR
		public Group getGroup_0() { return cGroup_0; }

		//{WaitCommand}
		public Action getWaitCommandAction_0_0() { return cWaitCommandAction_0_0; }

		//WAIT
		public RuleCall getWAITTerminalRuleCall_0_1() { return cWAITTerminalRuleCall_0_1; }

		//','
		public Keyword getCommaKeyword_0_2() { return cCommaKeyword_0_2; }

		//=> value=IntOrFloat
		public Assignment getValueAssignment_0_3() { return cValueAssignment_0_3; }

		//IntOrFloat
		public RuleCall getValueIntOrFloatParserRuleCall_0_3_0() { return cValueIntOrFloatParserRuleCall_0_3_0; }

		//','
		public Keyword getCommaKeyword_0_4() { return cCommaKeyword_0_4; }

		//=> unit=TIME_EXPR
		public Assignment getUnitAssignment_0_5() { return cUnitAssignment_0_5; }

		//TIME_EXPR
		public RuleCall getUnitTIME_EXPRTerminalRuleCall_0_5_0() { return cUnitTIME_EXPRTerminalRuleCall_0_5_0; }

		//{PauseCommand} PAUSE ','*
		public Group getGroup_1() { return cGroup_1; }

		//{PauseCommand}
		public Action getPauseCommandAction_1_0() { return cPauseCommandAction_1_0; }

		//PAUSE
		public RuleCall getPAUSETerminalRuleCall_1_1() { return cPAUSETerminalRuleCall_1_1; }

		//','*
		public Keyword getCommaKeyword_1_2() { return cCommaKeyword_1_2; }
	}

	public class IntOrFloatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.SpellDatabase.IntOrFloat");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFLOAT_ValParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cINTEGERParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//IntOrFloat:
		//	FLOAT_Val | INTEGER;
		@Override public ParserRule getRule() { return rule; }

		//FLOAT_Val | INTEGER
		public Alternatives getAlternatives() { return cAlternatives; }

		//FLOAT_Val
		public RuleCall getFLOAT_ValParserRuleCall_0() { return cFLOAT_ValParserRuleCall_0; }

		//INTEGER
		public RuleCall getINTEGERParserRuleCall_1() { return cINTEGERParserRuleCall_1; }
	}

	public class PosIntOrFloatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.SpellDatabase.PosIntOrFloat");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFLOATTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//PosIntOrFloat:
		//	FLOAT | INT;
		@Override public ParserRule getRule() { return rule; }

		//FLOAT | INT
		public Alternatives getAlternatives() { return cAlternatives; }

		//FLOAT
		public RuleCall getFLOATTerminalRuleCall_0() { return cFLOATTerminalRuleCall_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}

	public class DatabaseEntryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.SpellDatabase.DatabaseEntry");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameKeyValueParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cSkipped_NLParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cWSTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Assignment cValueAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cValueDatabaseValueParserRuleCall_4_0 = (RuleCall)cValueAssignment_4.eContents().get(0);
		
		//DatabaseEntry hidden(WS, ML_COMMENT, SL_COMMENT):
		//	name=KeyValue WS? Skipped_NL WS? value=DatabaseValue?;
		@Override public ParserRule getRule() { return rule; }

		//name=KeyValue WS? Skipped_NL WS? value=DatabaseValue?
		public Group getGroup() { return cGroup; }

		//name=KeyValue
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//KeyValue
		public RuleCall getNameKeyValueParserRuleCall_0_0() { return cNameKeyValueParserRuleCall_0_0; }

		//WS?
		public RuleCall getWSTerminalRuleCall_1() { return cWSTerminalRuleCall_1; }

		//Skipped_NL
		public RuleCall getSkipped_NLParserRuleCall_2() { return cSkipped_NLParserRuleCall_2; }

		//WS?
		public RuleCall getWSTerminalRuleCall_3() { return cWSTerminalRuleCall_3; }

		//value=DatabaseValue?
		public Assignment getValueAssignment_4() { return cValueAssignment_4; }

		//DatabaseValue
		public RuleCall getValueDatabaseValueParserRuleCall_4_0() { return cValueDatabaseValueParserRuleCall_4_0; }
	}

	public class DatabaseValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.SpellDatabase.DatabaseValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cComplexValueParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRelDateParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDateParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cAtomParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//DatabaseValue:
		//	ComplexValue |
		//	=> RelDate |
		//	=> Date |
		//	=> Atom;
		@Override public ParserRule getRule() { return rule; }

		//ComplexValue | => RelDate | => Date | => Atom
		public Alternatives getAlternatives() { return cAlternatives; }

		//ComplexValue
		public RuleCall getComplexValueParserRuleCall_0() { return cComplexValueParserRuleCall_0; }

		//=> RelDate
		public RuleCall getRelDateParserRuleCall_1() { return cRelDateParserRuleCall_1; }

		//=> Date
		public RuleCall getDateParserRuleCall_2() { return cDateParserRuleCall_2; }

		//=> Atom
		public RuleCall getAtomParserRuleCall_3() { return cAtomParserRuleCall_3; }
	}

	public class Lambda_StmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.SpellDatabase.Lambda_Stmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLambda_StmtAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cLAMBDATerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cVariablesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVariablesLambda_VarsParserRuleCall_2_0 = (RuleCall)cVariablesAssignment_2.eContents().get(0);
		private final RuleCall cCOLONTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Assignment cValAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cValLambda_FunctionParserRuleCall_4_0 = (RuleCall)cValAssignment_4.eContents().get(0);
		
		//Lambda_Stmt:
		//	{Lambda_Stmt} LAMBDA variables=Lambda_Vars? COLON val=Lambda_Function?;
		@Override public ParserRule getRule() { return rule; }

		//{Lambda_Stmt} LAMBDA variables=Lambda_Vars? COLON val=Lambda_Function?
		public Group getGroup() { return cGroup; }

		//{Lambda_Stmt}
		public Action getLambda_StmtAction_0() { return cLambda_StmtAction_0; }

		//LAMBDA
		public RuleCall getLAMBDATerminalRuleCall_1() { return cLAMBDATerminalRuleCall_1; }

		//variables=Lambda_Vars?
		public Assignment getVariablesAssignment_2() { return cVariablesAssignment_2; }

		//Lambda_Vars
		public RuleCall getVariablesLambda_VarsParserRuleCall_2_0() { return cVariablesLambda_VarsParserRuleCall_2_0; }

		//COLON
		public RuleCall getCOLONTerminalRuleCall_3() { return cCOLONTerminalRuleCall_3; }

		//val=Lambda_Function?
		public Assignment getValAssignment_4() { return cValAssignment_4; }

		//Lambda_Function
		public RuleCall getValLambda_FunctionParserRuleCall_4_0() { return cValLambda_FunctionParserRuleCall_4_0; }
	}

	public class Lambda_FunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.SpellDatabase.Lambda_Function");
		private final RuleCall cLambda_Partial_FuncParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Lambda_Function hidden(ANY_OTHER, WS):
		//	Lambda_Partial_Func+;
		@Override public ParserRule getRule() { return rule; }

		//Lambda_Partial_Func+
		public RuleCall getLambda_Partial_FuncParserRuleCall() { return cLambda_Partial_FuncParserRuleCall; }
	}

	public class Lambda_Partial_FuncElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.SpellDatabase.Lambda_Partial_Func");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cFLOATTerminalRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0_2 = (RuleCall)cAlternatives_0.eContents().get(2);
		private final RuleCall cPLUSTerminalRuleCall_0_3 = (RuleCall)cAlternatives_0.eContents().get(3);
		private final RuleCall cMINUSTerminalRuleCall_0_4 = (RuleCall)cAlternatives_0.eContents().get(4);
		private final RuleCall cML_COMMENTTerminalRuleCall_0_5 = (RuleCall)cAlternatives_0.eContents().get(5);
		private final RuleCall cBIN_HEX_OCTTerminalRuleCall_0_6 = (RuleCall)cAlternatives_0.eContents().get(6);
		private final RuleCall cBOOL_EXPRTerminalRuleCall_0_7 = (RuleCall)cAlternatives_0.eContents().get(7);
		private final RuleCall cSTRINGTerminalRuleCall_0_8 = (RuleCall)cAlternatives_0.eContents().get(8);
		private final RuleCall cANY_OTHERTerminalRuleCall_0_9 = (RuleCall)cAlternatives_0.eContents().get(9);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cLAMBDATerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final RuleCall cLambda_VarsParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final RuleCall cCOLONTerminalRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final RuleCall cLambda_FunctionParserRuleCall_1_3 = (RuleCall)cGroup_1.eContents().get(3);
		
		//Lambda_Partial_Func hidden(ANY_OTHER, WS):
		//	(ID | FLOAT | INT | PLUS | MINUS | ML_COMMENT | BIN_HEX_OCT | BOOL_EXPR | STRING | ANY_OTHER) | LAMBDA Lambda_Vars?
		//	COLON Lambda_Function?;
		@Override public ParserRule getRule() { return rule; }

		//(ID | FLOAT | INT | PLUS | MINUS | ML_COMMENT | BIN_HEX_OCT | BOOL_EXPR | STRING | ANY_OTHER) | LAMBDA Lambda_Vars?
		//COLON Lambda_Function?
		public Alternatives getAlternatives() { return cAlternatives; }

		//(ID | FLOAT | INT | PLUS | MINUS | ML_COMMENT | BIN_HEX_OCT | BOOL_EXPR | STRING | ANY_OTHER)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_0_0() { return cIDTerminalRuleCall_0_0; }

		//FLOAT
		public RuleCall getFLOATTerminalRuleCall_0_1() { return cFLOATTerminalRuleCall_0_1; }

		//INT
		public RuleCall getINTTerminalRuleCall_0_2() { return cINTTerminalRuleCall_0_2; }

		//PLUS
		public RuleCall getPLUSTerminalRuleCall_0_3() { return cPLUSTerminalRuleCall_0_3; }

		//MINUS
		public RuleCall getMINUSTerminalRuleCall_0_4() { return cMINUSTerminalRuleCall_0_4; }

		//ML_COMMENT
		public RuleCall getML_COMMENTTerminalRuleCall_0_5() { return cML_COMMENTTerminalRuleCall_0_5; }

		//BIN_HEX_OCT
		public RuleCall getBIN_HEX_OCTTerminalRuleCall_0_6() { return cBIN_HEX_OCTTerminalRuleCall_0_6; }

		//BOOL_EXPR
		public RuleCall getBOOL_EXPRTerminalRuleCall_0_7() { return cBOOL_EXPRTerminalRuleCall_0_7; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0_8() { return cSTRINGTerminalRuleCall_0_8; }

		//ANY_OTHER
		public RuleCall getANY_OTHERTerminalRuleCall_0_9() { return cANY_OTHERTerminalRuleCall_0_9; }

		//LAMBDA Lambda_Vars? COLON Lambda_Function?
		public Group getGroup_1() { return cGroup_1; }

		//LAMBDA
		public RuleCall getLAMBDATerminalRuleCall_1_0() { return cLAMBDATerminalRuleCall_1_0; }

		//Lambda_Vars?
		public RuleCall getLambda_VarsParserRuleCall_1_1() { return cLambda_VarsParserRuleCall_1_1; }

		//COLON
		public RuleCall getCOLONTerminalRuleCall_1_2() { return cCOLONTerminalRuleCall_1_2; }

		//Lambda_Function?
		public RuleCall getLambda_FunctionParserRuleCall_1_3() { return cLambda_FunctionParserRuleCall_1_3; }
	}

	public class Lambda_VarsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.SpellDatabase.Lambda_Vars");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//Lambda_Vars hidden(ANY_OTHER, WS):
		//	ID (',' ID)*;
		@Override public ParserRule getRule() { return rule; }

		//ID (',' ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//(',' ID)*
		public Group getGroup_1() { return cGroup_1; }

		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}

	public class ComplexValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.SpellDatabase.ComplexValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDictionaryParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cListParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cTupleParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//ComplexValue:
		//	Dictionary | List | Tuple;
		@Override public ParserRule getRule() { return rule; }

		//Dictionary | List | Tuple
		public Alternatives getAlternatives() { return cAlternatives; }

		//Dictionary
		public RuleCall getDictionaryParserRuleCall_0() { return cDictionaryParserRuleCall_0; }

		//List
		public RuleCall getListParserRuleCall_1() { return cListParserRuleCall_1; }

		//Tuple
		public RuleCall getTupleParserRuleCall_2() { return cTupleParserRuleCall_2; }
	}

	public class TupleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.SpellDatabase.Tuple");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTupleAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cSkipped_NLParserRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Assignment cValuesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final Alternatives cValuesAlternatives_2_1_0 = (Alternatives)cValuesAssignment_2_1.eContents().get(0);
		private final RuleCall cValuesAtomParserRuleCall_2_1_0_0 = (RuleCall)cValuesAlternatives_2_1_0.eContents().get(0);
		private final RuleCall cValuesComplexValueParserRuleCall_2_1_0_1 = (RuleCall)cValuesAlternatives_2_1_0.eContents().get(1);
		private final RuleCall cSkipped_NLParserRuleCall_2_2 = (RuleCall)cGroup_2.eContents().get(2);
		private final Group cGroup_2_3 = (Group)cGroup_2.eContents().get(3);
		private final Keyword cCommaKeyword_2_3_0 = (Keyword)cGroup_2_3.eContents().get(0);
		private final RuleCall cSkipped_NLParserRuleCall_2_3_1 = (RuleCall)cGroup_2_3.eContents().get(1);
		private final Assignment cValuesAssignment_2_3_2 = (Assignment)cGroup_2_3.eContents().get(2);
		private final Alternatives cValuesAlternatives_2_3_2_0 = (Alternatives)cValuesAssignment_2_3_2.eContents().get(0);
		private final RuleCall cValuesAtomParserRuleCall_2_3_2_0_0 = (RuleCall)cValuesAlternatives_2_3_2_0.eContents().get(0);
		private final RuleCall cValuesComplexValueParserRuleCall_2_3_2_0_1 = (RuleCall)cValuesAlternatives_2_3_2_0.eContents().get(1);
		private final RuleCall cSkipped_NLParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final RuleCall cSkipped_NLParserRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Tuple hidden(WS, ML_COMMENT, SL_COMMENT):
		//	{Tuple} '(' (Skipped_NL values+=(Atom | ComplexValue) Skipped_NL (',' Skipped_NL values+=(Atom | ComplexValue))*)?
		//	Skipped_NL ','? Skipped_NL ')';
		@Override public ParserRule getRule() { return rule; }

		//{Tuple} '(' (Skipped_NL values+=(Atom | ComplexValue) Skipped_NL (',' Skipped_NL values+=(Atom | ComplexValue))*)?
		//Skipped_NL ','? Skipped_NL ')'
		public Group getGroup() { return cGroup; }

		//{Tuple}
		public Action getTupleAction_0() { return cTupleAction_0; }

		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//(Skipped_NL values+=(Atom | ComplexValue) Skipped_NL (',' Skipped_NL values+=(Atom | ComplexValue))*)?
		public Group getGroup_2() { return cGroup_2; }

		//Skipped_NL
		public RuleCall getSkipped_NLParserRuleCall_2_0() { return cSkipped_NLParserRuleCall_2_0; }

		//values+=(Atom | ComplexValue)
		public Assignment getValuesAssignment_2_1() { return cValuesAssignment_2_1; }

		//(Atom | ComplexValue)
		public Alternatives getValuesAlternatives_2_1_0() { return cValuesAlternatives_2_1_0; }

		//Atom
		public RuleCall getValuesAtomParserRuleCall_2_1_0_0() { return cValuesAtomParserRuleCall_2_1_0_0; }

		//ComplexValue
		public RuleCall getValuesComplexValueParserRuleCall_2_1_0_1() { return cValuesComplexValueParserRuleCall_2_1_0_1; }

		//Skipped_NL
		public RuleCall getSkipped_NLParserRuleCall_2_2() { return cSkipped_NLParserRuleCall_2_2; }

		//(',' Skipped_NL values+=(Atom | ComplexValue))*
		public Group getGroup_2_3() { return cGroup_2_3; }

		//','
		public Keyword getCommaKeyword_2_3_0() { return cCommaKeyword_2_3_0; }

		//Skipped_NL
		public RuleCall getSkipped_NLParserRuleCall_2_3_1() { return cSkipped_NLParserRuleCall_2_3_1; }

		//values+=(Atom | ComplexValue)
		public Assignment getValuesAssignment_2_3_2() { return cValuesAssignment_2_3_2; }

		//(Atom | ComplexValue)
		public Alternatives getValuesAlternatives_2_3_2_0() { return cValuesAlternatives_2_3_2_0; }

		//Atom
		public RuleCall getValuesAtomParserRuleCall_2_3_2_0_0() { return cValuesAtomParserRuleCall_2_3_2_0_0; }

		//ComplexValue
		public RuleCall getValuesComplexValueParserRuleCall_2_3_2_0_1() { return cValuesComplexValueParserRuleCall_2_3_2_0_1; }

		//Skipped_NL
		public RuleCall getSkipped_NLParserRuleCall_3() { return cSkipped_NLParserRuleCall_3; }

		//','?
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }

		//Skipped_NL
		public RuleCall getSkipped_NLParserRuleCall_5() { return cSkipped_NLParserRuleCall_5; }

		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}

	public class ListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.SpellDatabase.List");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cListAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cSkipped_NLParserRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Assignment cValuesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final Alternatives cValuesAlternatives_2_1_0 = (Alternatives)cValuesAssignment_2_1.eContents().get(0);
		private final RuleCall cValuesAtomParserRuleCall_2_1_0_0 = (RuleCall)cValuesAlternatives_2_1_0.eContents().get(0);
		private final RuleCall cValuesComplexValueParserRuleCall_2_1_0_1 = (RuleCall)cValuesAlternatives_2_1_0.eContents().get(1);
		private final RuleCall cSkipped_NLParserRuleCall_2_2 = (RuleCall)cGroup_2.eContents().get(2);
		private final Group cGroup_2_3 = (Group)cGroup_2.eContents().get(3);
		private final Keyword cCommaKeyword_2_3_0 = (Keyword)cGroup_2_3.eContents().get(0);
		private final RuleCall cSkipped_NLParserRuleCall_2_3_1 = (RuleCall)cGroup_2_3.eContents().get(1);
		private final Assignment cValuesAssignment_2_3_2 = (Assignment)cGroup_2_3.eContents().get(2);
		private final Alternatives cValuesAlternatives_2_3_2_0 = (Alternatives)cValuesAssignment_2_3_2.eContents().get(0);
		private final RuleCall cValuesAtomParserRuleCall_2_3_2_0_0 = (RuleCall)cValuesAlternatives_2_3_2_0.eContents().get(0);
		private final RuleCall cValuesComplexValueParserRuleCall_2_3_2_0_1 = (RuleCall)cValuesAlternatives_2_3_2_0.eContents().get(1);
		private final RuleCall cSkipped_NLParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final RuleCall cSkipped_NLParserRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Keyword cRightSquareBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//List hidden(WS, ML_COMMENT, SL_COMMENT):
		//	{List} '[' (Skipped_NL values+=(Atom | ComplexValue) Skipped_NL (',' Skipped_NL values+=(Atom | ComplexValue))*)?
		//	Skipped_NL ','? Skipped_NL ']';
		@Override public ParserRule getRule() { return rule; }

		//{List} '[' (Skipped_NL values+=(Atom | ComplexValue) Skipped_NL (',' Skipped_NL values+=(Atom | ComplexValue))*)?
		//Skipped_NL ','? Skipped_NL ']'
		public Group getGroup() { return cGroup; }

		//{List}
		public Action getListAction_0() { return cListAction_0; }

		//'['
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }

		//(Skipped_NL values+=(Atom | ComplexValue) Skipped_NL (',' Skipped_NL values+=(Atom | ComplexValue))*)?
		public Group getGroup_2() { return cGroup_2; }

		//Skipped_NL
		public RuleCall getSkipped_NLParserRuleCall_2_0() { return cSkipped_NLParserRuleCall_2_0; }

		//values+=(Atom | ComplexValue)
		public Assignment getValuesAssignment_2_1() { return cValuesAssignment_2_1; }

		//(Atom | ComplexValue)
		public Alternatives getValuesAlternatives_2_1_0() { return cValuesAlternatives_2_1_0; }

		//Atom
		public RuleCall getValuesAtomParserRuleCall_2_1_0_0() { return cValuesAtomParserRuleCall_2_1_0_0; }

		//ComplexValue
		public RuleCall getValuesComplexValueParserRuleCall_2_1_0_1() { return cValuesComplexValueParserRuleCall_2_1_0_1; }

		//Skipped_NL
		public RuleCall getSkipped_NLParserRuleCall_2_2() { return cSkipped_NLParserRuleCall_2_2; }

		//(',' Skipped_NL values+=(Atom | ComplexValue))*
		public Group getGroup_2_3() { return cGroup_2_3; }

		//','
		public Keyword getCommaKeyword_2_3_0() { return cCommaKeyword_2_3_0; }

		//Skipped_NL
		public RuleCall getSkipped_NLParserRuleCall_2_3_1() { return cSkipped_NLParserRuleCall_2_3_1; }

		//values+=(Atom | ComplexValue)
		public Assignment getValuesAssignment_2_3_2() { return cValuesAssignment_2_3_2; }

		//(Atom | ComplexValue)
		public Alternatives getValuesAlternatives_2_3_2_0() { return cValuesAlternatives_2_3_2_0; }

		//Atom
		public RuleCall getValuesAtomParserRuleCall_2_3_2_0_0() { return cValuesAtomParserRuleCall_2_3_2_0_0; }

		//ComplexValue
		public RuleCall getValuesComplexValueParserRuleCall_2_3_2_0_1() { return cValuesComplexValueParserRuleCall_2_3_2_0_1; }

		//Skipped_NL
		public RuleCall getSkipped_NLParserRuleCall_3() { return cSkipped_NLParserRuleCall_3; }

		//','?
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }

		//Skipped_NL
		public RuleCall getSkipped_NLParserRuleCall_5() { return cSkipped_NLParserRuleCall_5; }

		//']'
		public Keyword getRightSquareBracketKeyword_6() { return cRightSquareBracketKeyword_6; }
	}

	public class DictionaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.SpellDatabase.Dictionary");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDicitonaryAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cSkipped_NLParserRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Assignment cEntriesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cEntriesDictionaryEntryParserRuleCall_2_1_0 = (RuleCall)cEntriesAssignment_2_1.eContents().get(0);
		private final RuleCall cSkipped_NLParserRuleCall_2_2 = (RuleCall)cGroup_2.eContents().get(2);
		private final Group cGroup_2_3 = (Group)cGroup_2.eContents().get(3);
		private final Keyword cCommaKeyword_2_3_0 = (Keyword)cGroup_2_3.eContents().get(0);
		private final RuleCall cSkipped_NLParserRuleCall_2_3_1 = (RuleCall)cGroup_2_3.eContents().get(1);
		private final Assignment cEntriesAssignment_2_3_2 = (Assignment)cGroup_2_3.eContents().get(2);
		private final RuleCall cEntriesDictionaryEntryParserRuleCall_2_3_2_0 = (RuleCall)cEntriesAssignment_2_3_2.eContents().get(0);
		private final RuleCall cSkipped_NLParserRuleCall_2_3_3 = (RuleCall)cGroup_2_3.eContents().get(3);
		private final RuleCall cSkipped_NLParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final RuleCall cSkipped_NLParserRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Dictionary hidden(WS, ML_COMMENT, SL_COMMENT):
		//	{Dicitonary} '{' (Skipped_NL entries+=DictionaryEntry Skipped_NL (',' Skipped_NL entries+=DictionaryEntry
		//	Skipped_NL)*)? Skipped_NL ','? Skipped_NL '}';
		@Override public ParserRule getRule() { return rule; }

		//{Dicitonary} '{' (Skipped_NL entries+=DictionaryEntry Skipped_NL (',' Skipped_NL entries+=DictionaryEntry Skipped_NL)*)?
		//Skipped_NL ','? Skipped_NL '}'
		public Group getGroup() { return cGroup; }

		//{Dicitonary}
		public Action getDicitonaryAction_0() { return cDicitonaryAction_0; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//(Skipped_NL entries+=DictionaryEntry Skipped_NL (',' Skipped_NL entries+=DictionaryEntry Skipped_NL)*)?
		public Group getGroup_2() { return cGroup_2; }

		//Skipped_NL
		public RuleCall getSkipped_NLParserRuleCall_2_0() { return cSkipped_NLParserRuleCall_2_0; }

		//entries+=DictionaryEntry
		public Assignment getEntriesAssignment_2_1() { return cEntriesAssignment_2_1; }

		//DictionaryEntry
		public RuleCall getEntriesDictionaryEntryParserRuleCall_2_1_0() { return cEntriesDictionaryEntryParserRuleCall_2_1_0; }

		//Skipped_NL
		public RuleCall getSkipped_NLParserRuleCall_2_2() { return cSkipped_NLParserRuleCall_2_2; }

		//(',' Skipped_NL entries+=DictionaryEntry Skipped_NL)*
		public Group getGroup_2_3() { return cGroup_2_3; }

		//','
		public Keyword getCommaKeyword_2_3_0() { return cCommaKeyword_2_3_0; }

		//Skipped_NL
		public RuleCall getSkipped_NLParserRuleCall_2_3_1() { return cSkipped_NLParserRuleCall_2_3_1; }

		//entries+=DictionaryEntry
		public Assignment getEntriesAssignment_2_3_2() { return cEntriesAssignment_2_3_2; }

		//DictionaryEntry
		public RuleCall getEntriesDictionaryEntryParserRuleCall_2_3_2_0() { return cEntriesDictionaryEntryParserRuleCall_2_3_2_0; }

		//Skipped_NL
		public RuleCall getSkipped_NLParserRuleCall_2_3_3() { return cSkipped_NLParserRuleCall_2_3_3; }

		//Skipped_NL
		public RuleCall getSkipped_NLParserRuleCall_3() { return cSkipped_NLParserRuleCall_3; }

		//','?
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }

		//Skipped_NL
		public RuleCall getSkipped_NLParserRuleCall_5() { return cSkipped_NLParserRuleCall_5; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class DictionaryEntryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.SpellDatabase.DictionaryEntry");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cKeyAlternatives_0_0 = (Alternatives)cKeyAssignment_0.eContents().get(0);
		private final RuleCall cKeyAtomParserRuleCall_0_0_0 = (RuleCall)cKeyAlternatives_0_0.eContents().get(0);
		private final RuleCall cKeyComplexValueParserRuleCall_0_0_1 = (RuleCall)cKeyAlternatives_0_0.eContents().get(1);
		private final RuleCall cSkipped_NLParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cCOLONTerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final RuleCall cSkipped_NLParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Assignment cValueAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final Alternatives cValueAlternatives_2_2_0 = (Alternatives)cValueAssignment_2_2.eContents().get(0);
		private final RuleCall cValueAtomParserRuleCall_2_2_0_0 = (RuleCall)cValueAlternatives_2_2_0.eContents().get(0);
		private final RuleCall cValueComplexValueParserRuleCall_2_2_0_1 = (RuleCall)cValueAlternatives_2_2_0.eContents().get(1);
		
		//DictionaryEntry hidden(WS, ML_COMMENT, SL_COMMENT):
		//	key=(Atom | ComplexValue) Skipped_NL (COLON Skipped_NL value=(Atom | ComplexValue))?;
		@Override public ParserRule getRule() { return rule; }

		//key=(Atom | ComplexValue) Skipped_NL (COLON Skipped_NL value=(Atom | ComplexValue))?
		public Group getGroup() { return cGroup; }

		//key=(Atom | ComplexValue)
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }

		//(Atom | ComplexValue)
		public Alternatives getKeyAlternatives_0_0() { return cKeyAlternatives_0_0; }

		//Atom
		public RuleCall getKeyAtomParserRuleCall_0_0_0() { return cKeyAtomParserRuleCall_0_0_0; }

		//ComplexValue
		public RuleCall getKeyComplexValueParserRuleCall_0_0_1() { return cKeyComplexValueParserRuleCall_0_0_1; }

		//Skipped_NL
		public RuleCall getSkipped_NLParserRuleCall_1() { return cSkipped_NLParserRuleCall_1; }

		//(COLON Skipped_NL value=(Atom | ComplexValue))?
		public Group getGroup_2() { return cGroup_2; }

		//COLON
		public RuleCall getCOLONTerminalRuleCall_2_0() { return cCOLONTerminalRuleCall_2_0; }

		//Skipped_NL
		public RuleCall getSkipped_NLParserRuleCall_2_1() { return cSkipped_NLParserRuleCall_2_1; }

		//value=(Atom | ComplexValue)
		public Assignment getValueAssignment_2_2() { return cValueAssignment_2_2; }

		//(Atom | ComplexValue)
		public Alternatives getValueAlternatives_2_2_0() { return cValueAlternatives_2_2_0; }

		//Atom
		public RuleCall getValueAtomParserRuleCall_2_2_0_0() { return cValueAtomParserRuleCall_2_2_0_0; }

		//ComplexValue
		public RuleCall getValueComplexValueParserRuleCall_2_2_0_1() { return cValueComplexValueParserRuleCall_2_2_0_1; }
	}

	public class AtomElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.SpellDatabase.Atom");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNumberParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStringValueParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBooleanParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cLambda_StmtParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Atom:
		//	Number | StringValue | Boolean | Lambda_Stmt;
		@Override public ParserRule getRule() { return rule; }

		//Number | StringValue | Boolean | Lambda_Stmt
		public Alternatives getAlternatives() { return cAlternatives; }

		//Number
		public RuleCall getNumberParserRuleCall_0() { return cNumberParserRuleCall_0; }

		//StringValue
		public RuleCall getStringValueParserRuleCall_1() { return cStringValueParserRuleCall_1; }

		//Boolean
		public RuleCall getBooleanParserRuleCall_2() { return cBooleanParserRuleCall_2; }

		//Lambda_Stmt
		public RuleCall getLambda_StmtParserRuleCall_3() { return cLambda_StmtParserRuleCall_3; }
	}

	public class RelDateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.SpellDatabase.RelDate");
		private final Assignment cValAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValRELTIMEParserRuleCall_0 = (RuleCall)cValAssignment.eContents().get(0);
		
		//RelDate:
		//	=> val=RELTIME;
		@Override public ParserRule getRule() { return rule; }

		//=> val=RELTIME
		public Assignment getValAssignment() { return cValAssignment; }

		//RELTIME
		public RuleCall getValRELTIMEParserRuleCall_0() { return cValRELTIMEParserRuleCall_0; }
	}

	public class DateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.SpellDatabase.Date");
		private final Assignment cValAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValABSTIMEParserRuleCall_0 = (RuleCall)cValAssignment.eContents().get(0);
		
		//Date:
		//	=> val=ABSTIME;
		@Override public ParserRule getRule() { return rule; }

		//=> val=ABSTIME
		public Assignment getValAssignment() { return cValAssignment; }

		//ABSTIME
		public RuleCall getValABSTIMEParserRuleCall_0() { return cValABSTIMEParserRuleCall_0; }
	}

	public class BooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.SpellDatabase.Boolean");
		private final Assignment cValAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValBOOL_EXPRTerminalRuleCall_0 = (RuleCall)cValAssignment.eContents().get(0);
		
		//Boolean:
		//	val=BOOL_EXPR;
		@Override public ParserRule getRule() { return rule; }

		//val=BOOL_EXPR
		public Assignment getValAssignment() { return cValAssignment; }

		//BOOL_EXPR
		public RuleCall getValBOOL_EXPRTerminalRuleCall_0() { return cValBOOL_EXPRTerminalRuleCall_0; }
	}

	public class StringValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.SpellDatabase.StringValue");
		private final Assignment cValAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValSTRINGTerminalRuleCall_0 = (RuleCall)cValAssignment.eContents().get(0);
		
		//StringValue:
		//	val=STRING;
		@Override public ParserRule getRule() { return rule; }

		//val=STRING
		public Assignment getValAssignment() { return cValAssignment; }

		//STRING
		public RuleCall getValSTRINGTerminalRuleCall_0() { return cValSTRINGTerminalRuleCall_0; }
	}

	public class NumberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.SpellDatabase.Number");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cValAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cValBIN_HEX_OCTTerminalRuleCall_0_0 = (RuleCall)cValAssignment_0.eContents().get(0);
		private final Assignment cValIntAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cValIntINTEGERParserRuleCall_1_0 = (RuleCall)cValIntAssignment_1.eContents().get(0);
		private final Assignment cValStrAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cValStrFLOAT_ValParserRuleCall_2_0 = (RuleCall)cValStrAssignment_2.eContents().get(0);
		
		//Number:
		//	val=BIN_HEX_OCT | valInt=INTEGER |
		//	=> valStr=FLOAT_Val;
		@Override public ParserRule getRule() { return rule; }

		//val=BIN_HEX_OCT | valInt=INTEGER | => valStr=FLOAT_Val
		public Alternatives getAlternatives() { return cAlternatives; }

		//val=BIN_HEX_OCT
		public Assignment getValAssignment_0() { return cValAssignment_0; }

		//BIN_HEX_OCT
		public RuleCall getValBIN_HEX_OCTTerminalRuleCall_0_0() { return cValBIN_HEX_OCTTerminalRuleCall_0_0; }

		//valInt=INTEGER
		public Assignment getValIntAssignment_1() { return cValIntAssignment_1; }

		//INTEGER
		public RuleCall getValIntINTEGERParserRuleCall_1_0() { return cValIntINTEGERParserRuleCall_1_0; }

		//=> valStr=FLOAT_Val
		public Assignment getValStrAssignment_2() { return cValStrAssignment_2; }

		//FLOAT_Val
		public RuleCall getValStrFLOAT_ValParserRuleCall_2_0() { return cValStrFLOAT_ValParserRuleCall_2_0; }
	}

	public class FLOAT_ValElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.SpellDatabase.FLOAT_Val");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cPLUSTerminalRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cMINUSTerminalRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cFLOATTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//FLOAT_Val hidden():
		//	(PLUS | MINUS)? FLOAT;
		@Override public ParserRule getRule() { return rule; }

		//(PLUS | MINUS)? FLOAT
		public Group getGroup() { return cGroup; }

		//(PLUS | MINUS)?
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//PLUS
		public RuleCall getPLUSTerminalRuleCall_0_0() { return cPLUSTerminalRuleCall_0_0; }

		//MINUS
		public RuleCall getMINUSTerminalRuleCall_0_1() { return cMINUSTerminalRuleCall_0_1; }

		//FLOAT
		public RuleCall getFLOATTerminalRuleCall_1() { return cFLOATTerminalRuleCall_1; }
	}

	public class Skipped_NLElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.SpellDatabase.Skipped_NL");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReverseSolidusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cNLTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Skipped_NL hidden(WS):
		//	('\\' NL)*;
		@Override public ParserRule getRule() { return rule; }

		//('\\' NL)*
		public Group getGroup() { return cGroup; }

		//'\\'
		public Keyword getReverseSolidusKeyword_0() { return cReverseSolidusKeyword_0; }

		//NL
		public RuleCall getNLTerminalRuleCall_1() { return cNLTerminalRuleCall_1; }
	}

	public class RELTIMEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.SpellDatabase.RELTIME");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTEGERParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1_0_0 = (RuleCall)cGroup_1_0.eContents().get(0);
		private final RuleCall cCOLONTerminalRuleCall_1_0_1 = (RuleCall)cGroup_1_0.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_1_0_2 = (RuleCall)cGroup_1_0.eContents().get(2);
		private final RuleCall cCOLONTerminalRuleCall_1_0_3 = (RuleCall)cGroup_1_0.eContents().get(3);
		private final RuleCall cINTTerminalRuleCall_1_0_4 = (RuleCall)cGroup_1_0.eContents().get(4);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final RuleCall cCOLONTerminalRuleCall_1_1_0 = (RuleCall)cGroup_1_1.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1_1_1 = (RuleCall)cGroup_1_1.eContents().get(1);
		private final RuleCall cCOLONTerminalRuleCall_1_1_2 = (RuleCall)cGroup_1_1.eContents().get(2);
		private final RuleCall cINTTerminalRuleCall_1_1_3 = (RuleCall)cGroup_1_1.eContents().get(3);
		
		//RELTIME hidden(WS):
		//	INTEGER (INT COLON INT COLON INT | COLON INT COLON INT);
		@Override public ParserRule getRule() { return rule; }

		//INTEGER (INT COLON INT COLON INT | COLON INT COLON INT)
		public Group getGroup() { return cGroup; }

		//INTEGER
		public RuleCall getINTEGERParserRuleCall_0() { return cINTEGERParserRuleCall_0; }

		//INT COLON INT COLON INT | COLON INT COLON INT
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//INT COLON INT COLON INT
		public Group getGroup_1_0() { return cGroup_1_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1_0_0() { return cINTTerminalRuleCall_1_0_0; }

		//COLON
		public RuleCall getCOLONTerminalRuleCall_1_0_1() { return cCOLONTerminalRuleCall_1_0_1; }

		//INT
		public RuleCall getINTTerminalRuleCall_1_0_2() { return cINTTerminalRuleCall_1_0_2; }

		//COLON
		public RuleCall getCOLONTerminalRuleCall_1_0_3() { return cCOLONTerminalRuleCall_1_0_3; }

		//INT
		public RuleCall getINTTerminalRuleCall_1_0_4() { return cINTTerminalRuleCall_1_0_4; }

		//COLON INT COLON INT
		public Group getGroup_1_1() { return cGroup_1_1; }

		//COLON
		public RuleCall getCOLONTerminalRuleCall_1_1_0() { return cCOLONTerminalRuleCall_1_1_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1_1_1() { return cINTTerminalRuleCall_1_1_1; }

		//COLON
		public RuleCall getCOLONTerminalRuleCall_1_1_2() { return cCOLONTerminalRuleCall_1_1_2; }

		//INT
		public RuleCall getINTTerminalRuleCall_1_1_3() { return cINTTerminalRuleCall_1_1_3; }
	}

	public class ABSTIMEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.SpellDatabase.ABSTIME");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cGroup_0.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_0_0_0 = (RuleCall)cGroup_0_0.eContents().get(0);
		private final RuleCall cMINUSTerminalRuleCall_0_0_1 = (RuleCall)cGroup_0_0.eContents().get(1);
		private final Alternatives cAlternatives_0_0_2 = (Alternatives)cGroup_0_0.eContents().get(2);
		private final RuleCall cINTTerminalRuleCall_0_0_2_0 = (RuleCall)cAlternatives_0_0_2.eContents().get(0);
		private final RuleCall cID_STMTParserRuleCall_0_0_2_1 = (RuleCall)cAlternatives_0_0_2.eContents().get(1);
		private final RuleCall cMINUSTerminalRuleCall_0_0_3 = (RuleCall)cGroup_0_0.eContents().get(3);
		private final RuleCall cINTTerminalRuleCall_0_0_4 = (RuleCall)cGroup_0_0.eContents().get(4);
		private final Alternatives cAlternatives_0_1 = (Alternatives)cGroup_0.eContents().get(1);
		private final RuleCall cCOLONTerminalRuleCall_0_1_0 = (RuleCall)cAlternatives_0_1.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_0_1_1 = (RuleCall)cAlternatives_0_1.eContents().get(1);
		private final Group cGroup_0_2 = (Group)cGroup_0.eContents().get(2);
		private final RuleCall cINTTerminalRuleCall_0_2_0 = (RuleCall)cGroup_0_2.eContents().get(0);
		private final RuleCall cCOLONTerminalRuleCall_0_2_1 = (RuleCall)cGroup_0_2.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0_2_2 = (RuleCall)cGroup_0_2.eContents().get(2);
		private final Group cGroup_0_2_3 = (Group)cGroup_0_2.eContents().get(3);
		private final RuleCall cCOLONTerminalRuleCall_0_2_3_0 = (RuleCall)cGroup_0_2_3.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_0_2_3_1 = (RuleCall)cGroup_0_2_3.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1_0_0 = (RuleCall)cGroup_1_0.eContents().get(0);
		private final Keyword cSolidusKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Alternatives cAlternatives_1_0_2 = (Alternatives)cGroup_1_0.eContents().get(2);
		private final RuleCall cINTTerminalRuleCall_1_0_2_0 = (RuleCall)cAlternatives_1_0_2.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_0_2_1 = (RuleCall)cAlternatives_1_0_2.eContents().get(1);
		private final Keyword cSolidusKeyword_1_0_3 = (Keyword)cGroup_1_0.eContents().get(3);
		private final RuleCall cINTTerminalRuleCall_1_0_4 = (RuleCall)cGroup_1_0.eContents().get(4);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final RuleCall cCOLONTerminalRuleCall_1_1_0 = (RuleCall)cAlternatives_1_1.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_1_1_1 = (RuleCall)cAlternatives_1_1.eContents().get(1);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final RuleCall cINTTerminalRuleCall_1_2_0 = (RuleCall)cGroup_1_2.eContents().get(0);
		private final RuleCall cCOLONTerminalRuleCall_1_2_1 = (RuleCall)cGroup_1_2.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_1_2_2 = (RuleCall)cGroup_1_2.eContents().get(2);
		private final Group cGroup_1_2_3 = (Group)cGroup_1_2.eContents().get(3);
		private final RuleCall cCOLONTerminalRuleCall_1_2_3_0 = (RuleCall)cGroup_1_2_3.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1_2_3_1 = (RuleCall)cGroup_1_2_3.eContents().get(1);
		
		//ABSTIME hidden():
		//	(INT MINUS (INT | ID_STMT) MINUS INT) (COLON | WS) (INT COLON INT (COLON INT)?)? | (INT '/' (INT | ID) '/' INT)
		//	(COLON | WS) (INT COLON INT (COLON INT)?)?;
		@Override public ParserRule getRule() { return rule; }

		//(INT MINUS (INT | ID_STMT) MINUS INT) (COLON | WS) (INT COLON INT (COLON INT)?)? | (INT '/' (INT | ID) '/' INT) (COLON |
		//WS) (INT COLON INT (COLON INT)?)?
		public Alternatives getAlternatives() { return cAlternatives; }

		//(INT MINUS (INT | ID_STMT) MINUS INT) (COLON | WS) (INT COLON INT (COLON INT)?)?
		public Group getGroup_0() { return cGroup_0; }

		//INT MINUS (INT | ID_STMT) MINUS INT
		public Group getGroup_0_0() { return cGroup_0_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_0_0_0() { return cINTTerminalRuleCall_0_0_0; }

		//MINUS
		public RuleCall getMINUSTerminalRuleCall_0_0_1() { return cMINUSTerminalRuleCall_0_0_1; }

		//INT | ID_STMT
		public Alternatives getAlternatives_0_0_2() { return cAlternatives_0_0_2; }

		//INT
		public RuleCall getINTTerminalRuleCall_0_0_2_0() { return cINTTerminalRuleCall_0_0_2_0; }

		//ID_STMT
		public RuleCall getID_STMTParserRuleCall_0_0_2_1() { return cID_STMTParserRuleCall_0_0_2_1; }

		//MINUS
		public RuleCall getMINUSTerminalRuleCall_0_0_3() { return cMINUSTerminalRuleCall_0_0_3; }

		//INT
		public RuleCall getINTTerminalRuleCall_0_0_4() { return cINTTerminalRuleCall_0_0_4; }

		//COLON | WS
		public Alternatives getAlternatives_0_1() { return cAlternatives_0_1; }

		//COLON
		public RuleCall getCOLONTerminalRuleCall_0_1_0() { return cCOLONTerminalRuleCall_0_1_0; }

		//WS
		public RuleCall getWSTerminalRuleCall_0_1_1() { return cWSTerminalRuleCall_0_1_1; }

		//(INT COLON INT (COLON INT)?)?
		public Group getGroup_0_2() { return cGroup_0_2; }

		//INT
		public RuleCall getINTTerminalRuleCall_0_2_0() { return cINTTerminalRuleCall_0_2_0; }

		//COLON
		public RuleCall getCOLONTerminalRuleCall_0_2_1() { return cCOLONTerminalRuleCall_0_2_1; }

		//INT
		public RuleCall getINTTerminalRuleCall_0_2_2() { return cINTTerminalRuleCall_0_2_2; }

		//(COLON INT)?
		public Group getGroup_0_2_3() { return cGroup_0_2_3; }

		//COLON
		public RuleCall getCOLONTerminalRuleCall_0_2_3_0() { return cCOLONTerminalRuleCall_0_2_3_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_0_2_3_1() { return cINTTerminalRuleCall_0_2_3_1; }

		//(INT '/' (INT | ID) '/' INT) (COLON | WS) (INT COLON INT (COLON INT)?)?
		public Group getGroup_1() { return cGroup_1; }

		//INT '/' (INT | ID) '/' INT
		public Group getGroup_1_0() { return cGroup_1_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1_0_0() { return cINTTerminalRuleCall_1_0_0; }

		//'/'
		public Keyword getSolidusKeyword_1_0_1() { return cSolidusKeyword_1_0_1; }

		//INT | ID
		public Alternatives getAlternatives_1_0_2() { return cAlternatives_1_0_2; }

		//INT
		public RuleCall getINTTerminalRuleCall_1_0_2_0() { return cINTTerminalRuleCall_1_0_2_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_0_2_1() { return cIDTerminalRuleCall_1_0_2_1; }

		//'/'
		public Keyword getSolidusKeyword_1_0_3() { return cSolidusKeyword_1_0_3; }

		//INT
		public RuleCall getINTTerminalRuleCall_1_0_4() { return cINTTerminalRuleCall_1_0_4; }

		//COLON | WS
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }

		//COLON
		public RuleCall getCOLONTerminalRuleCall_1_1_0() { return cCOLONTerminalRuleCall_1_1_0; }

		//WS
		public RuleCall getWSTerminalRuleCall_1_1_1() { return cWSTerminalRuleCall_1_1_1; }

		//(INT COLON INT (COLON INT)?)?
		public Group getGroup_1_2() { return cGroup_1_2; }

		//INT
		public RuleCall getINTTerminalRuleCall_1_2_0() { return cINTTerminalRuleCall_1_2_0; }

		//COLON
		public RuleCall getCOLONTerminalRuleCall_1_2_1() { return cCOLONTerminalRuleCall_1_2_1; }

		//INT
		public RuleCall getINTTerminalRuleCall_1_2_2() { return cINTTerminalRuleCall_1_2_2; }

		//(COLON INT)?
		public Group getGroup_1_2_3() { return cGroup_1_2_3; }

		//COLON
		public RuleCall getCOLONTerminalRuleCall_1_2_3_0() { return cCOLONTerminalRuleCall_1_2_3_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1_2_3_1() { return cINTTerminalRuleCall_1_2_3_1; }
	}

	public class SINGLE_VALUEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.SpellDatabase.SINGLE_VALUE");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFLOATTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cPLUSTerminalRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cMINUSTerminalRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cML_COMMENTTerminalRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cBIN_HEX_OCTTerminalRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cBOOL_EXPRTerminalRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cSTRINGTerminalRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cANY_OTHERTerminalRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final Keyword cFullStopKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		
		//SINGLE_VALUE hidden(WS):
		//	(ID | FLOAT | INT | PLUS | MINUS | ML_COMMENT | BIN_HEX_OCT | BOOL_EXPR | STRING | ANY_OTHER | '.')+;
		@Override public ParserRule getRule() { return rule; }

		//(ID | FLOAT | INT | PLUS | MINUS | ML_COMMENT | BIN_HEX_OCT | BOOL_EXPR | STRING | ANY_OTHER | '.')+
		public Alternatives getAlternatives() { return cAlternatives; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//FLOAT
		public RuleCall getFLOATTerminalRuleCall_1() { return cFLOATTerminalRuleCall_1; }

		//INT
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }

		//PLUS
		public RuleCall getPLUSTerminalRuleCall_3() { return cPLUSTerminalRuleCall_3; }

		//MINUS
		public RuleCall getMINUSTerminalRuleCall_4() { return cMINUSTerminalRuleCall_4; }

		//ML_COMMENT
		public RuleCall getML_COMMENTTerminalRuleCall_5() { return cML_COMMENTTerminalRuleCall_5; }

		//BIN_HEX_OCT
		public RuleCall getBIN_HEX_OCTTerminalRuleCall_6() { return cBIN_HEX_OCTTerminalRuleCall_6; }

		//BOOL_EXPR
		public RuleCall getBOOL_EXPRTerminalRuleCall_7() { return cBOOL_EXPRTerminalRuleCall_7; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_8() { return cSTRINGTerminalRuleCall_8; }

		//ANY_OTHER
		public RuleCall getANY_OTHERTerminalRuleCall_9() { return cANY_OTHERTerminalRuleCall_9; }

		//'.'
		public Keyword getFullStopKeyword_10() { return cFullStopKeyword_10; }
	}

	public class ID_STMTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.SpellDatabase.ID_STMT");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final Keyword cReverseSolidusKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Keyword cSolidusKeyword_1_2 = (Keyword)cAlternatives_1.eContents().get(2);
		
		//ID_STMT hidden():
		//	ID (ID | '\\' | '/')*;
		@Override public ParserRule getRule() { return rule; }

		//ID (ID | '\\' | '/')*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//(ID | '\\' | '/')*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_0() { return cIDTerminalRuleCall_1_0; }

		//'\\'
		public Keyword getReverseSolidusKeyword_1_1() { return cReverseSolidusKeyword_1_1; }

		//'/'
		public Keyword getSolidusKeyword_1_2() { return cSolidusKeyword_1_2; }
	}

	public class ASTRIUM_IDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.SpellDatabase.ASTRIUM_ID");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//ASTRIUM_ID hidden(WS):
		//	ID ID*;
		@Override public ParserRule getRule() { return rule; }

		//ID ID*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//ID*
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}

	public class ASTRIUM_TIMEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.SpellDatabase.ASTRIUM_TIME");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cGroup_0.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_0_0_0 = (RuleCall)cGroup_0_0.eContents().get(0);
		private final Keyword cFullStopKeyword_0_0_1 = (Keyword)cGroup_0_0.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final RuleCall cINTTerminalRuleCall_0_3 = (RuleCall)cGroup_0.eContents().get(3);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cCOLONTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cINTTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final RuleCall cCOLONTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final RuleCall cINTTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//ASTRIUM_TIME hidden(WS):
		//	((ID '.')? INT ID INT)? INT COLON INT COLON INT;
		@Override public ParserRule getRule() { return rule; }

		//((ID '.')? INT ID INT)? INT COLON INT COLON INT
		public Group getGroup() { return cGroup; }

		//((ID '.')? INT ID INT)?
		public Group getGroup_0() { return cGroup_0; }

		//(ID '.')?
		public Group getGroup_0_0() { return cGroup_0_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_0_0_0() { return cIDTerminalRuleCall_0_0_0; }

		//'.'
		public Keyword getFullStopKeyword_0_0_1() { return cFullStopKeyword_0_0_1; }

		//INT
		public RuleCall getINTTerminalRuleCall_0_1() { return cINTTerminalRuleCall_0_1; }

		//ID
		public RuleCall getIDTerminalRuleCall_0_2() { return cIDTerminalRuleCall_0_2; }

		//INT
		public RuleCall getINTTerminalRuleCall_0_3() { return cINTTerminalRuleCall_0_3; }

		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }

		//COLON
		public RuleCall getCOLONTerminalRuleCall_2() { return cCOLONTerminalRuleCall_2; }

		//INT
		public RuleCall getINTTerminalRuleCall_3() { return cINTTerminalRuleCall_3; }

		//COLON
		public RuleCall getCOLONTerminalRuleCall_4() { return cCOLONTerminalRuleCall_4; }

		//INT
		public RuleCall getINTTerminalRuleCall_5() { return cINTTerminalRuleCall_5; }
	}

	public class INTEGERElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.SpellDatabase.INTEGER");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cPLUSTerminalRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cMINUSTerminalRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//INTEGER ecore::EInt hidden():
		//	(PLUS | MINUS)? INT;
		@Override public ParserRule getRule() { return rule; }

		//(PLUS | MINUS)? INT
		public Group getGroup() { return cGroup; }

		//(PLUS | MINUS)?
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//PLUS
		public RuleCall getPLUSTerminalRuleCall_0_0() { return cPLUSTerminalRuleCall_0_0; }

		//MINUS
		public RuleCall getMINUSTerminalRuleCall_0_1() { return cMINUSTerminalRuleCall_0_1; }

		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	
	
	private final SpellDatabaseElements pSpellDatabase;
	private final AstriumDatabaseElements pAstriumDatabase;
	private final AstriumVariableEntryElements pAstriumVariableEntry;
	private final AstriumHeaderEntryElements pAstriumHeaderEntry;
	private final SkipNLAndComments2Elements pSkipNLAndComments2;
	private final SkipNLAndCommentsElements pSkipNLAndComments;
	private final CSVEntryElements pCSVEntry;
	private final CSVCommandElements pCSVCommand;
	private final TCArgsElements pTCArgs;
	private final TCValueElements pTCValue;
	private final KeyValueElements pKeyValue;
	private final CSVTelemetryElements pCSVTelemetry;
	private final CSVSpellElements pCSVSpell;
	private final SpellCommandElements pSpellCommand;
	private final IntOrFloatElements pIntOrFloat;
	private final PosIntOrFloatElements pPosIntOrFloat;
	private final DatabaseEntryElements pDatabaseEntry;
	private final DatabaseValueElements pDatabaseValue;
	private final Lambda_StmtElements pLambda_Stmt;
	private final Lambda_FunctionElements pLambda_Function;
	private final Lambda_Partial_FuncElements pLambda_Partial_Func;
	private final Lambda_VarsElements pLambda_Vars;
	private final ComplexValueElements pComplexValue;
	private final TupleElements pTuple;
	private final ListElements pList;
	private final DictionaryElements pDictionary;
	private final DictionaryEntryElements pDictionaryEntry;
	private final AtomElements pAtom;
	private final RelDateElements pRelDate;
	private final DateElements pDate;
	private final BooleanElements pBoolean;
	private final StringValueElements pStringValue;
	private final NumberElements pNumber;
	private final FLOAT_ValElements pFLOAT_Val;
	private final Skipped_NLElements pSkipped_NL;
	private final RELTIMEElements pRELTIME;
	private final ABSTIMEElements pABSTIME;
	private final SINGLE_VALUEElements pSINGLE_VALUE;
	private final ID_STMTElements pID_STMT;
	private final ASTRIUM_IDElements pASTRIUM_ID;
	private final ASTRIUM_TIMEElements pASTRIUM_TIME;
	private final TerminalRule tASTRIUM_COMMENT;
	private final INTEGERElements pINTEGER;
	private final TerminalRule tPLUS;
	private final TerminalRule tMINUS;
	private final TerminalRule tWS;
	private final TerminalRule tCOLON;
	private final TerminalRule tLAMBDA;
	private final TerminalRule tTM;
	private final TerminalRule tBOOL_EXPR;
	private final TerminalRule tTIME_EXPR;
	private final TerminalRule tSPELL;
	private final TerminalRule tWAIT;
	private final TerminalRule tPAUSE;
	private final TerminalRule tCMD;
	private final TerminalRule tSTATE_EXPR;
	private final TerminalRule tFLOAT;
	private final TerminalRule tINT;
	private final TerminalRule tID;
	private final TerminalRule tDOLLAR;
	private final TerminalRule tBIN_HEX_OCT;
	private final TerminalRule tSTRING;
	private final TerminalRule tML_COMMENT;
	private final TerminalRule tSL_COMMENT;
	private final TerminalRule tNL;
	private final TerminalRule tANY_OTHER;
	
	private final Grammar grammar;

	@Inject
	public SpellDatabaseGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.pSpellDatabase = new SpellDatabaseElements();
		this.pAstriumDatabase = new AstriumDatabaseElements();
		this.pAstriumVariableEntry = new AstriumVariableEntryElements();
		this.pAstriumHeaderEntry = new AstriumHeaderEntryElements();
		this.pSkipNLAndComments2 = new SkipNLAndComments2Elements();
		this.pSkipNLAndComments = new SkipNLAndCommentsElements();
		this.pCSVEntry = new CSVEntryElements();
		this.pCSVCommand = new CSVCommandElements();
		this.pTCArgs = new TCArgsElements();
		this.pTCValue = new TCValueElements();
		this.pKeyValue = new KeyValueElements();
		this.pCSVTelemetry = new CSVTelemetryElements();
		this.pCSVSpell = new CSVSpellElements();
		this.pSpellCommand = new SpellCommandElements();
		this.pIntOrFloat = new IntOrFloatElements();
		this.pPosIntOrFloat = new PosIntOrFloatElements();
		this.pDatabaseEntry = new DatabaseEntryElements();
		this.pDatabaseValue = new DatabaseValueElements();
		this.pLambda_Stmt = new Lambda_StmtElements();
		this.pLambda_Function = new Lambda_FunctionElements();
		this.pLambda_Partial_Func = new Lambda_Partial_FuncElements();
		this.pLambda_Vars = new Lambda_VarsElements();
		this.pComplexValue = new ComplexValueElements();
		this.pTuple = new TupleElements();
		this.pList = new ListElements();
		this.pDictionary = new DictionaryElements();
		this.pDictionaryEntry = new DictionaryEntryElements();
		this.pAtom = new AtomElements();
		this.pRelDate = new RelDateElements();
		this.pDate = new DateElements();
		this.pBoolean = new BooleanElements();
		this.pStringValue = new StringValueElements();
		this.pNumber = new NumberElements();
		this.pFLOAT_Val = new FLOAT_ValElements();
		this.pSkipped_NL = new Skipped_NLElements();
		this.pRELTIME = new RELTIMEElements();
		this.pABSTIME = new ABSTIMEElements();
		this.pSINGLE_VALUE = new SINGLE_VALUEElements();
		this.pID_STMT = new ID_STMTElements();
		this.pASTRIUM_ID = new ASTRIUM_IDElements();
		this.pASTRIUM_TIME = new ASTRIUM_TIMEElements();
		this.tASTRIUM_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.SpellDatabase.ASTRIUM_COMMENT");
		this.pINTEGER = new INTEGERElements();
		this.tPLUS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.SpellDatabase.PLUS");
		this.tMINUS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.SpellDatabase.MINUS");
		this.tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.SpellDatabase.WS");
		this.tCOLON = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.SpellDatabase.COLON");
		this.tLAMBDA = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.SpellDatabase.LAMBDA");
		this.tTM = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.SpellDatabase.TM");
		this.tBOOL_EXPR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.SpellDatabase.BOOL_EXPR");
		this.tTIME_EXPR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.SpellDatabase.TIME_EXPR");
		this.tSPELL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.SpellDatabase.SPELL");
		this.tWAIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.SpellDatabase.WAIT");
		this.tPAUSE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.SpellDatabase.PAUSE");
		this.tCMD = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.SpellDatabase.CMD");
		this.tSTATE_EXPR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.SpellDatabase.STATE_EXPR");
		this.tFLOAT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.SpellDatabase.FLOAT");
		this.tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.SpellDatabase.INT");
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.SpellDatabase.ID");
		this.tDOLLAR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.SpellDatabase.DOLLAR");
		this.tBIN_HEX_OCT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.SpellDatabase.BIN_HEX_OCT");
		this.tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.SpellDatabase.STRING");
		this.tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.SpellDatabase.ML_COMMENT");
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.SpellDatabase.SL_COMMENT");
		this.tNL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.SpellDatabase.NL");
		this.tANY_OTHER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.SpellDatabase.ANY_OTHER");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("lu.ses.engineering.spell.SpellDatabase".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//SpellDatabase hidden(ANY_OTHER, WS, ML_COMMENT, SL_COMMENT):
	//	SkipNLAndComments ({AstriumSpellDatabase} 'FILE_HEADER' SkipNLAndComments database=AstriumDatabase | {SpellDatabase}
	//	(databaseEntry+=DatabaseEntry (SkipNLAndComments2 databaseEntry+=DatabaseEntry?)*
	//	SkipNLAndComments) | {CSVFile} csvEntries+=CSVEntry SkipNLAndComments2? (SkipNLAndComments2? =>
	//	csvEntries+=CSVEntry)*
	//	SkipNLAndComments);
	public SpellDatabaseElements getSpellDatabaseAccess() {
		return pSpellDatabase;
	}
	
	public ParserRule getSpellDatabaseRule() {
		return getSpellDatabaseAccess().getRule();
	}

	//AstriumDatabase hidden(WS, ML_COMMENT, SL_COMMENT):
	//	{AstriumDatabase} (entries+=AstriumHeaderEntry SkipNLAndComments)*
	//	'END_FILE_HEADER' SkipNLAndComments (entries+=AstriumVariableEntry SkipNLAndComments)*;
	public AstriumDatabaseElements getAstriumDatabaseAccess() {
		return pAstriumDatabase;
	}
	
	public ParserRule getAstriumDatabaseRule() {
		return getAstriumDatabaseAccess().getRule();
	}

	//AstriumVariableEntry hidden(WS, ML_COMMENT, SL_COMMENT):
	//	{AstriumVariableComment} comment=ASTRIUM_COMMENT | {AstriumVariableEntry} DOLLAR name=ASTRIUM_ID COLON '=' (=>
	//	astriumTime=ASTRIUM_TIME | => value=Atom | simpleValue=SINGLE_VALUE)?;
	public AstriumVariableEntryElements getAstriumVariableEntryAccess() {
		return pAstriumVariableEntry;
	}
	
	public ParserRule getAstriumVariableEntryRule() {
		return getAstriumVariableEntryAccess().getRule();
	}

	//AstriumHeaderEntry hidden(WS, ML_COMMENT, SL_COMMENT):
	//	{AstriumHeaderComment} comment=ASTRIUM_COMMENT | {AstriumHeaderEntry} name=ASTRIUM_ID COLON '=' (=>
	//	astriumTime=ASTRIUM_TIME | => value=Atom | simpleValue=SINGLE_VALUE)?;
	public AstriumHeaderEntryElements getAstriumHeaderEntryAccess() {
		return pAstriumHeaderEntry;
	}
	
	public ParserRule getAstriumHeaderEntryRule() {
		return getAstriumHeaderEntryAccess().getRule();
	}

	//SkipNLAndComments2 hidden(WS, ML_COMMENT, SL_COMMENT):
	//	NL+
	//	=> SkipNLAndComments;
	public SkipNLAndComments2Elements getSkipNLAndComments2Access() {
		return pSkipNLAndComments2;
	}
	
	public ParserRule getSkipNLAndComments2Rule() {
		return getSkipNLAndComments2Access().getRule();
	}

	//SkipNLAndComments hidden():
	//	(WS | ML_COMMENT | SL_COMMENT | NL)*;
	public SkipNLAndCommentsElements getSkipNLAndCommentsAccess() {
		return pSkipNLAndComments;
	}
	
	public ParserRule getSkipNLAndCommentsRule() {
		return getSkipNLAndCommentsAccess().getRule();
	}

	//CSVEntry:
	//	CSVCommand | CSVTelemetry | CSVSpell;
	public CSVEntryElements getCSVEntryAccess() {
		return pCSVEntry;
	}
	
	public ParserRule getCSVEntryRule() {
		return getCSVEntryAccess().getRule();
	}

	//CSVCommand hidden(WS, ML_COMMENT, SL_COMMENT):
	//	CMD ',' command=ID_STMT (',' => args+=TCArgs
	//	=> (SkipNLAndComments2 ',' ',' => args+=TCArgs ','*)*)? ','*;
	public CSVCommandElements getCSVCommandAccess() {
		return pCSVCommand;
	}
	
	public ParserRule getCSVCommandRule() {
		return getCSVCommandAccess().getRule();
	}

	//TCArgs hidden(WS, ML_COMMENT, SL_COMMENT):
	//	=> tcName=TCValue ',' => tcValue=TCValue ',' => tcMod=STATE_EXPR => (',' tolerance=PosIntOrFloat?)? ','*;
	public TCArgsElements getTCArgsAccess() {
		return pTCArgs;
	}
	
	public ParserRule getTCArgsRule() {
		return getTCArgsAccess().getRule();
	}

	//TCValue hidden(ML_COMMENT, SL_COMMENT):
	//	(ID_STMT | BIN_HEX_OCT | PLUS | MINUS | => INTEGER | => FLOAT | '*' | BOOL_EXPR)+;
	public TCValueElements getTCValueAccess() {
		return pTCValue;
	}
	
	public ParserRule getTCValueRule() {
		return getTCValueAccess().getRule();
	}

	//KeyValue hidden(ML_COMMENT, SL_COMMENT):
	//	(ID_STMT | BIN_HEX_OCT | PLUS | MINUS | => INTEGER | => FLOAT | '*' | => STRING | BOOL_EXPR)+;
	public KeyValueElements getKeyValueAccess() {
		return pKeyValue;
	}
	
	public ParserRule getKeyValueRule() {
		return getKeyValueAccess().getRule();
	}

	//CSVTelemetry hidden(WS, ML_COMMENT, SL_COMMENT):
	//	TM ',' ',' => tmArg=TCArgs ','*;
	public CSVTelemetryElements getCSVTelemetryAccess() {
		return pCSVTelemetry;
	}
	
	public ParserRule getCSVTelemetryRule() {
		return getCSVTelemetryAccess().getRule();
	}

	//CSVSpell hidden(WS, ML_COMMENT, SL_COMMENT):
	//	SPELL ',' => cmd=SpellCommand ','*;
	public CSVSpellElements getCSVSpellAccess() {
		return pCSVSpell;
	}
	
	public ParserRule getCSVSpellRule() {
		return getCSVSpellAccess().getRule();
	}

	//SpellCommand hidden(WS, ML_COMMENT, SL_COMMENT):
	//	{WaitCommand} WAIT ',' => value=IntOrFloat ',' => unit=TIME_EXPR | {PauseCommand} PAUSE ','*;
	public SpellCommandElements getSpellCommandAccess() {
		return pSpellCommand;
	}
	
	public ParserRule getSpellCommandRule() {
		return getSpellCommandAccess().getRule();
	}

	//IntOrFloat:
	//	FLOAT_Val | INTEGER;
	public IntOrFloatElements getIntOrFloatAccess() {
		return pIntOrFloat;
	}
	
	public ParserRule getIntOrFloatRule() {
		return getIntOrFloatAccess().getRule();
	}

	//PosIntOrFloat:
	//	FLOAT | INT;
	public PosIntOrFloatElements getPosIntOrFloatAccess() {
		return pPosIntOrFloat;
	}
	
	public ParserRule getPosIntOrFloatRule() {
		return getPosIntOrFloatAccess().getRule();
	}

	//DatabaseEntry hidden(WS, ML_COMMENT, SL_COMMENT):
	//	name=KeyValue WS? Skipped_NL WS? value=DatabaseValue?;
	public DatabaseEntryElements getDatabaseEntryAccess() {
		return pDatabaseEntry;
	}
	
	public ParserRule getDatabaseEntryRule() {
		return getDatabaseEntryAccess().getRule();
	}

	//DatabaseValue:
	//	ComplexValue |
	//	=> RelDate |
	//	=> Date |
	//	=> Atom;
	public DatabaseValueElements getDatabaseValueAccess() {
		return pDatabaseValue;
	}
	
	public ParserRule getDatabaseValueRule() {
		return getDatabaseValueAccess().getRule();
	}

	//Lambda_Stmt:
	//	{Lambda_Stmt} LAMBDA variables=Lambda_Vars? COLON val=Lambda_Function?;
	public Lambda_StmtElements getLambda_StmtAccess() {
		return pLambda_Stmt;
	}
	
	public ParserRule getLambda_StmtRule() {
		return getLambda_StmtAccess().getRule();
	}

	//Lambda_Function hidden(ANY_OTHER, WS):
	//	Lambda_Partial_Func+;
	public Lambda_FunctionElements getLambda_FunctionAccess() {
		return pLambda_Function;
	}
	
	public ParserRule getLambda_FunctionRule() {
		return getLambda_FunctionAccess().getRule();
	}

	//Lambda_Partial_Func hidden(ANY_OTHER, WS):
	//	(ID | FLOAT | INT | PLUS | MINUS | ML_COMMENT | BIN_HEX_OCT | BOOL_EXPR | STRING | ANY_OTHER) | LAMBDA Lambda_Vars?
	//	COLON Lambda_Function?;
	public Lambda_Partial_FuncElements getLambda_Partial_FuncAccess() {
		return pLambda_Partial_Func;
	}
	
	public ParserRule getLambda_Partial_FuncRule() {
		return getLambda_Partial_FuncAccess().getRule();
	}

	//Lambda_Vars hidden(ANY_OTHER, WS):
	//	ID (',' ID)*;
	public Lambda_VarsElements getLambda_VarsAccess() {
		return pLambda_Vars;
	}
	
	public ParserRule getLambda_VarsRule() {
		return getLambda_VarsAccess().getRule();
	}

	//ComplexValue:
	//	Dictionary | List | Tuple;
	public ComplexValueElements getComplexValueAccess() {
		return pComplexValue;
	}
	
	public ParserRule getComplexValueRule() {
		return getComplexValueAccess().getRule();
	}

	//Tuple hidden(WS, ML_COMMENT, SL_COMMENT):
	//	{Tuple} '(' (Skipped_NL values+=(Atom | ComplexValue) Skipped_NL (',' Skipped_NL values+=(Atom | ComplexValue))*)?
	//	Skipped_NL ','? Skipped_NL ')';
	public TupleElements getTupleAccess() {
		return pTuple;
	}
	
	public ParserRule getTupleRule() {
		return getTupleAccess().getRule();
	}

	//List hidden(WS, ML_COMMENT, SL_COMMENT):
	//	{List} '[' (Skipped_NL values+=(Atom | ComplexValue) Skipped_NL (',' Skipped_NL values+=(Atom | ComplexValue))*)?
	//	Skipped_NL ','? Skipped_NL ']';
	public ListElements getListAccess() {
		return pList;
	}
	
	public ParserRule getListRule() {
		return getListAccess().getRule();
	}

	//Dictionary hidden(WS, ML_COMMENT, SL_COMMENT):
	//	{Dicitonary} '{' (Skipped_NL entries+=DictionaryEntry Skipped_NL (',' Skipped_NL entries+=DictionaryEntry
	//	Skipped_NL)*)? Skipped_NL ','? Skipped_NL '}';
	public DictionaryElements getDictionaryAccess() {
		return pDictionary;
	}
	
	public ParserRule getDictionaryRule() {
		return getDictionaryAccess().getRule();
	}

	//DictionaryEntry hidden(WS, ML_COMMENT, SL_COMMENT):
	//	key=(Atom | ComplexValue) Skipped_NL (COLON Skipped_NL value=(Atom | ComplexValue))?;
	public DictionaryEntryElements getDictionaryEntryAccess() {
		return pDictionaryEntry;
	}
	
	public ParserRule getDictionaryEntryRule() {
		return getDictionaryEntryAccess().getRule();
	}

	//Atom:
	//	Number | StringValue | Boolean | Lambda_Stmt;
	public AtomElements getAtomAccess() {
		return pAtom;
	}
	
	public ParserRule getAtomRule() {
		return getAtomAccess().getRule();
	}

	//RelDate:
	//	=> val=RELTIME;
	public RelDateElements getRelDateAccess() {
		return pRelDate;
	}
	
	public ParserRule getRelDateRule() {
		return getRelDateAccess().getRule();
	}

	//Date:
	//	=> val=ABSTIME;
	public DateElements getDateAccess() {
		return pDate;
	}
	
	public ParserRule getDateRule() {
		return getDateAccess().getRule();
	}

	//Boolean:
	//	val=BOOL_EXPR;
	public BooleanElements getBooleanAccess() {
		return pBoolean;
	}
	
	public ParserRule getBooleanRule() {
		return getBooleanAccess().getRule();
	}

	//StringValue:
	//	val=STRING;
	public StringValueElements getStringValueAccess() {
		return pStringValue;
	}
	
	public ParserRule getStringValueRule() {
		return getStringValueAccess().getRule();
	}

	//Number:
	//	val=BIN_HEX_OCT | valInt=INTEGER |
	//	=> valStr=FLOAT_Val;
	public NumberElements getNumberAccess() {
		return pNumber;
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}

	//FLOAT_Val hidden():
	//	(PLUS | MINUS)? FLOAT;
	public FLOAT_ValElements getFLOAT_ValAccess() {
		return pFLOAT_Val;
	}
	
	public ParserRule getFLOAT_ValRule() {
		return getFLOAT_ValAccess().getRule();
	}

	//Skipped_NL hidden(WS):
	//	('\\' NL)*;
	public Skipped_NLElements getSkipped_NLAccess() {
		return pSkipped_NL;
	}
	
	public ParserRule getSkipped_NLRule() {
		return getSkipped_NLAccess().getRule();
	}

	//RELTIME hidden(WS):
	//	INTEGER (INT COLON INT COLON INT | COLON INT COLON INT);
	public RELTIMEElements getRELTIMEAccess() {
		return pRELTIME;
	}
	
	public ParserRule getRELTIMERule() {
		return getRELTIMEAccess().getRule();
	}

	//ABSTIME hidden():
	//	(INT MINUS (INT | ID_STMT) MINUS INT) (COLON | WS) (INT COLON INT (COLON INT)?)? | (INT '/' (INT | ID) '/' INT)
	//	(COLON | WS) (INT COLON INT (COLON INT)?)?;
	public ABSTIMEElements getABSTIMEAccess() {
		return pABSTIME;
	}
	
	public ParserRule getABSTIMERule() {
		return getABSTIMEAccess().getRule();
	}

	//SINGLE_VALUE hidden(WS):
	//	(ID | FLOAT | INT | PLUS | MINUS | ML_COMMENT | BIN_HEX_OCT | BOOL_EXPR | STRING | ANY_OTHER | '.')+;
	public SINGLE_VALUEElements getSINGLE_VALUEAccess() {
		return pSINGLE_VALUE;
	}
	
	public ParserRule getSINGLE_VALUERule() {
		return getSINGLE_VALUEAccess().getRule();
	}

	//ID_STMT hidden():
	//	ID (ID | '\\' | '/')*;
	public ID_STMTElements getID_STMTAccess() {
		return pID_STMT;
	}
	
	public ParserRule getID_STMTRule() {
		return getID_STMTAccess().getRule();
	}

	//ASTRIUM_ID hidden(WS):
	//	ID ID*;
	public ASTRIUM_IDElements getASTRIUM_IDAccess() {
		return pASTRIUM_ID;
	}
	
	public ParserRule getASTRIUM_IDRule() {
		return getASTRIUM_IDAccess().getRule();
	}

	//ASTRIUM_TIME hidden(WS):
	//	((ID '.')? INT ID INT)? INT COLON INT COLON INT;
	public ASTRIUM_TIMEElements getASTRIUM_TIMEAccess() {
		return pASTRIUM_TIME;
	}
	
	public ParserRule getASTRIUM_TIMERule() {
		return getASTRIUM_TIMEAccess().getRule();
	}

	//terminal ASTRIUM_COMMENT:
	//	'*' '*' !('\n' | '\r')*;
	public TerminalRule getASTRIUM_COMMENTRule() {
		return tASTRIUM_COMMENT;
	} 

	//INTEGER ecore::EInt hidden():
	//	(PLUS | MINUS)? INT;
	public INTEGERElements getINTEGERAccess() {
		return pINTEGER;
	}
	
	public ParserRule getINTEGERRule() {
		return getINTEGERAccess().getRule();
	}

	//terminal PLUS:
	//	'+';
	public TerminalRule getPLUSRule() {
		return tPLUS;
	} 

	//terminal MINUS:
	//	'-';
	public TerminalRule getMINUSRule() {
		return tMINUS;
	} 

	//terminal WS:
	//	' ' | '\t'+;
	public TerminalRule getWSRule() {
		return tWS;
	} 

	//terminal COLON:
	//	':';
	public TerminalRule getCOLONRule() {
		return tCOLON;
	} 

	//terminal LAMBDA:
	//	'lambda';
	public TerminalRule getLAMBDARule() {
		return tLAMBDA;
	} 

	//terminal TM:
	//	'TM';
	public TerminalRule getTMRule() {
		return tTM;
	} 

	//terminal BOOL_EXPR:
	//	'True' | 'False' | 'None';
	public TerminalRule getBOOL_EXPRRule() {
		return tBOOL_EXPR;
	} 

	//terminal TIME_EXPR:
	//	'SECOND' | 'MINUTE' | 'HOUR' | 'DAY' | 'WEEK';
	public TerminalRule getTIME_EXPRRule() {
		return tTIME_EXPR;
	} 

	//terminal SPELL:
	//	'SPELL';
	public TerminalRule getSPELLRule() {
		return tSPELL;
	} 

	//terminal WAIT:
	//	'WAIT';
	public TerminalRule getWAITRule() {
		return tWAIT;
	} 

	//terminal PAUSE:
	//	'PAUSE';
	public TerminalRule getPAUSERule() {
		return tPAUSE;
	} 

	//terminal CMD:
	//	'CMD';
	public TerminalRule getCMDRule() {
		return tCMD;
	} 

	//terminal STATE_EXPR:
	//	'STATE' | 'ENG' | 'RAW';
	public TerminalRule getSTATE_EXPRRule() {
		return tSTATE_EXPR;
	} 

	//terminal FLOAT:
	//	INT ('.' INT) (('e' | 'E') ('+' | '-')? INT?)? | INT ('.' INT)? (('e' | 'E') ('+' | '-')? INT?);
	public TerminalRule getFLOATRule() {
		return tFLOAT;
	} 

	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return tINT;
	} 

	//terminal ID:
	//	('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return tID;
	} 

	//terminal DOLLAR:
	//	'$';
	public TerminalRule getDOLLARRule() {
		return tDOLLAR;
	} 

	//terminal BIN_HEX_OCT:
	//	'0' ('x' | 'X') ('0'..'9' | 'a'..'f' | 'A'..'F')+ | '0' ('b' | 'B') '0'..'1'+ | '0' ('o' | 'O') '0'..'7'+;
	public TerminalRule getBIN_HEX_OCTRule() {
		return tBIN_HEX_OCT;
	} 

	//terminal STRING:
	//	'"' ('\\' ('b' | 't' | 'n' | 'f' | 'r' | 'u' | '"' | "'" | '\\') | !('\\' | '"'))* '"' |
	//	"'" ('\\' ('b' | 't' | 'n' | 'f' | 'r' | 'u' | '"' | "'" | '\\') | !('\\' | "'" | "\n"))* "'";
	public TerminalRule getSTRINGRule() {
		return tSTRING;
	} 

	//terminal ML_COMMENT:
	//	"'''"->"'''" | '"""'->'"""';
	public TerminalRule getML_COMMENTRule() {
		return tML_COMMENT;
	} 

	//terminal SL_COMMENT:
	//	'#' !('\n' | '\r')*;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	} 

	//terminal NL:
	//	'\r' | '\n'+;
	public TerminalRule getNLRule() {
		return tNL;
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return tANY_OTHER;
	} 
}
