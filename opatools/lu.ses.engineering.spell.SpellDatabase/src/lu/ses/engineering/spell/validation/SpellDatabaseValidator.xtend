/*
 * generated by Xtext
 */
package lu.ses.engineering.spell.validation

import lu.ses.engineering.spell.SpellDatabaseRuntimeModule
import lu.ses.engineering.spell.spellDatabase.CSVCommand
import lu.ses.engineering.spell.spellDatabase.CSVTelemetry
import lu.ses.engineering.spell.spellDatabase.SpellDatabasePackage
import lu.ses.engineering.spell.spellDatabase.StringValue
import lu.ses.engineering.spell.spellDatabase.TCArgs
import org.eclipse.xtext.validation.Check
import com.astra.ses.spell.dev.database.interfaces.ITelecommandArgument

/**
 * Custom validation rules. 
 *
 * see http://www.eclipse.org/Xtext/documentation.html#validation
 */
class SpellDatabaseValidator extends AbstractSpellDatabaseValidator {

//	def static ISpellDatabase getCurrentDatabase(){
//		val focusedProject = DatabaseManager.getInstance().getFocusedProject()
//		System.out.println(focusedProject)
//		val projectDatabase = DatabaseManager.getInstance().getProjectDatabase(focusedProject)
//		
//		return projectDatabase
//	}
	public static String MISSING_TM = 'missingTM'
	public static String MISSING_TM_CSV = 'missingTMCSV'
	public static String MISSING_TC = 'missingTC'
	public static String MISSING_DB = 'missingDB'
	public static String MISSING_TC_CSV = 'missingTCCSV'
	public static String MISSING_TC_ARG_CSV = 'missingTCArgCSV'
	@Check
	def checkStringValueTMTCExistence(StringValue value) {
		val db = SpellDatabaseRuntimeModule.getCurrentDatabase()
		if (db != null){
			if (value.^val.startsWith("T ")){
				var tmName = value.^val.substring(2)
				if (!db.isTelemetryParameter(tmName) && !db.isTelemetryParameter(tmName.toUpperCase())){
					if (tmName.contains(" ")){
						tmName = (tmName.substring(0,tmName.indexOf(" ")));
						if (!db.isTelemetryParameter(tmName) && !db.isTelemetryParameter(tmName.toUpperCase())){
							warning('The given TM could not be found!',
							 	value,
								SpellDatabasePackage.Literals.ATOM__VAL,
								SpellDatabaseValidator.MISSING_TM)
						}
					} else {
						warning('The given TM could not be found!',
						 	value,
							SpellDatabasePackage.Literals.ATOM__VAL,
							SpellDatabaseValidator.MISSING_TM)
					}
				}
				
			} else if (value.^val.startsWith("C ")){
				var tcName = value.^val.substring(2)
				if (!db.isTelecommand(tcName) && !db.isTelecommand(tcName.toUpperCase())){
					if (tcName.contains(" ")){
						tcName = (tcName.substring(0,tcName.indexOf(" ")));
						if (!db.isTelecommand(tcName) && !db.isTelecommand(tcName.toUpperCase())){
							warning('The given TC could not be found!',
							 	value,
								SpellDatabasePackage.Literals.ATOM__VAL,
								SpellDatabaseValidator.MISSING_TC)
						}
					} else {
						warning('The given TC could not be found!',
						 	value,
							SpellDatabasePackage.Literals.ATOM__VAL,
							SpellDatabaseValidator.MISSING_TC)
					}
				}
			}
		} else  {

//					info('Could not locate valid database for satellite!',
//				 	value,
//					SpellDatabasePackage.Literals.ATOM__VAL,
//					SpellDatabaseValidator.MISSING_DB)
		}
	}
	
	@Check
	def checkCSVCommand(CSVCommand cmd) {
		val db = SpellDatabaseRuntimeModule.getCurrentDatabase()
		if (db != null){
			val tcName = cmd.command
			if (!db.isTelecommand(tcName) && !db.isTelecommand(tcName.toUpperCase())){
				error('The given TC could not be found!',
					 	cmd,
						SpellDatabasePackage.Literals.CSV_COMMAND__COMMAND,
						SpellDatabaseValidator.MISSING_TC_CSV)
				
			}
		} else {
			
//					info('Could not locate valid database for satellite!',
//				 	cmd,
//					SpellDatabasePackage.Literals.CSV_COMMAND__COMMAND,
//					SpellDatabaseValidator.MISSING_DB)
		}
	}
	
	@Check
	def checkCSVTelemetry(CSVTelemetry tm) {
		val db = SpellDatabaseRuntimeModule.getCurrentDatabase()
		if (db != null){
			val tmName = tm.tmArg.tcName
			if (!db.isTelemetryParameter(tmName) && !db.isTelemetryParameter(tmName.toUpperCase())){
				error('The given TM could not be found!',
					 	tm,
						SpellDatabasePackage.Literals.CSV_TELEMETRY__TM_ARG,
						SpellDatabaseValidator.MISSING_TM_CSV)
				
			}
		} else  {
			
//				info('Could not locate valid database for satellite!',
//				 	tm,
//					SpellDatabasePackage.Literals.CSV_TELEMETRY__TM_ARG,
//					SpellDatabaseValidator.MISSING_DB)
		}
	}
	
	@Check
	def checkTCArg(TCArgs tcArg) {
		
		if (tcArg.eContainer instanceof CSVCommand){
			val db = SpellDatabaseRuntimeModule.getCurrentDatabase()
			if (db != null){
				val tcName = (tcArg.eContainer as CSVCommand).command
				var tcModel = db.getTelecommandModel(tcName)
				if (tcModel == null)
				    tcModel = db.getTelecommandModel(tcName.toUpperCase())
				var tcArgNameIsValid = false
				if ( tcModel.arguments.empty){
					tcArgNameIsValid = true	
				}
				for (ITelecommandArgument tcArgument : tcModel.arguments){
					if (tcArgument.description.equalsIgnoreCase(tcArg.tcName)){
						tcArgNameIsValid = true
					}
				}
				if (!tcArgNameIsValid){
					error('The given TC argument name could not be found!',
						 	tcArg,
							SpellDatabasePackage.Literals.TC_ARGS__TC_NAME,
							SpellDatabaseValidator.MISSING_TC_ARG_CSV)
					
				}
			} else {

				//info('Could not locate valid database for satellite!',
				// 	tcArg,
				//	SpellDatabasePackage.Literals.TC_ARGS__TC_NAME,
				//	SpellDatabaseValidator.MISSING_DB)
			}
		}
	}
	
	
}
