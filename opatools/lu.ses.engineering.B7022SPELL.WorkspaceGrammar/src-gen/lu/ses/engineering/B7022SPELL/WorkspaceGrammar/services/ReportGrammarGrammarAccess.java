/*
* generated by Xtext
*/
package lu.ses.engineering.B7022SPELL.WorkspaceGrammar.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;


@Singleton
public class ReportGrammarGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class WorkspaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Workspace");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cProceduresAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cProceduresEStringToLayoutMapEntryParserRuleCall_0_0 = (RuleCall)cProceduresAssignment_0.eContents().get(0);
		private final RuleCall cLayoutParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Workspace:
		//	procedures+=EStringToLayoutMapEntry* | Layout;
		public ParserRule getRule() { return rule; }

		//procedures+=EStringToLayoutMapEntry* | Layout
		public Alternatives getAlternatives() { return cAlternatives; }

		//procedures+=EStringToLayoutMapEntry*
		public Assignment getProceduresAssignment_0() { return cProceduresAssignment_0; }

		//EStringToLayoutMapEntry
		public RuleCall getProceduresEStringToLayoutMapEntryParserRuleCall_0_0() { return cProceduresEStringToLayoutMapEntryParserRuleCall_0_0; }

		//Layout
		public RuleCall getLayoutParserRuleCall_1() { return cLayoutParserRuleCall_1; }
	}

	public class EStringToLayoutMapEntryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EStringToLayoutMapEntry");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKeyIDTerminalRuleCall_0_0 = (RuleCall)cKeyAssignment_0.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueLayoutParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//EStringToLayoutMapEntry:
		//	key=ID value=Layout;
		public ParserRule getRule() { return rule; }

		//key=ID value=Layout
		public Group getGroup() { return cGroup; }

		//key=ID
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }

		//ID
		public RuleCall getKeyIDTerminalRuleCall_0_0() { return cKeyIDTerminalRuleCall_0_0; }

		//value=Layout
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//Layout
		public RuleCall getValueLayoutParserRuleCall_1_0() { return cValueLayoutParserRuleCall_1_0; }
	}

	public class LayoutElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Layout");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cLayoutAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Keyword cProcedureKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_0_1_1 = (RuleCall)cGroup_0_1.eContents().get(1);
		private final Assignment cNameAssignment_0_1_2 = (Assignment)cGroup_0_1.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_0_1_2_0 = (RuleCall)cNameAssignment_0_1_2.eContents().get(0);
		private final Keyword cColonKeyword_0_1_3 = (Keyword)cGroup_0_1.eContents().get(3);
		private final RuleCall cNLTerminalRuleCall_0_1_4 = (RuleCall)cGroup_0_1.eContents().get(4);
		private final Group cGroup_0_1_5 = (Group)cGroup_0_1.eContents().get(5);
		private final RuleCall cTABTerminalRuleCall_0_1_5_0 = (RuleCall)cGroup_0_1_5.eContents().get(0);
		private final Keyword cProcedureCallsTheProceduresKeyword_0_1_5_1 = (Keyword)cGroup_0_1_5.eContents().get(1);
		private final RuleCall cNLTerminalRuleCall_0_1_5_2 = (RuleCall)cGroup_0_1_5.eContents().get(2);
		private final Group cGroup_0_1_5_3 = (Group)cGroup_0_1_5.eContents().get(3);
		private final RuleCall cTABTerminalRuleCall_0_1_5_3_0 = (RuleCall)cGroup_0_1_5_3.eContents().get(0);
		private final RuleCall cTABTerminalRuleCall_0_1_5_3_1 = (RuleCall)cGroup_0_1_5_3.eContents().get(1);
		private final Assignment cCallsAssignment_0_1_5_3_2 = (Assignment)cGroup_0_1_5_3.eContents().get(2);
		private final CrossReference cCallsLayoutCrossReference_0_1_5_3_2_0 = (CrossReference)cCallsAssignment_0_1_5_3_2.eContents().get(0);
		private final RuleCall cCallsLayoutIDTerminalRuleCall_0_1_5_3_2_0_1 = (RuleCall)cCallsLayoutCrossReference_0_1_5_3_2_0.eContents().get(1);
		private final RuleCall cNLTerminalRuleCall_0_1_5_3_3 = (RuleCall)cGroup_0_1_5_3.eContents().get(3);
		private final Group cGroup_0_1_6 = (Group)cGroup_0_1.eContents().get(6);
		private final RuleCall cTABTerminalRuleCall_0_1_6_0 = (RuleCall)cGroup_0_1_6.eContents().get(0);
		private final Keyword cProcedureIsCalledByKeyword_0_1_6_1 = (Keyword)cGroup_0_1_6.eContents().get(1);
		private final RuleCall cNLTerminalRuleCall_0_1_6_2 = (RuleCall)cGroup_0_1_6.eContents().get(2);
		private final Group cGroup_0_1_6_3 = (Group)cGroup_0_1_6.eContents().get(3);
		private final RuleCall cTABTerminalRuleCall_0_1_6_3_0 = (RuleCall)cGroup_0_1_6_3.eContents().get(0);
		private final RuleCall cTABTerminalRuleCall_0_1_6_3_1 = (RuleCall)cGroup_0_1_6_3.eContents().get(1);
		private final Assignment cIsCalledAssignment_0_1_6_3_2 = (Assignment)cGroup_0_1_6_3.eContents().get(2);
		private final CrossReference cIsCalledLayoutCrossReference_0_1_6_3_2_0 = (CrossReference)cIsCalledAssignment_0_1_6_3_2.eContents().get(0);
		private final RuleCall cIsCalledLayoutIDTerminalRuleCall_0_1_6_3_2_0_1 = (RuleCall)cIsCalledLayoutCrossReference_0_1_6_3_2_0.eContents().get(1);
		private final RuleCall cNLTerminalRuleCall_0_1_6_3_3 = (RuleCall)cGroup_0_1_6_3.eContents().get(3);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Assignment cMissingAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final Keyword cMissingNoSourceFoundForKeyword_1_0_0_0 = (Keyword)cMissingAssignment_1_0_0.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_1_0_1 = (RuleCall)cGroup_1_0.eContents().get(1);
		private final Assignment cNameAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_1_0_2_0 = (RuleCall)cNameAssignment_1_0_2.eContents().get(0);
		private final Keyword cColonKeyword_1_0_3 = (Keyword)cGroup_1_0.eContents().get(3);
		private final RuleCall cNLTerminalRuleCall_1_0_4 = (RuleCall)cGroup_1_0.eContents().get(4);
		private final Group cGroup_1_0_5 = (Group)cGroup_1_0.eContents().get(5);
		private final RuleCall cTABTerminalRuleCall_1_0_5_0 = (RuleCall)cGroup_1_0_5.eContents().get(0);
		private final Keyword cIsCalledByKeyword_1_0_5_1 = (Keyword)cGroup_1_0_5.eContents().get(1);
		private final RuleCall cNLTerminalRuleCall_1_0_5_2 = (RuleCall)cGroup_1_0_5.eContents().get(2);
		private final Group cGroup_1_0_5_3 = (Group)cGroup_1_0_5.eContents().get(3);
		private final RuleCall cTABTerminalRuleCall_1_0_5_3_0 = (RuleCall)cGroup_1_0_5_3.eContents().get(0);
		private final RuleCall cTABTerminalRuleCall_1_0_5_3_1 = (RuleCall)cGroup_1_0_5_3.eContents().get(1);
		private final Assignment cIsCalledAssignment_1_0_5_3_2 = (Assignment)cGroup_1_0_5_3.eContents().get(2);
		private final CrossReference cIsCalledLayoutCrossReference_1_0_5_3_2_0 = (CrossReference)cIsCalledAssignment_1_0_5_3_2.eContents().get(0);
		private final RuleCall cIsCalledLayoutIDTerminalRuleCall_1_0_5_3_2_0_1 = (RuleCall)cIsCalledLayoutCrossReference_1_0_5_3_2_0.eContents().get(1);
		private final RuleCall cNLTerminalRuleCall_1_0_5_3_3 = (RuleCall)cGroup_1_0_5_3.eContents().get(3);
		
		//Layout:
		//	{Layout} ("Procedure" WS name=ID ":" NL (TAB "procedure calls the procedures:" NL (TAB TAB calls+=[Layout] NL)*) (TAB
		//	"procedure is called by:" NL (TAB TAB isCalled+=[Layout] NL)*)) | => (missing?="No Source found for" WS name=ID ":"
		//	NL (TAB "is called by:" NL (TAB TAB isCalled+=[Layout] NL)*));
		public ParserRule getRule() { return rule; }

		//{Layout} ("Procedure" WS name=ID ":" NL (TAB "procedure calls the procedures:" NL (TAB TAB calls+=[Layout] NL)*) (TAB
		//"procedure is called by:" NL (TAB TAB isCalled+=[Layout] NL)*)) | => (missing?="No Source found for" WS name=ID ":" NL
		//(TAB "is called by:" NL (TAB TAB isCalled+=[Layout] NL)*))
		public Alternatives getAlternatives() { return cAlternatives; }

		//{Layout} ("Procedure" WS name=ID ":" NL (TAB "procedure calls the procedures:" NL (TAB TAB calls+=[Layout] NL)*) (TAB
		//"procedure is called by:" NL (TAB TAB isCalled+=[Layout] NL)*))
		public Group getGroup_0() { return cGroup_0; }

		//{Layout}
		public Action getLayoutAction_0_0() { return cLayoutAction_0_0; }

		//"Procedure" WS name=ID ":" NL (TAB "procedure calls the procedures:" NL (TAB TAB calls+=[Layout] NL)*) (TAB
		//"procedure is called by:" NL (TAB TAB isCalled+=[Layout] NL)*)
		public Group getGroup_0_1() { return cGroup_0_1; }

		//"Procedure"
		public Keyword getProcedureKeyword_0_1_0() { return cProcedureKeyword_0_1_0; }

		//WS
		public RuleCall getWSTerminalRuleCall_0_1_1() { return cWSTerminalRuleCall_0_1_1; }

		//name=ID
		public Assignment getNameAssignment_0_1_2() { return cNameAssignment_0_1_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_1_2_0() { return cNameIDTerminalRuleCall_0_1_2_0; }

		//":"
		public Keyword getColonKeyword_0_1_3() { return cColonKeyword_0_1_3; }

		//NL
		public RuleCall getNLTerminalRuleCall_0_1_4() { return cNLTerminalRuleCall_0_1_4; }

		//TAB "procedure calls the procedures:" NL (TAB TAB calls+=[Layout] NL)*
		public Group getGroup_0_1_5() { return cGroup_0_1_5; }

		//TAB
		public RuleCall getTABTerminalRuleCall_0_1_5_0() { return cTABTerminalRuleCall_0_1_5_0; }

		//"procedure calls the procedures:"
		public Keyword getProcedureCallsTheProceduresKeyword_0_1_5_1() { return cProcedureCallsTheProceduresKeyword_0_1_5_1; }

		//NL
		public RuleCall getNLTerminalRuleCall_0_1_5_2() { return cNLTerminalRuleCall_0_1_5_2; }

		//(TAB TAB calls+=[Layout] NL)*
		public Group getGroup_0_1_5_3() { return cGroup_0_1_5_3; }

		//TAB
		public RuleCall getTABTerminalRuleCall_0_1_5_3_0() { return cTABTerminalRuleCall_0_1_5_3_0; }

		//TAB
		public RuleCall getTABTerminalRuleCall_0_1_5_3_1() { return cTABTerminalRuleCall_0_1_5_3_1; }

		//calls+=[Layout]
		public Assignment getCallsAssignment_0_1_5_3_2() { return cCallsAssignment_0_1_5_3_2; }

		//[Layout]
		public CrossReference getCallsLayoutCrossReference_0_1_5_3_2_0() { return cCallsLayoutCrossReference_0_1_5_3_2_0; }

		//ID
		public RuleCall getCallsLayoutIDTerminalRuleCall_0_1_5_3_2_0_1() { return cCallsLayoutIDTerminalRuleCall_0_1_5_3_2_0_1; }

		//NL
		public RuleCall getNLTerminalRuleCall_0_1_5_3_3() { return cNLTerminalRuleCall_0_1_5_3_3; }

		//TAB "procedure is called by:" NL (TAB TAB isCalled+=[Layout] NL)*
		public Group getGroup_0_1_6() { return cGroup_0_1_6; }

		//TAB
		public RuleCall getTABTerminalRuleCall_0_1_6_0() { return cTABTerminalRuleCall_0_1_6_0; }

		//"procedure is called by:"
		public Keyword getProcedureIsCalledByKeyword_0_1_6_1() { return cProcedureIsCalledByKeyword_0_1_6_1; }

		//NL
		public RuleCall getNLTerminalRuleCall_0_1_6_2() { return cNLTerminalRuleCall_0_1_6_2; }

		//(TAB TAB isCalled+=[Layout] NL)*
		public Group getGroup_0_1_6_3() { return cGroup_0_1_6_3; }

		//TAB
		public RuleCall getTABTerminalRuleCall_0_1_6_3_0() { return cTABTerminalRuleCall_0_1_6_3_0; }

		//TAB
		public RuleCall getTABTerminalRuleCall_0_1_6_3_1() { return cTABTerminalRuleCall_0_1_6_3_1; }

		//isCalled+=[Layout]
		public Assignment getIsCalledAssignment_0_1_6_3_2() { return cIsCalledAssignment_0_1_6_3_2; }

		//[Layout]
		public CrossReference getIsCalledLayoutCrossReference_0_1_6_3_2_0() { return cIsCalledLayoutCrossReference_0_1_6_3_2_0; }

		//ID
		public RuleCall getIsCalledLayoutIDTerminalRuleCall_0_1_6_3_2_0_1() { return cIsCalledLayoutIDTerminalRuleCall_0_1_6_3_2_0_1; }

		//NL
		public RuleCall getNLTerminalRuleCall_0_1_6_3_3() { return cNLTerminalRuleCall_0_1_6_3_3; }

		//=> (missing?="No Source found for" WS name=ID ":" NL (TAB "is called by:" NL (TAB TAB isCalled+=[Layout] NL)*))
		public Group getGroup_1() { return cGroup_1; }

		//missing?="No Source found for" WS name=ID ":" NL (TAB "is called by:" NL (TAB TAB isCalled+=[Layout] NL)*)
		public Group getGroup_1_0() { return cGroup_1_0; }

		//missing?="No Source found for"
		public Assignment getMissingAssignment_1_0_0() { return cMissingAssignment_1_0_0; }

		//"No Source found for"
		public Keyword getMissingNoSourceFoundForKeyword_1_0_0_0() { return cMissingNoSourceFoundForKeyword_1_0_0_0; }

		//WS
		public RuleCall getWSTerminalRuleCall_1_0_1() { return cWSTerminalRuleCall_1_0_1; }

		//name=ID
		public Assignment getNameAssignment_1_0_2() { return cNameAssignment_1_0_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0_2_0() { return cNameIDTerminalRuleCall_1_0_2_0; }

		//":"
		public Keyword getColonKeyword_1_0_3() { return cColonKeyword_1_0_3; }

		//NL
		public RuleCall getNLTerminalRuleCall_1_0_4() { return cNLTerminalRuleCall_1_0_4; }

		//TAB "is called by:" NL (TAB TAB isCalled+=[Layout] NL)*
		public Group getGroup_1_0_5() { return cGroup_1_0_5; }

		//TAB
		public RuleCall getTABTerminalRuleCall_1_0_5_0() { return cTABTerminalRuleCall_1_0_5_0; }

		//"is called by:"
		public Keyword getIsCalledByKeyword_1_0_5_1() { return cIsCalledByKeyword_1_0_5_1; }

		//NL
		public RuleCall getNLTerminalRuleCall_1_0_5_2() { return cNLTerminalRuleCall_1_0_5_2; }

		//(TAB TAB isCalled+=[Layout] NL)*
		public Group getGroup_1_0_5_3() { return cGroup_1_0_5_3; }

		//TAB
		public RuleCall getTABTerminalRuleCall_1_0_5_3_0() { return cTABTerminalRuleCall_1_0_5_3_0; }

		//TAB
		public RuleCall getTABTerminalRuleCall_1_0_5_3_1() { return cTABTerminalRuleCall_1_0_5_3_1; }

		//isCalled+=[Layout]
		public Assignment getIsCalledAssignment_1_0_5_3_2() { return cIsCalledAssignment_1_0_5_3_2; }

		//[Layout]
		public CrossReference getIsCalledLayoutCrossReference_1_0_5_3_2_0() { return cIsCalledLayoutCrossReference_1_0_5_3_2_0; }

		//ID
		public RuleCall getIsCalledLayoutIDTerminalRuleCall_1_0_5_3_2_0_1() { return cIsCalledLayoutIDTerminalRuleCall_1_0_5_3_2_0_1; }

		//NL
		public RuleCall getNLTerminalRuleCall_1_0_5_3_3() { return cNLTerminalRuleCall_1_0_5_3_3; }
	}
	
	
	private WorkspaceElements pWorkspace;
	private EStringToLayoutMapEntryElements pEStringToLayoutMapEntry;
	private LayoutElements pLayout;
	private TerminalRule tID;
	private TerminalRule tTAB;
	private TerminalRule tWS;
	private TerminalRule tNL;
	private TerminalRule tANY_OTHER;
	
	private final Grammar grammar;

	@Inject
	public ReportGrammarGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("lu.ses.engineering.B7022SPELL.WorkspaceGrammar.ReportGrammar".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//Workspace:
	//	procedures+=EStringToLayoutMapEntry* | Layout;
	public WorkspaceElements getWorkspaceAccess() {
		return (pWorkspace != null) ? pWorkspace : (pWorkspace = new WorkspaceElements());
	}
	
	public ParserRule getWorkspaceRule() {
		return getWorkspaceAccess().getRule();
	}

	//EStringToLayoutMapEntry:
	//	key=ID value=Layout;
	public EStringToLayoutMapEntryElements getEStringToLayoutMapEntryAccess() {
		return (pEStringToLayoutMapEntry != null) ? pEStringToLayoutMapEntry : (pEStringToLayoutMapEntry = new EStringToLayoutMapEntryElements());
	}
	
	public ParserRule getEStringToLayoutMapEntryRule() {
		return getEStringToLayoutMapEntryAccess().getRule();
	}

	//Layout:
	//	{Layout} ("Procedure" WS name=ID ":" NL (TAB "procedure calls the procedures:" NL (TAB TAB calls+=[Layout] NL)*) (TAB
	//	"procedure is called by:" NL (TAB TAB isCalled+=[Layout] NL)*)) | => (missing?="No Source found for" WS name=ID ":"
	//	NL (TAB "is called by:" NL (TAB TAB isCalled+=[Layout] NL)*));
	public LayoutElements getLayoutAccess() {
		return (pLayout != null) ? pLayout : (pLayout = new LayoutElements());
	}
	
	public ParserRule getLayoutRule() {
		return getLayoutAccess().getRule();
	}

	//terminal ID:
	//	!("\t" | " " | "\r" | "\n")+;
	public TerminalRule getIDRule() {
		return (tID != null) ? tID : (tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ID"));
	} 

	//terminal TAB:
	//	"\t"+;
	public TerminalRule getTABRule() {
		return (tTAB != null) ? tTAB : (tTAB = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "TAB"));
	} 

	//terminal WS:
	//	" "+;
	public TerminalRule getWSRule() {
		return (tWS != null) ? tWS : (tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WS"));
	} 

	//terminal NL:
	//	("\r" | "\n")+;
	public TerminalRule getNLRule() {
		return (tNL != null) ? tNL : (tNL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "NL"));
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return (tANY_OTHER != null) ? tANY_OTHER : (tANY_OTHER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ANY_OTHER"));
	} 
}
