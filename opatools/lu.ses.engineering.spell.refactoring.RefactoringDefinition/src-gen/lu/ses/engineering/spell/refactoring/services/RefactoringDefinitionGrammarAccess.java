/*
 * generated by Xtext
 */
package lu.ses.engineering.spell.refactoring.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;


@Singleton
public class RefactoringDefinitionGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class RefactoringsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.refactoring.RefactoringDefinition.Refactorings");
		private final Assignment cRefactoringsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cRefactoringsRefactorMapEntryParserRuleCall_0 = (RuleCall)cRefactoringsAssignment.eContents().get(0);
		
		//Refactorings:
		//	refactorings+=refactorMapEntry+;
		@Override public ParserRule getRule() { return rule; }

		//refactorings+=refactorMapEntry+
		public Assignment getRefactoringsAssignment() { return cRefactoringsAssignment; }

		//refactorMapEntry
		public RuleCall getRefactoringsRefactorMapEntryParserRuleCall_0() { return cRefactoringsRefactorMapEntryParserRuleCall_0; }
	}

	public class RefactorMapEntryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.refactoring.RefactoringDefinition.refactorMapEntry");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKeyVALUETerminalRuleCall_0_0 = (RuleCall)cKeyAssignment_0.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueVALUETerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		private final RuleCall cNLTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//refactorMapEntry:
		//	key=VALUE WS value=VALUE NL?;
		@Override public ParserRule getRule() { return rule; }

		//key=VALUE WS value=VALUE NL?
		public Group getGroup() { return cGroup; }

		//key=VALUE
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }

		//VALUE
		public RuleCall getKeyVALUETerminalRuleCall_0_0() { return cKeyVALUETerminalRuleCall_0_0; }

		//WS
		public RuleCall getWSTerminalRuleCall_1() { return cWSTerminalRuleCall_1; }

		//value=VALUE
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//VALUE
		public RuleCall getValueVALUETerminalRuleCall_2_0() { return cValueVALUETerminalRuleCall_2_0; }

		//NL?
		public RuleCall getNLTerminalRuleCall_3() { return cNLTerminalRuleCall_3; }
	}

	public class ArgRefactorMapEntryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.refactoring.RefactoringDefinition.argRefactorMapEntry");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKeyArgRefactorParserRuleCall_0_0 = (RuleCall)cKeyAssignment_0.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueVALUETerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		private final RuleCall cNLTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//argRefactorMapEntry:
		//	key=argRefactor WS value=VALUE NL?;
		@Override public ParserRule getRule() { return rule; }

		//key=argRefactor WS value=VALUE NL?
		public Group getGroup() { return cGroup; }

		//key=argRefactor
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }

		//argRefactor
		public RuleCall getKeyArgRefactorParserRuleCall_0_0() { return cKeyArgRefactorParserRuleCall_0_0; }

		//WS
		public RuleCall getWSTerminalRuleCall_1() { return cWSTerminalRuleCall_1; }

		//value=VALUE
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//VALUE
		public RuleCall getValueVALUETerminalRuleCall_2_0() { return cValueVALUETerminalRuleCall_2_0; }

		//NL?
		public RuleCall getNLTerminalRuleCall_3() { return cNLTerminalRuleCall_3; }
	}

	public class ArgRefactorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.refactoring.RefactoringDefinition.argRefactor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cMnemAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cMnemVALUETerminalRuleCall_0_0 = (RuleCall)cMnemAssignment_0.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cRawAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRawVALUETerminalRuleCall_2_0 = (RuleCall)cRawAssignment_2.eContents().get(0);
		
		//argRefactor:
		//	mnem=VALUE WS raw=VALUE;
		@Override public ParserRule getRule() { return rule; }

		//mnem=VALUE WS raw=VALUE
		public Group getGroup() { return cGroup; }

		//mnem=VALUE
		public Assignment getMnemAssignment_0() { return cMnemAssignment_0; }

		//VALUE
		public RuleCall getMnemVALUETerminalRuleCall_0_0() { return cMnemVALUETerminalRuleCall_0_0; }

		//WS
		public RuleCall getWSTerminalRuleCall_1() { return cWSTerminalRuleCall_1; }

		//raw=VALUE
		public Assignment getRawAssignment_2() { return cRawAssignment_2; }

		//VALUE
		public RuleCall getRawVALUETerminalRuleCall_2_0() { return cRawVALUETerminalRuleCall_2_0; }
	}
	
	
	private final RefactoringsElements pRefactorings;
	private final RefactorMapEntryElements pRefactorMapEntry;
	private final ArgRefactorMapEntryElements pArgRefactorMapEntry;
	private final ArgRefactorElements pArgRefactor;
	private final TerminalRule tWS;
	private final TerminalRule tNL;
	private final TerminalRule tVALUE;
	
	private final Grammar grammar;

	@Inject
	public RefactoringDefinitionGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.pRefactorings = new RefactoringsElements();
		this.pRefactorMapEntry = new RefactorMapEntryElements();
		this.pArgRefactorMapEntry = new ArgRefactorMapEntryElements();
		this.pArgRefactor = new ArgRefactorElements();
		this.tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.refactoring.RefactoringDefinition.WS");
		this.tNL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.refactoring.RefactoringDefinition.NL");
		this.tVALUE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "lu.ses.engineering.spell.refactoring.RefactoringDefinition.VALUE");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("lu.ses.engineering.spell.refactoring.RefactoringDefinition".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//Refactorings:
	//	refactorings+=refactorMapEntry+;
	public RefactoringsElements getRefactoringsAccess() {
		return pRefactorings;
	}
	
	public ParserRule getRefactoringsRule() {
		return getRefactoringsAccess().getRule();
	}

	//refactorMapEntry:
	//	key=VALUE WS value=VALUE NL?;
	public RefactorMapEntryElements getRefactorMapEntryAccess() {
		return pRefactorMapEntry;
	}
	
	public ParserRule getRefactorMapEntryRule() {
		return getRefactorMapEntryAccess().getRule();
	}

	//argRefactorMapEntry:
	//	key=argRefactor WS value=VALUE NL?;
	public ArgRefactorMapEntryElements getArgRefactorMapEntryAccess() {
		return pArgRefactorMapEntry;
	}
	
	public ParserRule getArgRefactorMapEntryRule() {
		return getArgRefactorMapEntryAccess().getRule();
	}

	//argRefactor:
	//	mnem=VALUE WS raw=VALUE;
	public ArgRefactorElements getArgRefactorAccess() {
		return pArgRefactor;
	}
	
	public ParserRule getArgRefactorRule() {
		return getArgRefactorAccess().getRule();
	}

	//terminal WS:
	//	'\t'+;
	public TerminalRule getWSRule() {
		return tWS;
	} 

	//terminal NL:
	//	'\r' | '\n'+;
	public TerminalRule getNLRule() {
		return tNL;
	} 

	//terminal VALUE:
	//	!('\t' | '\r' | '\n')*;
	public TerminalRule getVALUERule() {
		return tVALUE;
	} 
}
