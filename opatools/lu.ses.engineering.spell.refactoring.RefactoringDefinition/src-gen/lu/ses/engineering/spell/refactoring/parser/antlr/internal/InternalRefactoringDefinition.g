/*
 * generated by Xtext
 */
grammar InternalRefactoringDefinition;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package lu.ses.engineering.spell.refactoring.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package lu.ses.engineering.spell.refactoring.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import lu.ses.engineering.spell.refactoring.services.RefactoringDefinitionGrammarAccess;

}

@parser::members {

 	private RefactoringDefinitionGrammarAccess grammarAccess;
 	
    public InternalRefactoringDefinitionParser(TokenStream input, RefactoringDefinitionGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Refactorings";	
   	}
   	
   	@Override
   	protected RefactoringDefinitionGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleRefactorings
entryRuleRefactorings returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRefactoringsRule()); }
	 iv_ruleRefactorings=ruleRefactorings 
	 { $current=$iv_ruleRefactorings.current; } 
	 EOF 
;

// Rule Refactorings
ruleRefactorings returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getRefactoringsAccess().getRefactoringsRefactorMapEntryParserRuleCall_0()); 
	    }
		lv_refactorings_0_0=rulerefactorMapEntry		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRefactoringsRule());
	        }
       		add(
       			$current, 
       			"refactorings",
        		lv_refactorings_0_0, 
        		"lu.ses.engineering.spell.refactoring.RefactoringDefinition.refactorMapEntry");
	        afterParserOrEnumRuleCall();
	    }

)
)+
;





// Entry rule entryRulerefactorMapEntry
entryRulerefactorMapEntry returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRefactorMapEntryRule()); }
	 iv_rulerefactorMapEntry=rulerefactorMapEntry 
	 { $current=$iv_rulerefactorMapEntry.current; } 
	 EOF 
;

// Rule refactorMapEntry
rulerefactorMapEntry returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_key_0_0=RULE_VALUE
		{
			newLeafNode(lv_key_0_0, grammarAccess.getRefactorMapEntryAccess().getKeyVALUETerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRefactorMapEntryRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"key",
        		lv_key_0_0, 
        		"lu.ses.engineering.spell.refactoring.RefactoringDefinition.VALUE");
	    }

)
)this_WS_1=RULE_WS
    { 
    newLeafNode(this_WS_1, grammarAccess.getRefactorMapEntryAccess().getWSTerminalRuleCall_1()); 
    }
(
(
		lv_value_2_0=RULE_VALUE
		{
			newLeafNode(lv_value_2_0, grammarAccess.getRefactorMapEntryAccess().getValueVALUETerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRefactorMapEntryRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"lu.ses.engineering.spell.refactoring.RefactoringDefinition.VALUE");
	    }

)
)(this_NL_3=RULE_NL
    { 
    newLeafNode(this_NL_3, grammarAccess.getRefactorMapEntryAccess().getNLTerminalRuleCall_3()); 
    }
)?)
;







// Entry rule entryRuleargRefactor
entryRuleargRefactor returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getArgRefactorRule()); }
	 iv_ruleargRefactor=ruleargRefactor 
	 { $current=$iv_ruleargRefactor.current; } 
	 EOF 
;

// Rule argRefactor
ruleargRefactor returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_mnem_0_0=RULE_VALUE
		{
			newLeafNode(lv_mnem_0_0, grammarAccess.getArgRefactorAccess().getMnemVALUETerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getArgRefactorRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"mnem",
        		lv_mnem_0_0, 
        		"lu.ses.engineering.spell.refactoring.RefactoringDefinition.VALUE");
	    }

)
)this_WS_1=RULE_WS
    { 
    newLeafNode(this_WS_1, grammarAccess.getArgRefactorAccess().getWSTerminalRuleCall_1()); 
    }
(
(
		lv_raw_2_0=RULE_VALUE
		{
			newLeafNode(lv_raw_2_0, grammarAccess.getArgRefactorAccess().getRawVALUETerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getArgRefactorRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"raw",
        		lv_raw_2_0, 
        		"lu.ses.engineering.spell.refactoring.RefactoringDefinition.VALUE");
	    }

)
))
;





RULE_WS : '\t'+;

RULE_NL : ('\r'|'\n')+;

RULE_VALUE : ~(('\t'|'\r'|'\n'))*;


