/*
 * generated by Xtext
 */
package lu.ses.engineering.spell.refactoring.serializer;

import com.google.inject.Inject;
import java.util.Map;
import java.util.Set;
import lu.ses.engineering.spell.refactoring.refactoringDefinition.RefactoringDefinitionPackage;
import lu.ses.engineering.spell.refactoring.refactoringDefinition.Refactorings;
import lu.ses.engineering.spell.refactoring.refactoringDefinition.argRefactor;
import lu.ses.engineering.spell.refactoring.services.RefactoringDefinitionGrammarAccess;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class RefactoringDefinitionSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private RefactoringDefinitionGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == RefactoringDefinitionPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case RefactoringDefinitionPackage.REFACTORINGS:
				sequence_Refactorings(context, (Refactorings) semanticObject); 
				return; 
			case RefactoringDefinitionPackage.ARG_REFACTOR:
				sequence_argRefactor(context, (argRefactor) semanticObject); 
				return; 
			case RefactoringDefinitionPackage.ARG_REFACTOR_MAP_ENTRY:
				sequence_argRefactorMapEntry(context, (Map.Entry) semanticObject); 
				return; 
			case RefactoringDefinitionPackage.REFACTOR_MAP_ENTRY:
				sequence_refactorMapEntry(context, (Map.Entry) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Refactorings returns Refactorings
	 *
	 * Constraint:
	 *     refactorings+=refactorMapEntry+
	 */
	protected void sequence_Refactorings(ISerializationContext context, Refactorings semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     argRefactorMapEntry returns argRefactorMapEntry
	 *
	 * Constraint:
	 *     (key=argRefactor value=VALUE)
	 */
	protected void sequence_argRefactorMapEntry(ISerializationContext context, Map.Entry semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient((EObject) semanticObject, RefactoringDefinitionPackage.Literals.ARG_REFACTOR_MAP_ENTRY__KEY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing((EObject) semanticObject, RefactoringDefinitionPackage.Literals.ARG_REFACTOR_MAP_ENTRY__KEY));
			if (transientValues.isValueTransient((EObject) semanticObject, RefactoringDefinitionPackage.Literals.ARG_REFACTOR_MAP_ENTRY__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing((EObject) semanticObject, RefactoringDefinitionPackage.Literals.ARG_REFACTOR_MAP_ENTRY__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, (EObject) semanticObject);
		feeder.accept(grammarAccess.getArgRefactorMapEntryAccess().getKeyArgRefactorParserRuleCall_0_0(), semanticObject.getKey());
		feeder.accept(grammarAccess.getArgRefactorMapEntryAccess().getValueVALUETerminalRuleCall_2_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     argRefactor returns argRefactor
	 *
	 * Constraint:
	 *     (mnem=VALUE raw=VALUE)
	 */
	protected void sequence_argRefactor(ISerializationContext context, argRefactor semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RefactoringDefinitionPackage.Literals.ARG_REFACTOR__MNEM) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RefactoringDefinitionPackage.Literals.ARG_REFACTOR__MNEM));
			if (transientValues.isValueTransient(semanticObject, RefactoringDefinitionPackage.Literals.ARG_REFACTOR__RAW) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RefactoringDefinitionPackage.Literals.ARG_REFACTOR__RAW));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getArgRefactorAccess().getMnemVALUETerminalRuleCall_0_0(), semanticObject.getMnem());
		feeder.accept(grammarAccess.getArgRefactorAccess().getRawVALUETerminalRuleCall_2_0(), semanticObject.getRaw());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     refactorMapEntry returns refactorMapEntry
	 *
	 * Constraint:
	 *     (key=VALUE value=VALUE)
	 */
	protected void sequence_refactorMapEntry(ISerializationContext context, Map.Entry semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient((EObject) semanticObject, RefactoringDefinitionPackage.Literals.REFACTOR_MAP_ENTRY__KEY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing((EObject) semanticObject, RefactoringDefinitionPackage.Literals.REFACTOR_MAP_ENTRY__KEY));
			if (transientValues.isValueTransient((EObject) semanticObject, RefactoringDefinitionPackage.Literals.REFACTOR_MAP_ENTRY__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing((EObject) semanticObject, RefactoringDefinitionPackage.Literals.REFACTOR_MAP_ENTRY__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, (EObject) semanticObject);
		feeder.accept(grammarAccess.getRefactorMapEntryAccess().getKeyVALUETerminalRuleCall_0_0(), semanticObject.getKey());
		feeder.accept(grammarAccess.getRefactorMapEntryAccess().getValueVALUETerminalRuleCall_2_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
}
