/*
 * generated by Xtext
 */
package lu.ses.engineering.spell.refactoring.serializer;

import com.google.inject.Inject;
import java.util.List;
import lu.ses.engineering.spell.refactoring.services.RefactoringDefinitionGrammarAccess;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;

@SuppressWarnings("all")
public class RefactoringDefinitionSyntacticSequencer extends AbstractSyntacticSequencer {

	protected RefactoringDefinitionGrammarAccess grammarAccess;
	protected AbstractElementAlias match_argRefactorMapEntry_NLTerminalRuleCall_3_q;
	protected AbstractElementAlias match_refactorMapEntry_NLTerminalRuleCall_3_q;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (RefactoringDefinitionGrammarAccess) access;
		match_argRefactorMapEntry_NLTerminalRuleCall_3_q = new TokenAlias(false, true, grammarAccess.getArgRefactorMapEntryAccess().getNLTerminalRuleCall_3());
		match_refactorMapEntry_NLTerminalRuleCall_3_q = new TokenAlias(false, true, grammarAccess.getRefactorMapEntryAccess().getNLTerminalRuleCall_3());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getNLRule())
			return getNLToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getWSRule())
			return getWSToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * terminal NL         : ('\r'|'\n')+;
	 */
	protected String getNLToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "\r";
	}
	
	/**
	 * terminal WS			: ('\t')+;
	 */
	protected String getWSToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "\t";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_argRefactorMapEntry_NLTerminalRuleCall_3_q.equals(syntax))
				emit_argRefactorMapEntry_NLTerminalRuleCall_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_refactorMapEntry_NLTerminalRuleCall_3_q.equals(syntax))
				emit_refactorMapEntry_NLTerminalRuleCall_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     NL?
	 *
	 * This ambiguous syntax occurs at:
	 *     value=VALUE (ambiguity) (rule end)
	 */
	protected void emit_argRefactorMapEntry_NLTerminalRuleCall_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     NL?
	 *
	 * This ambiguous syntax occurs at:
	 *     value=VALUE (ambiguity) (rule end)
	 */
	protected void emit_refactorMapEntry_NLTerminalRuleCall_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
