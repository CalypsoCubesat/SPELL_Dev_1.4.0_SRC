/*
 * generated by Xtext
 */
parser grammar InternalSpellDatabaseParser;

options {
	tokenVocab=InternalSpellDatabaseLexer;
	superClass=AbstractInternalContentAssistParser;
	backtrack=true;
	
	 k=3;
	
}

@header {
package lu.ses.engineering.spell.ui.contentassist.antlr.internal; 

import java.util.Map;
import java.util.HashMap;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import lu.ses.engineering.spell.services.SpellDatabaseGrammarAccess;

}

@members {
 
 	private SpellDatabaseGrammarAccess grammarAccess;
 	
 	private final Map<String, String> tokenNameToValue = new HashMap<String, String>();
 	
 	{
		tokenNameToValue.put("LeftParenthesis", "'('");
		tokenNameToValue.put("RightParenthesis", "')'");
		tokenNameToValue.put("Asterisk", "'*'");
		tokenNameToValue.put("Comma", "','");
		tokenNameToValue.put("FullStop", "'.'");
		tokenNameToValue.put("Solidus", "'/'");
		tokenNameToValue.put("EqualsSign", "'='");
		tokenNameToValue.put("LeftSquareBracket", "'['");
		tokenNameToValue.put("Backslash", "'\\'");
		tokenNameToValue.put("RightSquareBracket", "']'");
		tokenNameToValue.put("LeftCurlyBracket", "'{'");
		tokenNameToValue.put("RightCurlyBracket", "'}'");
		tokenNameToValue.put("FILE_HEADER", "'FILE_HEADER'");
		tokenNameToValue.put("END_FILE_HEADER", "'END_FILE_HEADER'");
 	}
 	
    public void setGrammarAccess(SpellDatabaseGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }

	@Override
    protected String getValueForTokenName(String tokenName) {
    	String result = tokenNameToValue.get(tokenName);
    	if (result == null)
    		result = tokenName;
    	return result;
    }
}




// Entry rule entryRuleSpellDatabase
entryRuleSpellDatabase 
@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ANY_OTHER", "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT");
}
:
{ before(grammarAccess.getSpellDatabaseRule()); }
	 ruleSpellDatabase
{ after(grammarAccess.getSpellDatabaseRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule SpellDatabase
ruleSpellDatabase 
    @init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ANY_OTHER", "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT");
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getSpellDatabaseAccess().getGroup()); }
(rule__SpellDatabase__Group__0)
{ after(grammarAccess.getSpellDatabaseAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}



// Entry rule entryRuleAstriumDatabase
entryRuleAstriumDatabase 
@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT");
}
:
{ before(grammarAccess.getAstriumDatabaseRule()); }
	 ruleAstriumDatabase
{ after(grammarAccess.getAstriumDatabaseRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule AstriumDatabase
ruleAstriumDatabase 
    @init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT");
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getAstriumDatabaseAccess().getGroup()); }
(rule__AstriumDatabase__Group__0)
{ after(grammarAccess.getAstriumDatabaseAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}



// Entry rule entryRuleAstriumVariableEntry
entryRuleAstriumVariableEntry 
@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT");
}
:
{ before(grammarAccess.getAstriumVariableEntryRule()); }
	 ruleAstriumVariableEntry
{ after(grammarAccess.getAstriumVariableEntryRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule AstriumVariableEntry
ruleAstriumVariableEntry 
    @init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT");
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getAstriumVariableEntryAccess().getAlternatives()); }
(rule__AstriumVariableEntry__Alternatives)
{ after(grammarAccess.getAstriumVariableEntryAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}



// Entry rule entryRuleAstriumHeaderEntry
entryRuleAstriumHeaderEntry 
@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT");
}
:
{ before(grammarAccess.getAstriumHeaderEntryRule()); }
	 ruleAstriumHeaderEntry
{ after(grammarAccess.getAstriumHeaderEntryRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule AstriumHeaderEntry
ruleAstriumHeaderEntry 
    @init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT");
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getAstriumHeaderEntryAccess().getAlternatives()); }
(rule__AstriumHeaderEntry__Alternatives)
{ after(grammarAccess.getAstriumHeaderEntryAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}



// Entry rule entryRuleSkipNLAndComments2
entryRuleSkipNLAndComments2 
@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT");
}
:
{ before(grammarAccess.getSkipNLAndComments2Rule()); }
	 ruleSkipNLAndComments2
{ after(grammarAccess.getSkipNLAndComments2Rule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule SkipNLAndComments2
ruleSkipNLAndComments2 
    @init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT");
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getSkipNLAndComments2Access().getGroup()); }
(rule__SkipNLAndComments2__Group__0)
{ after(grammarAccess.getSkipNLAndComments2Access().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}



// Entry rule entryRuleSkipNLAndComments
entryRuleSkipNLAndComments 
@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
}
:
{ before(grammarAccess.getSkipNLAndCommentsRule()); }
	 ruleSkipNLAndComments
{ after(grammarAccess.getSkipNLAndCommentsRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule SkipNLAndComments
ruleSkipNLAndComments 
    @init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getSkipNLAndCommentsAccess().getAlternatives()); }
(rule__SkipNLAndComments__Alternatives)*
{ after(grammarAccess.getSkipNLAndCommentsAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}



// Entry rule entryRuleCSVEntry
entryRuleCSVEntry 
:
{ before(grammarAccess.getCSVEntryRule()); }
	 ruleCSVEntry
{ after(grammarAccess.getCSVEntryRule()); } 
	 EOF 
;

// Rule CSVEntry
ruleCSVEntry 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getCSVEntryAccess().getAlternatives()); }
(rule__CSVEntry__Alternatives)
{ after(grammarAccess.getCSVEntryAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCSVCommand
entryRuleCSVCommand 
@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT");
}
:
{ before(grammarAccess.getCSVCommandRule()); }
	 ruleCSVCommand
{ after(grammarAccess.getCSVCommandRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule CSVCommand
ruleCSVCommand 
    @init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT");
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getCSVCommandAccess().getGroup()); }
(rule__CSVCommand__Group__0)
{ after(grammarAccess.getCSVCommandAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}



// Entry rule entryRuleTCArgs
entryRuleTCArgs 
@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT");
}
:
{ before(grammarAccess.getTCArgsRule()); }
	 ruleTCArgs
{ after(grammarAccess.getTCArgsRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule TCArgs
ruleTCArgs 
    @init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT");
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getTCArgsAccess().getGroup()); }
(rule__TCArgs__Group__0)
{ after(grammarAccess.getTCArgsAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}



// Entry rule entryRuleTCValue
entryRuleTCValue 
@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT");
}
:
{ before(grammarAccess.getTCValueRule()); }
	 ruleTCValue
{ after(grammarAccess.getTCValueRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule TCValue
ruleTCValue 
    @init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT");
		int stackSize = keepStackSize();
    }
    :
(
(
{ before(grammarAccess.getTCValueAccess().getAlternatives()); }
(rule__TCValue__Alternatives)
{ after(grammarAccess.getTCValueAccess().getAlternatives()); }
)
(
{ before(grammarAccess.getTCValueAccess().getAlternatives()); }
(rule__TCValue__Alternatives)*
{ after(grammarAccess.getTCValueAccess().getAlternatives()); }
)
)

;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}



// Entry rule entryRuleKeyValue
entryRuleKeyValue 
@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT");
}
:
{ before(grammarAccess.getKeyValueRule()); }
	 ruleKeyValue
{ after(grammarAccess.getKeyValueRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule KeyValue
ruleKeyValue 
    @init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT");
		int stackSize = keepStackSize();
    }
    :
(
(
{ before(grammarAccess.getKeyValueAccess().getAlternatives()); }
(rule__KeyValue__Alternatives)
{ after(grammarAccess.getKeyValueAccess().getAlternatives()); }
)
(
{ before(grammarAccess.getKeyValueAccess().getAlternatives()); }
(rule__KeyValue__Alternatives)*
{ after(grammarAccess.getKeyValueAccess().getAlternatives()); }
)
)

;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}



// Entry rule entryRuleCSVTelemetry
entryRuleCSVTelemetry 
@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT");
}
:
{ before(grammarAccess.getCSVTelemetryRule()); }
	 ruleCSVTelemetry
{ after(grammarAccess.getCSVTelemetryRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule CSVTelemetry
ruleCSVTelemetry 
    @init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT");
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getCSVTelemetryAccess().getGroup()); }
(rule__CSVTelemetry__Group__0)
{ after(grammarAccess.getCSVTelemetryAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}



// Entry rule entryRuleCSVSpell
entryRuleCSVSpell 
@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT");
}
:
{ before(grammarAccess.getCSVSpellRule()); }
	 ruleCSVSpell
{ after(grammarAccess.getCSVSpellRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule CSVSpell
ruleCSVSpell 
    @init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT");
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getCSVSpellAccess().getGroup()); }
(rule__CSVSpell__Group__0)
{ after(grammarAccess.getCSVSpellAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}



// Entry rule entryRuleSpellCommand
entryRuleSpellCommand 
@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT");
}
:
{ before(grammarAccess.getSpellCommandRule()); }
	 ruleSpellCommand
{ after(grammarAccess.getSpellCommandRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule SpellCommand
ruleSpellCommand 
    @init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT");
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getSpellCommandAccess().getAlternatives()); }
(rule__SpellCommand__Alternatives)
{ after(grammarAccess.getSpellCommandAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}



// Entry rule entryRuleIntOrFloat
entryRuleIntOrFloat 
:
{ before(grammarAccess.getIntOrFloatRule()); }
	 ruleIntOrFloat
{ after(grammarAccess.getIntOrFloatRule()); } 
	 EOF 
;

// Rule IntOrFloat
ruleIntOrFloat 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getIntOrFloatAccess().getAlternatives()); }
(rule__IntOrFloat__Alternatives)
{ after(grammarAccess.getIntOrFloatAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePosIntOrFloat
entryRulePosIntOrFloat 
:
{ before(grammarAccess.getPosIntOrFloatRule()); }
	 rulePosIntOrFloat
{ after(grammarAccess.getPosIntOrFloatRule()); } 
	 EOF 
;

// Rule PosIntOrFloat
rulePosIntOrFloat 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getPosIntOrFloatAccess().getAlternatives()); }
(rule__PosIntOrFloat__Alternatives)
{ after(grammarAccess.getPosIntOrFloatAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDatabaseEntry
entryRuleDatabaseEntry 
@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT");
}
:
{ before(grammarAccess.getDatabaseEntryRule()); }
	 ruleDatabaseEntry
{ after(grammarAccess.getDatabaseEntryRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule DatabaseEntry
ruleDatabaseEntry 
    @init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT");
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getDatabaseEntryAccess().getGroup()); }
(rule__DatabaseEntry__Group__0)
{ after(grammarAccess.getDatabaseEntryAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}



// Entry rule entryRuleDatabaseValue
entryRuleDatabaseValue 
:
{ before(grammarAccess.getDatabaseValueRule()); }
	 ruleDatabaseValue
{ after(grammarAccess.getDatabaseValueRule()); } 
	 EOF 
;

// Rule DatabaseValue
ruleDatabaseValue 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getDatabaseValueAccess().getAlternatives()); }
(rule__DatabaseValue__Alternatives)
{ after(grammarAccess.getDatabaseValueAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLambda_Stmt
entryRuleLambda_Stmt 
:
{ before(grammarAccess.getLambda_StmtRule()); }
	 ruleLambda_Stmt
{ after(grammarAccess.getLambda_StmtRule()); } 
	 EOF 
;

// Rule Lambda_Stmt
ruleLambda_Stmt 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getLambda_StmtAccess().getGroup()); }
(rule__Lambda_Stmt__Group__0)
{ after(grammarAccess.getLambda_StmtAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLambda_Function
entryRuleLambda_Function 
@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ANY_OTHER", "RULE_WS");
}
:
{ before(grammarAccess.getLambda_FunctionRule()); }
	 ruleLambda_Function
{ after(grammarAccess.getLambda_FunctionRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule Lambda_Function
ruleLambda_Function 
    @init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ANY_OTHER", "RULE_WS");
		int stackSize = keepStackSize();
    }
    :
(
(
{ before(grammarAccess.getLambda_FunctionAccess().getLambda_Partial_FuncParserRuleCall()); }
(	ruleLambda_Partial_Func)
{ after(grammarAccess.getLambda_FunctionAccess().getLambda_Partial_FuncParserRuleCall()); }
)
(
{ before(grammarAccess.getLambda_FunctionAccess().getLambda_Partial_FuncParserRuleCall()); }
(	ruleLambda_Partial_Func)*
{ after(grammarAccess.getLambda_FunctionAccess().getLambda_Partial_FuncParserRuleCall()); }
)
)

;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}



// Entry rule entryRuleLambda_Partial_Func
entryRuleLambda_Partial_Func 
@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ANY_OTHER", "RULE_WS");
}
:
{ before(grammarAccess.getLambda_Partial_FuncRule()); }
	 ruleLambda_Partial_Func
{ after(grammarAccess.getLambda_Partial_FuncRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule Lambda_Partial_Func
ruleLambda_Partial_Func 
    @init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ANY_OTHER", "RULE_WS");
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getLambda_Partial_FuncAccess().getAlternatives()); }
(rule__Lambda_Partial_Func__Alternatives)
{ after(grammarAccess.getLambda_Partial_FuncAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}



// Entry rule entryRuleLambda_Vars
entryRuleLambda_Vars 
@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ANY_OTHER", "RULE_WS");
}
:
{ before(grammarAccess.getLambda_VarsRule()); }
	 ruleLambda_Vars
{ after(grammarAccess.getLambda_VarsRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule Lambda_Vars
ruleLambda_Vars 
    @init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ANY_OTHER", "RULE_WS");
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getLambda_VarsAccess().getGroup()); }
(rule__Lambda_Vars__Group__0)
{ after(grammarAccess.getLambda_VarsAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}



// Entry rule entryRuleComplexValue
entryRuleComplexValue 
:
{ before(grammarAccess.getComplexValueRule()); }
	 ruleComplexValue
{ after(grammarAccess.getComplexValueRule()); } 
	 EOF 
;

// Rule ComplexValue
ruleComplexValue 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getComplexValueAccess().getAlternatives()); }
(rule__ComplexValue__Alternatives)
{ after(grammarAccess.getComplexValueAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTuple
entryRuleTuple 
@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT");
}
:
{ before(grammarAccess.getTupleRule()); }
	 ruleTuple
{ after(grammarAccess.getTupleRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule Tuple
ruleTuple 
    @init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT");
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getTupleAccess().getGroup()); }
(rule__Tuple__Group__0)
{ after(grammarAccess.getTupleAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}



// Entry rule entryRuleList
entryRuleList 
@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT");
}
:
{ before(grammarAccess.getListRule()); }
	 ruleList
{ after(grammarAccess.getListRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule List
ruleList 
    @init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT");
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getListAccess().getGroup()); }
(rule__List__Group__0)
{ after(grammarAccess.getListAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}



// Entry rule entryRuleDictionary
entryRuleDictionary 
@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT");
}
:
{ before(grammarAccess.getDictionaryRule()); }
	 ruleDictionary
{ after(grammarAccess.getDictionaryRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule Dictionary
ruleDictionary 
    @init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT");
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getDictionaryAccess().getGroup()); }
(rule__Dictionary__Group__0)
{ after(grammarAccess.getDictionaryAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}



// Entry rule entryRuleDictionaryEntry
entryRuleDictionaryEntry 
@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT");
}
:
{ before(grammarAccess.getDictionaryEntryRule()); }
	 ruleDictionaryEntry
{ after(grammarAccess.getDictionaryEntryRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule DictionaryEntry
ruleDictionaryEntry 
    @init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT");
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getDictionaryEntryAccess().getGroup()); }
(rule__DictionaryEntry__Group__0)
{ after(grammarAccess.getDictionaryEntryAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}



// Entry rule entryRuleAtom
entryRuleAtom 
:
{ before(grammarAccess.getAtomRule()); }
	 ruleAtom
{ after(grammarAccess.getAtomRule()); } 
	 EOF 
;

// Rule Atom
ruleAtom 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getAtomAccess().getAlternatives()); }
(rule__Atom__Alternatives)
{ after(grammarAccess.getAtomAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRelDate
entryRuleRelDate 
:
{ before(grammarAccess.getRelDateRule()); }
	 ruleRelDate
{ after(grammarAccess.getRelDateRule()); } 
	 EOF 
;

// Rule RelDate
ruleRelDate 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getRelDateAccess().getValAssignment()); }
(rule__RelDate__ValAssignment)
{ after(grammarAccess.getRelDateAccess().getValAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDate
entryRuleDate 
:
{ before(grammarAccess.getDateRule()); }
	 ruleDate
{ after(grammarAccess.getDateRule()); } 
	 EOF 
;

// Rule Date
ruleDate 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getDateAccess().getValAssignment()); }
(rule__Date__ValAssignment)
{ after(grammarAccess.getDateAccess().getValAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBoolean
entryRuleBoolean 
:
{ before(grammarAccess.getBooleanRule()); }
	 ruleBoolean
{ after(grammarAccess.getBooleanRule()); } 
	 EOF 
;

// Rule Boolean
ruleBoolean 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getBooleanAccess().getValAssignment()); }
(rule__Boolean__ValAssignment)
{ after(grammarAccess.getBooleanAccess().getValAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStringValue
entryRuleStringValue 
:
{ before(grammarAccess.getStringValueRule()); }
	 ruleStringValue
{ after(grammarAccess.getStringValueRule()); } 
	 EOF 
;

// Rule StringValue
ruleStringValue 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getStringValueAccess().getValAssignment()); }
(rule__StringValue__ValAssignment)
{ after(grammarAccess.getStringValueAccess().getValAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNumber
entryRuleNumber 
:
{ before(grammarAccess.getNumberRule()); }
	 ruleNumber
{ after(grammarAccess.getNumberRule()); } 
	 EOF 
;

// Rule Number
ruleNumber 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getNumberAccess().getAlternatives()); }
(rule__Number__Alternatives)
{ after(grammarAccess.getNumberAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFLOAT_Val
entryRuleFLOAT_Val 
@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
}
:
{ before(grammarAccess.getFLOAT_ValRule()); }
	 ruleFLOAT_Val
{ after(grammarAccess.getFLOAT_ValRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule FLOAT_Val
ruleFLOAT_Val 
    @init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getFLOAT_ValAccess().getGroup()); }
(rule__FLOAT_Val__Group__0)
{ after(grammarAccess.getFLOAT_ValAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}



// Entry rule entryRuleSkipped_NL
entryRuleSkipped_NL 
@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
}
:
{ before(grammarAccess.getSkipped_NLRule()); }
	 ruleSkipped_NL
{ after(grammarAccess.getSkipped_NLRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule Skipped_NL
ruleSkipped_NL 
    @init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getSkipped_NLAccess().getGroup()); }
(rule__Skipped_NL__Group__0)*
{ after(grammarAccess.getSkipped_NLAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}



// Entry rule entryRuleRELTIME
entryRuleRELTIME 
@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
}
:
{ before(grammarAccess.getRELTIMERule()); }
	 ruleRELTIME
{ after(grammarAccess.getRELTIMERule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule RELTIME
ruleRELTIME 
    @init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getRELTIMEAccess().getGroup()); }
(rule__RELTIME__Group__0)
{ after(grammarAccess.getRELTIMEAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}



// Entry rule entryRuleABSTIME
entryRuleABSTIME 
@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
}
:
{ before(grammarAccess.getABSTIMERule()); }
	 ruleABSTIME
{ after(grammarAccess.getABSTIMERule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule ABSTIME
ruleABSTIME 
    @init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getABSTIMEAccess().getAlternatives()); }
(rule__ABSTIME__Alternatives)
{ after(grammarAccess.getABSTIMEAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}



// Entry rule entryRuleSINGLE_VALUE
entryRuleSINGLE_VALUE 
@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
}
:
{ before(grammarAccess.getSINGLE_VALUERule()); }
	 ruleSINGLE_VALUE
{ after(grammarAccess.getSINGLE_VALUERule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule SINGLE_VALUE
ruleSINGLE_VALUE 
    @init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
		int stackSize = keepStackSize();
    }
    :
(
(
{ before(grammarAccess.getSINGLE_VALUEAccess().getAlternatives()); }
(rule__SINGLE_VALUE__Alternatives)
{ after(grammarAccess.getSINGLE_VALUEAccess().getAlternatives()); }
)
(
{ before(grammarAccess.getSINGLE_VALUEAccess().getAlternatives()); }
(rule__SINGLE_VALUE__Alternatives)*
{ after(grammarAccess.getSINGLE_VALUEAccess().getAlternatives()); }
)
)

;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}



// Entry rule entryRuleID_STMT
entryRuleID_STMT 
@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
}
:
{ before(grammarAccess.getID_STMTRule()); }
	 ruleID_STMT
{ after(grammarAccess.getID_STMTRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule ID_STMT
ruleID_STMT 
    @init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getID_STMTAccess().getGroup()); }
(rule__ID_STMT__Group__0)
{ after(grammarAccess.getID_STMTAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}



// Entry rule entryRuleASTRIUM_ID
entryRuleASTRIUM_ID 
@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
}
:
{ before(grammarAccess.getASTRIUM_IDRule()); }
	 ruleASTRIUM_ID
{ after(grammarAccess.getASTRIUM_IDRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule ASTRIUM_ID
ruleASTRIUM_ID 
    @init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getASTRIUM_IDAccess().getGroup()); }
(rule__ASTRIUM_ID__Group__0)
{ after(grammarAccess.getASTRIUM_IDAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}



// Entry rule entryRuleASTRIUM_TIME
entryRuleASTRIUM_TIME 
@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
}
:
{ before(grammarAccess.getASTRIUM_TIMERule()); }
	 ruleASTRIUM_TIME
{ after(grammarAccess.getASTRIUM_TIMERule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule ASTRIUM_TIME
ruleASTRIUM_TIME 
    @init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getASTRIUM_TIMEAccess().getGroup()); }
(rule__ASTRIUM_TIME__Group__0)
{ after(grammarAccess.getASTRIUM_TIMEAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}



// Entry rule entryRuleINTEGER
entryRuleINTEGER 
@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
}
:
{ before(grammarAccess.getINTEGERRule()); }
	 ruleINTEGER
{ after(grammarAccess.getINTEGERRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule INTEGER
ruleINTEGER 
    @init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getINTEGERAccess().getGroup()); }
(rule__INTEGER__Group__0)
{ after(grammarAccess.getINTEGERAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}




rule__SpellDatabase__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSpellDatabaseAccess().getGroup_1_0()); }
(rule__SpellDatabase__Group_1_0__0)
{ after(grammarAccess.getSpellDatabaseAccess().getGroup_1_0()); }
)

    |(
{ before(grammarAccess.getSpellDatabaseAccess().getGroup_1_1()); }
(rule__SpellDatabase__Group_1_1__0)
{ after(grammarAccess.getSpellDatabaseAccess().getGroup_1_1()); }
)

    |(
{ before(grammarAccess.getSpellDatabaseAccess().getGroup_1_2()); }
(rule__SpellDatabase__Group_1_2__0)
{ after(grammarAccess.getSpellDatabaseAccess().getGroup_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AstriumVariableEntry__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAstriumVariableEntryAccess().getGroup_0()); }
(rule__AstriumVariableEntry__Group_0__0)
{ after(grammarAccess.getAstriumVariableEntryAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getAstriumVariableEntryAccess().getGroup_1()); }
(rule__AstriumVariableEntry__Group_1__0)
{ after(grammarAccess.getAstriumVariableEntryAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AstriumVariableEntry__Alternatives_1_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAstriumVariableEntryAccess().getAstriumTimeAssignment_1_5_0()); }
(rule__AstriumVariableEntry__AstriumTimeAssignment_1_5_0)
{ after(grammarAccess.getAstriumVariableEntryAccess().getAstriumTimeAssignment_1_5_0()); }
)

    |(
{ before(grammarAccess.getAstriumVariableEntryAccess().getValueAssignment_1_5_1()); }
(rule__AstriumVariableEntry__ValueAssignment_1_5_1)
{ after(grammarAccess.getAstriumVariableEntryAccess().getValueAssignment_1_5_1()); }
)

    |(
{ before(grammarAccess.getAstriumVariableEntryAccess().getSimpleValueAssignment_1_5_2()); }
(rule__AstriumVariableEntry__SimpleValueAssignment_1_5_2)
{ after(grammarAccess.getAstriumVariableEntryAccess().getSimpleValueAssignment_1_5_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AstriumHeaderEntry__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAstriumHeaderEntryAccess().getGroup_0()); }
(rule__AstriumHeaderEntry__Group_0__0)
{ after(grammarAccess.getAstriumHeaderEntryAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getAstriumHeaderEntryAccess().getGroup_1()); }
(rule__AstriumHeaderEntry__Group_1__0)
{ after(grammarAccess.getAstriumHeaderEntryAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AstriumHeaderEntry__Alternatives_1_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAstriumHeaderEntryAccess().getAstriumTimeAssignment_1_4_0()); }
(rule__AstriumHeaderEntry__AstriumTimeAssignment_1_4_0)
{ after(grammarAccess.getAstriumHeaderEntryAccess().getAstriumTimeAssignment_1_4_0()); }
)

    |(
{ before(grammarAccess.getAstriumHeaderEntryAccess().getValueAssignment_1_4_1()); }
(rule__AstriumHeaderEntry__ValueAssignment_1_4_1)
{ after(grammarAccess.getAstriumHeaderEntryAccess().getValueAssignment_1_4_1()); }
)

    |(
{ before(grammarAccess.getAstriumHeaderEntryAccess().getSimpleValueAssignment_1_4_2()); }
(rule__AstriumHeaderEntry__SimpleValueAssignment_1_4_2)
{ after(grammarAccess.getAstriumHeaderEntryAccess().getSimpleValueAssignment_1_4_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SkipNLAndComments__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSkipNLAndCommentsAccess().getWSTerminalRuleCall_0()); }
	RULE_WS
{ after(grammarAccess.getSkipNLAndCommentsAccess().getWSTerminalRuleCall_0()); }
)

    |(
{ before(grammarAccess.getSkipNLAndCommentsAccess().getML_COMMENTTerminalRuleCall_1()); }
	RULE_ML_COMMENT
{ after(grammarAccess.getSkipNLAndCommentsAccess().getML_COMMENTTerminalRuleCall_1()); }
)

    |(
{ before(grammarAccess.getSkipNLAndCommentsAccess().getSL_COMMENTTerminalRuleCall_2()); }
	RULE_SL_COMMENT
{ after(grammarAccess.getSkipNLAndCommentsAccess().getSL_COMMENTTerminalRuleCall_2()); }
)

    |(
{ before(grammarAccess.getSkipNLAndCommentsAccess().getNLTerminalRuleCall_3()); }
	RULE_NL
{ after(grammarAccess.getSkipNLAndCommentsAccess().getNLTerminalRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CSVEntry__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCSVEntryAccess().getCSVCommandParserRuleCall_0()); }
	ruleCSVCommand
{ after(grammarAccess.getCSVEntryAccess().getCSVCommandParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getCSVEntryAccess().getCSVTelemetryParserRuleCall_1()); }
	ruleCSVTelemetry
{ after(grammarAccess.getCSVEntryAccess().getCSVTelemetryParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getCSVEntryAccess().getCSVSpellParserRuleCall_2()); }
	ruleCSVSpell
{ after(grammarAccess.getCSVEntryAccess().getCSVSpellParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TCValue__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTCValueAccess().getID_STMTParserRuleCall_0()); }
	ruleID_STMT
{ after(grammarAccess.getTCValueAccess().getID_STMTParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getTCValueAccess().getBIN_HEX_OCTTerminalRuleCall_1()); }
	RULE_BIN_HEX_OCT
{ after(grammarAccess.getTCValueAccess().getBIN_HEX_OCTTerminalRuleCall_1()); }
)

    |(
{ before(grammarAccess.getTCValueAccess().getPLUSTerminalRuleCall_2()); }
	RULE_PLUS
{ after(grammarAccess.getTCValueAccess().getPLUSTerminalRuleCall_2()); }
)

    |(
{ before(grammarAccess.getTCValueAccess().getMINUSTerminalRuleCall_3()); }
	RULE_MINUS
{ after(grammarAccess.getTCValueAccess().getMINUSTerminalRuleCall_3()); }
)

    |(
{ before(grammarAccess.getTCValueAccess().getINTEGERParserRuleCall_4()); }
(	ruleINTEGER)
{ after(grammarAccess.getTCValueAccess().getINTEGERParserRuleCall_4()); }
)

    |(
{ before(grammarAccess.getTCValueAccess().getFLOATTerminalRuleCall_5()); }
(	RULE_FLOAT)
{ after(grammarAccess.getTCValueAccess().getFLOATTerminalRuleCall_5()); }
)

    |(
{ before(grammarAccess.getTCValueAccess().getAsteriskKeyword_6()); }

	Asterisk 

{ after(grammarAccess.getTCValueAccess().getAsteriskKeyword_6()); }
)

    |(
{ before(grammarAccess.getTCValueAccess().getBOOL_EXPRTerminalRuleCall_7()); }
	RULE_BOOL_EXPR
{ after(grammarAccess.getTCValueAccess().getBOOL_EXPRTerminalRuleCall_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__KeyValue__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getKeyValueAccess().getID_STMTParserRuleCall_0()); }
	ruleID_STMT
{ after(grammarAccess.getKeyValueAccess().getID_STMTParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getKeyValueAccess().getBIN_HEX_OCTTerminalRuleCall_1()); }
	RULE_BIN_HEX_OCT
{ after(grammarAccess.getKeyValueAccess().getBIN_HEX_OCTTerminalRuleCall_1()); }
)

    |(
{ before(grammarAccess.getKeyValueAccess().getPLUSTerminalRuleCall_2()); }
	RULE_PLUS
{ after(grammarAccess.getKeyValueAccess().getPLUSTerminalRuleCall_2()); }
)

    |(
{ before(grammarAccess.getKeyValueAccess().getMINUSTerminalRuleCall_3()); }
	RULE_MINUS
{ after(grammarAccess.getKeyValueAccess().getMINUSTerminalRuleCall_3()); }
)

    |(
{ before(grammarAccess.getKeyValueAccess().getINTEGERParserRuleCall_4()); }
(	ruleINTEGER)
{ after(grammarAccess.getKeyValueAccess().getINTEGERParserRuleCall_4()); }
)

    |(
{ before(grammarAccess.getKeyValueAccess().getFLOATTerminalRuleCall_5()); }
(	RULE_FLOAT)
{ after(grammarAccess.getKeyValueAccess().getFLOATTerminalRuleCall_5()); }
)

    |(
{ before(grammarAccess.getKeyValueAccess().getAsteriskKeyword_6()); }

	Asterisk 

{ after(grammarAccess.getKeyValueAccess().getAsteriskKeyword_6()); }
)

    |(
{ before(grammarAccess.getKeyValueAccess().getSTRINGTerminalRuleCall_7()); }
(	RULE_STRING)
{ after(grammarAccess.getKeyValueAccess().getSTRINGTerminalRuleCall_7()); }
)

    |(
{ before(grammarAccess.getKeyValueAccess().getBOOL_EXPRTerminalRuleCall_8()); }
	RULE_BOOL_EXPR
{ after(grammarAccess.getKeyValueAccess().getBOOL_EXPRTerminalRuleCall_8()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SpellCommand__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSpellCommandAccess().getGroup_0()); }
(rule__SpellCommand__Group_0__0)
{ after(grammarAccess.getSpellCommandAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getSpellCommandAccess().getGroup_1()); }
(rule__SpellCommand__Group_1__0)
{ after(grammarAccess.getSpellCommandAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IntOrFloat__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntOrFloatAccess().getFLOAT_ValParserRuleCall_0()); }
	ruleFLOAT_Val
{ after(grammarAccess.getIntOrFloatAccess().getFLOAT_ValParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getIntOrFloatAccess().getINTEGERParserRuleCall_1()); }
	ruleINTEGER
{ after(grammarAccess.getIntOrFloatAccess().getINTEGERParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PosIntOrFloat__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPosIntOrFloatAccess().getFLOATTerminalRuleCall_0()); }
	RULE_FLOAT
{ after(grammarAccess.getPosIntOrFloatAccess().getFLOATTerminalRuleCall_0()); }
)

    |(
{ before(grammarAccess.getPosIntOrFloatAccess().getINTTerminalRuleCall_1()); }
	RULE_INT
{ after(grammarAccess.getPosIntOrFloatAccess().getINTTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DatabaseValue__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDatabaseValueAccess().getComplexValueParserRuleCall_0()); }
	ruleComplexValue
{ after(grammarAccess.getDatabaseValueAccess().getComplexValueParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getDatabaseValueAccess().getRelDateParserRuleCall_1()); }
(	ruleRelDate)
{ after(grammarAccess.getDatabaseValueAccess().getRelDateParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getDatabaseValueAccess().getDateParserRuleCall_2()); }
(	ruleDate)
{ after(grammarAccess.getDatabaseValueAccess().getDateParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getDatabaseValueAccess().getAtomParserRuleCall_3()); }
(	ruleAtom)
{ after(grammarAccess.getDatabaseValueAccess().getAtomParserRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Lambda_Partial_Func__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLambda_Partial_FuncAccess().getAlternatives_0()); }
(rule__Lambda_Partial_Func__Alternatives_0)
{ after(grammarAccess.getLambda_Partial_FuncAccess().getAlternatives_0()); }
)

    |(
{ before(grammarAccess.getLambda_Partial_FuncAccess().getGroup_1()); }
(rule__Lambda_Partial_Func__Group_1__0)
{ after(grammarAccess.getLambda_Partial_FuncAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Lambda_Partial_Func__Alternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLambda_Partial_FuncAccess().getIDTerminalRuleCall_0_0()); }
	RULE_ID
{ after(grammarAccess.getLambda_Partial_FuncAccess().getIDTerminalRuleCall_0_0()); }
)

    |(
{ before(grammarAccess.getLambda_Partial_FuncAccess().getFLOATTerminalRuleCall_0_1()); }
	RULE_FLOAT
{ after(grammarAccess.getLambda_Partial_FuncAccess().getFLOATTerminalRuleCall_0_1()); }
)

    |(
{ before(grammarAccess.getLambda_Partial_FuncAccess().getINTTerminalRuleCall_0_2()); }
	RULE_INT
{ after(grammarAccess.getLambda_Partial_FuncAccess().getINTTerminalRuleCall_0_2()); }
)

    |(
{ before(grammarAccess.getLambda_Partial_FuncAccess().getPLUSTerminalRuleCall_0_3()); }
	RULE_PLUS
{ after(grammarAccess.getLambda_Partial_FuncAccess().getPLUSTerminalRuleCall_0_3()); }
)

    |(
{ before(grammarAccess.getLambda_Partial_FuncAccess().getMINUSTerminalRuleCall_0_4()); }
	RULE_MINUS
{ after(grammarAccess.getLambda_Partial_FuncAccess().getMINUSTerminalRuleCall_0_4()); }
)

    |(
{ before(grammarAccess.getLambda_Partial_FuncAccess().getML_COMMENTTerminalRuleCall_0_5()); }
	RULE_ML_COMMENT
{ after(grammarAccess.getLambda_Partial_FuncAccess().getML_COMMENTTerminalRuleCall_0_5()); }
)

    |(
{ before(grammarAccess.getLambda_Partial_FuncAccess().getBIN_HEX_OCTTerminalRuleCall_0_6()); }
	RULE_BIN_HEX_OCT
{ after(grammarAccess.getLambda_Partial_FuncAccess().getBIN_HEX_OCTTerminalRuleCall_0_6()); }
)

    |(
{ before(grammarAccess.getLambda_Partial_FuncAccess().getBOOL_EXPRTerminalRuleCall_0_7()); }
	RULE_BOOL_EXPR
{ after(grammarAccess.getLambda_Partial_FuncAccess().getBOOL_EXPRTerminalRuleCall_0_7()); }
)

    |(
{ before(grammarAccess.getLambda_Partial_FuncAccess().getSTRINGTerminalRuleCall_0_8()); }
	RULE_STRING
{ after(grammarAccess.getLambda_Partial_FuncAccess().getSTRINGTerminalRuleCall_0_8()); }
)

    |(
{ before(grammarAccess.getLambda_Partial_FuncAccess().getANY_OTHERTerminalRuleCall_0_9()); }
	RULE_ANY_OTHER
{ after(grammarAccess.getLambda_Partial_FuncAccess().getANY_OTHERTerminalRuleCall_0_9()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ComplexValue__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComplexValueAccess().getDictionaryParserRuleCall_0()); }
	ruleDictionary
{ after(grammarAccess.getComplexValueAccess().getDictionaryParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getComplexValueAccess().getListParserRuleCall_1()); }
	ruleList
{ after(grammarAccess.getComplexValueAccess().getListParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getComplexValueAccess().getTupleParserRuleCall_2()); }
	ruleTuple
{ after(grammarAccess.getComplexValueAccess().getTupleParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Tuple__ValuesAlternatives_2_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTupleAccess().getValuesAtomParserRuleCall_2_1_0_0()); }
	ruleAtom
{ after(grammarAccess.getTupleAccess().getValuesAtomParserRuleCall_2_1_0_0()); }
)

    |(
{ before(grammarAccess.getTupleAccess().getValuesComplexValueParserRuleCall_2_1_0_1()); }
	ruleComplexValue
{ after(grammarAccess.getTupleAccess().getValuesComplexValueParserRuleCall_2_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Tuple__ValuesAlternatives_2_3_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTupleAccess().getValuesAtomParserRuleCall_2_3_2_0_0()); }
	ruleAtom
{ after(grammarAccess.getTupleAccess().getValuesAtomParserRuleCall_2_3_2_0_0()); }
)

    |(
{ before(grammarAccess.getTupleAccess().getValuesComplexValueParserRuleCall_2_3_2_0_1()); }
	ruleComplexValue
{ after(grammarAccess.getTupleAccess().getValuesComplexValueParserRuleCall_2_3_2_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__List__ValuesAlternatives_2_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getListAccess().getValuesAtomParserRuleCall_2_1_0_0()); }
	ruleAtom
{ after(grammarAccess.getListAccess().getValuesAtomParserRuleCall_2_1_0_0()); }
)

    |(
{ before(grammarAccess.getListAccess().getValuesComplexValueParserRuleCall_2_1_0_1()); }
	ruleComplexValue
{ after(grammarAccess.getListAccess().getValuesComplexValueParserRuleCall_2_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__List__ValuesAlternatives_2_3_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getListAccess().getValuesAtomParserRuleCall_2_3_2_0_0()); }
	ruleAtom
{ after(grammarAccess.getListAccess().getValuesAtomParserRuleCall_2_3_2_0_0()); }
)

    |(
{ before(grammarAccess.getListAccess().getValuesComplexValueParserRuleCall_2_3_2_0_1()); }
	ruleComplexValue
{ after(grammarAccess.getListAccess().getValuesComplexValueParserRuleCall_2_3_2_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DictionaryEntry__KeyAlternatives_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDictionaryEntryAccess().getKeyAtomParserRuleCall_0_0_0()); }
	ruleAtom
{ after(grammarAccess.getDictionaryEntryAccess().getKeyAtomParserRuleCall_0_0_0()); }
)

    |(
{ before(grammarAccess.getDictionaryEntryAccess().getKeyComplexValueParserRuleCall_0_0_1()); }
	ruleComplexValue
{ after(grammarAccess.getDictionaryEntryAccess().getKeyComplexValueParserRuleCall_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DictionaryEntry__ValueAlternatives_2_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDictionaryEntryAccess().getValueAtomParserRuleCall_2_2_0_0()); }
	ruleAtom
{ after(grammarAccess.getDictionaryEntryAccess().getValueAtomParserRuleCall_2_2_0_0()); }
)

    |(
{ before(grammarAccess.getDictionaryEntryAccess().getValueComplexValueParserRuleCall_2_2_0_1()); }
	ruleComplexValue
{ after(grammarAccess.getDictionaryEntryAccess().getValueComplexValueParserRuleCall_2_2_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomAccess().getNumberParserRuleCall_0()); }
	ruleNumber
{ after(grammarAccess.getAtomAccess().getNumberParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getAtomAccess().getStringValueParserRuleCall_1()); }
	ruleStringValue
{ after(grammarAccess.getAtomAccess().getStringValueParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getAtomAccess().getBooleanParserRuleCall_2()); }
	ruleBoolean
{ after(grammarAccess.getAtomAccess().getBooleanParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getAtomAccess().getLambda_StmtParserRuleCall_3()); }
	ruleLambda_Stmt
{ after(grammarAccess.getAtomAccess().getLambda_StmtParserRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Number__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberAccess().getValAssignment_0()); }
(rule__Number__ValAssignment_0)
{ after(grammarAccess.getNumberAccess().getValAssignment_0()); }
)

    |(
{ before(grammarAccess.getNumberAccess().getValIntAssignment_1()); }
(rule__Number__ValIntAssignment_1)
{ after(grammarAccess.getNumberAccess().getValIntAssignment_1()); }
)

    |(
{ before(grammarAccess.getNumberAccess().getValStrAssignment_2()); }
(rule__Number__ValStrAssignment_2)
{ after(grammarAccess.getNumberAccess().getValStrAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FLOAT_Val__Alternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFLOAT_ValAccess().getPLUSTerminalRuleCall_0_0()); }
	RULE_PLUS
{ after(grammarAccess.getFLOAT_ValAccess().getPLUSTerminalRuleCall_0_0()); }
)

    |(
{ before(grammarAccess.getFLOAT_ValAccess().getMINUSTerminalRuleCall_0_1()); }
	RULE_MINUS
{ after(grammarAccess.getFLOAT_ValAccess().getMINUSTerminalRuleCall_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RELTIME__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRELTIMEAccess().getGroup_1_0()); }
(rule__RELTIME__Group_1_0__0)
{ after(grammarAccess.getRELTIMEAccess().getGroup_1_0()); }
)

    |(
{ before(grammarAccess.getRELTIMEAccess().getGroup_1_1()); }
(rule__RELTIME__Group_1_1__0)
{ after(grammarAccess.getRELTIMEAccess().getGroup_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ABSTIME__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getABSTIMEAccess().getGroup_0()); }
(rule__ABSTIME__Group_0__0)
{ after(grammarAccess.getABSTIMEAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getABSTIMEAccess().getGroup_1()); }
(rule__ABSTIME__Group_1__0)
{ after(grammarAccess.getABSTIMEAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ABSTIME__Alternatives_0_0_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getABSTIMEAccess().getINTTerminalRuleCall_0_0_2_0()); }
	RULE_INT
{ after(grammarAccess.getABSTIMEAccess().getINTTerminalRuleCall_0_0_2_0()); }
)

    |(
{ before(grammarAccess.getABSTIMEAccess().getID_STMTParserRuleCall_0_0_2_1()); }
	ruleID_STMT
{ after(grammarAccess.getABSTIMEAccess().getID_STMTParserRuleCall_0_0_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ABSTIME__Alternatives_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getABSTIMEAccess().getCOLONTerminalRuleCall_0_1_0()); }
	RULE_COLON
{ after(grammarAccess.getABSTIMEAccess().getCOLONTerminalRuleCall_0_1_0()); }
)

    |(
{ before(grammarAccess.getABSTIMEAccess().getWSTerminalRuleCall_0_1_1()); }
	RULE_WS
{ after(grammarAccess.getABSTIMEAccess().getWSTerminalRuleCall_0_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ABSTIME__Alternatives_1_0_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getABSTIMEAccess().getINTTerminalRuleCall_1_0_2_0()); }
	RULE_INT
{ after(grammarAccess.getABSTIMEAccess().getINTTerminalRuleCall_1_0_2_0()); }
)

    |(
{ before(grammarAccess.getABSTIMEAccess().getIDTerminalRuleCall_1_0_2_1()); }
	RULE_ID
{ after(grammarAccess.getABSTIMEAccess().getIDTerminalRuleCall_1_0_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ABSTIME__Alternatives_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getABSTIMEAccess().getCOLONTerminalRuleCall_1_1_0()); }
	RULE_COLON
{ after(grammarAccess.getABSTIMEAccess().getCOLONTerminalRuleCall_1_1_0()); }
)

    |(
{ before(grammarAccess.getABSTIMEAccess().getWSTerminalRuleCall_1_1_1()); }
	RULE_WS
{ after(grammarAccess.getABSTIMEAccess().getWSTerminalRuleCall_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SINGLE_VALUE__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSINGLE_VALUEAccess().getIDTerminalRuleCall_0()); }
	RULE_ID
{ after(grammarAccess.getSINGLE_VALUEAccess().getIDTerminalRuleCall_0()); }
)

    |(
{ before(grammarAccess.getSINGLE_VALUEAccess().getFLOATTerminalRuleCall_1()); }
	RULE_FLOAT
{ after(grammarAccess.getSINGLE_VALUEAccess().getFLOATTerminalRuleCall_1()); }
)

    |(
{ before(grammarAccess.getSINGLE_VALUEAccess().getINTTerminalRuleCall_2()); }
	RULE_INT
{ after(grammarAccess.getSINGLE_VALUEAccess().getINTTerminalRuleCall_2()); }
)

    |(
{ before(grammarAccess.getSINGLE_VALUEAccess().getPLUSTerminalRuleCall_3()); }
	RULE_PLUS
{ after(grammarAccess.getSINGLE_VALUEAccess().getPLUSTerminalRuleCall_3()); }
)

    |(
{ before(grammarAccess.getSINGLE_VALUEAccess().getMINUSTerminalRuleCall_4()); }
	RULE_MINUS
{ after(grammarAccess.getSINGLE_VALUEAccess().getMINUSTerminalRuleCall_4()); }
)

    |(
{ before(grammarAccess.getSINGLE_VALUEAccess().getML_COMMENTTerminalRuleCall_5()); }
	RULE_ML_COMMENT
{ after(grammarAccess.getSINGLE_VALUEAccess().getML_COMMENTTerminalRuleCall_5()); }
)

    |(
{ before(grammarAccess.getSINGLE_VALUEAccess().getBIN_HEX_OCTTerminalRuleCall_6()); }
	RULE_BIN_HEX_OCT
{ after(grammarAccess.getSINGLE_VALUEAccess().getBIN_HEX_OCTTerminalRuleCall_6()); }
)

    |(
{ before(grammarAccess.getSINGLE_VALUEAccess().getBOOL_EXPRTerminalRuleCall_7()); }
	RULE_BOOL_EXPR
{ after(grammarAccess.getSINGLE_VALUEAccess().getBOOL_EXPRTerminalRuleCall_7()); }
)

    |(
{ before(grammarAccess.getSINGLE_VALUEAccess().getSTRINGTerminalRuleCall_8()); }
	RULE_STRING
{ after(grammarAccess.getSINGLE_VALUEAccess().getSTRINGTerminalRuleCall_8()); }
)

    |(
{ before(grammarAccess.getSINGLE_VALUEAccess().getANY_OTHERTerminalRuleCall_9()); }
	RULE_ANY_OTHER
{ after(grammarAccess.getSINGLE_VALUEAccess().getANY_OTHERTerminalRuleCall_9()); }
)

    |(
{ before(grammarAccess.getSINGLE_VALUEAccess().getFullStopKeyword_10()); }

	FullStop 

{ after(grammarAccess.getSINGLE_VALUEAccess().getFullStopKeyword_10()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ID_STMT__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getID_STMTAccess().getIDTerminalRuleCall_1_0()); }
	RULE_ID
{ after(grammarAccess.getID_STMTAccess().getIDTerminalRuleCall_1_0()); }
)

    |(
{ before(grammarAccess.getID_STMTAccess().getReverseSolidusKeyword_1_1()); }

	Backslash 

{ after(grammarAccess.getID_STMTAccess().getReverseSolidusKeyword_1_1()); }
)

    |(
{ before(grammarAccess.getID_STMTAccess().getSolidusKeyword_1_2()); }

	Solidus 

{ after(grammarAccess.getID_STMTAccess().getSolidusKeyword_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__INTEGER__Alternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getINTEGERAccess().getPLUSTerminalRuleCall_0_0()); }
	RULE_PLUS
{ after(grammarAccess.getINTEGERAccess().getPLUSTerminalRuleCall_0_0()); }
)

    |(
{ before(grammarAccess.getINTEGERAccess().getMINUSTerminalRuleCall_0_1()); }
	RULE_MINUS
{ after(grammarAccess.getINTEGERAccess().getMINUSTerminalRuleCall_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__SpellDatabase__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SpellDatabase__Group__0__Impl
	rule__SpellDatabase__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SpellDatabase__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSpellDatabaseAccess().getSkipNLAndCommentsParserRuleCall_0()); }
	ruleSkipNLAndComments
{ after(grammarAccess.getSpellDatabaseAccess().getSkipNLAndCommentsParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SpellDatabase__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SpellDatabase__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SpellDatabase__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSpellDatabaseAccess().getAlternatives_1()); }
(rule__SpellDatabase__Alternatives_1)
{ after(grammarAccess.getSpellDatabaseAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SpellDatabase__Group_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SpellDatabase__Group_1_0__0__Impl
	rule__SpellDatabase__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SpellDatabase__Group_1_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSpellDatabaseAccess().getAstriumSpellDatabaseAction_1_0_0()); }
(

)
{ after(grammarAccess.getSpellDatabaseAccess().getAstriumSpellDatabaseAction_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SpellDatabase__Group_1_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SpellDatabase__Group_1_0__1__Impl
	rule__SpellDatabase__Group_1_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SpellDatabase__Group_1_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSpellDatabaseAccess().getFILE_HEADERKeyword_1_0_1()); }

	FILE_HEADER 

{ after(grammarAccess.getSpellDatabaseAccess().getFILE_HEADERKeyword_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SpellDatabase__Group_1_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SpellDatabase__Group_1_0__2__Impl
	rule__SpellDatabase__Group_1_0__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SpellDatabase__Group_1_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSpellDatabaseAccess().getSkipNLAndCommentsParserRuleCall_1_0_2()); }
	ruleSkipNLAndComments
{ after(grammarAccess.getSpellDatabaseAccess().getSkipNLAndCommentsParserRuleCall_1_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SpellDatabase__Group_1_0__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SpellDatabase__Group_1_0__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SpellDatabase__Group_1_0__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSpellDatabaseAccess().getDatabaseAssignment_1_0_3()); }
(rule__SpellDatabase__DatabaseAssignment_1_0_3)
{ after(grammarAccess.getSpellDatabaseAccess().getDatabaseAssignment_1_0_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__SpellDatabase__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SpellDatabase__Group_1_1__0__Impl
	rule__SpellDatabase__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SpellDatabase__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSpellDatabaseAccess().getSpellDatabaseAction_1_1_0()); }
(

)
{ after(grammarAccess.getSpellDatabaseAccess().getSpellDatabaseAction_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SpellDatabase__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SpellDatabase__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SpellDatabase__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSpellDatabaseAccess().getGroup_1_1_1()); }
(rule__SpellDatabase__Group_1_1_1__0)
{ after(grammarAccess.getSpellDatabaseAccess().getGroup_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SpellDatabase__Group_1_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SpellDatabase__Group_1_1_1__0__Impl
	rule__SpellDatabase__Group_1_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SpellDatabase__Group_1_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSpellDatabaseAccess().getDatabaseEntryAssignment_1_1_1_0()); }
(rule__SpellDatabase__DatabaseEntryAssignment_1_1_1_0)
{ after(grammarAccess.getSpellDatabaseAccess().getDatabaseEntryAssignment_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SpellDatabase__Group_1_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SpellDatabase__Group_1_1_1__1__Impl
	rule__SpellDatabase__Group_1_1_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SpellDatabase__Group_1_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSpellDatabaseAccess().getGroup_1_1_1_1()); }
(rule__SpellDatabase__Group_1_1_1_1__0)*
{ after(grammarAccess.getSpellDatabaseAccess().getGroup_1_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SpellDatabase__Group_1_1_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SpellDatabase__Group_1_1_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SpellDatabase__Group_1_1_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSpellDatabaseAccess().getSkipNLAndCommentsParserRuleCall_1_1_1_2()); }
	ruleSkipNLAndComments
{ after(grammarAccess.getSpellDatabaseAccess().getSkipNLAndCommentsParserRuleCall_1_1_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__SpellDatabase__Group_1_1_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SpellDatabase__Group_1_1_1_1__0__Impl
	rule__SpellDatabase__Group_1_1_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SpellDatabase__Group_1_1_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSpellDatabaseAccess().getSkipNLAndComments2ParserRuleCall_1_1_1_1_0()); }
	ruleSkipNLAndComments2
{ after(grammarAccess.getSpellDatabaseAccess().getSkipNLAndComments2ParserRuleCall_1_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SpellDatabase__Group_1_1_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SpellDatabase__Group_1_1_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SpellDatabase__Group_1_1_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSpellDatabaseAccess().getDatabaseEntryAssignment_1_1_1_1_1()); }
(rule__SpellDatabase__DatabaseEntryAssignment_1_1_1_1_1)?
{ after(grammarAccess.getSpellDatabaseAccess().getDatabaseEntryAssignment_1_1_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SpellDatabase__Group_1_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SpellDatabase__Group_1_2__0__Impl
	rule__SpellDatabase__Group_1_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SpellDatabase__Group_1_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSpellDatabaseAccess().getCSVFileAction_1_2_0()); }
(

)
{ after(grammarAccess.getSpellDatabaseAccess().getCSVFileAction_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SpellDatabase__Group_1_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SpellDatabase__Group_1_2__1__Impl
	rule__SpellDatabase__Group_1_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SpellDatabase__Group_1_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSpellDatabaseAccess().getCsvEntriesAssignment_1_2_1()); }
(rule__SpellDatabase__CsvEntriesAssignment_1_2_1)
{ after(grammarAccess.getSpellDatabaseAccess().getCsvEntriesAssignment_1_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SpellDatabase__Group_1_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SpellDatabase__Group_1_2__2__Impl
	rule__SpellDatabase__Group_1_2__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SpellDatabase__Group_1_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSpellDatabaseAccess().getSkipNLAndComments2ParserRuleCall_1_2_2()); }
(	ruleSkipNLAndComments2)?
{ after(grammarAccess.getSpellDatabaseAccess().getSkipNLAndComments2ParserRuleCall_1_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SpellDatabase__Group_1_2__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SpellDatabase__Group_1_2__3__Impl
	rule__SpellDatabase__Group_1_2__4
;
finally {
	restoreStackSize(stackSize);
}

rule__SpellDatabase__Group_1_2__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSpellDatabaseAccess().getGroup_1_2_3()); }
(rule__SpellDatabase__Group_1_2_3__0)*
{ after(grammarAccess.getSpellDatabaseAccess().getGroup_1_2_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SpellDatabase__Group_1_2__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SpellDatabase__Group_1_2__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SpellDatabase__Group_1_2__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSpellDatabaseAccess().getSkipNLAndCommentsParserRuleCall_1_2_4()); }
	ruleSkipNLAndComments
{ after(grammarAccess.getSpellDatabaseAccess().getSkipNLAndCommentsParserRuleCall_1_2_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__SpellDatabase__Group_1_2_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SpellDatabase__Group_1_2_3__0__Impl
	rule__SpellDatabase__Group_1_2_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SpellDatabase__Group_1_2_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSpellDatabaseAccess().getSkipNLAndComments2ParserRuleCall_1_2_3_0()); }
(	ruleSkipNLAndComments2)?
{ after(grammarAccess.getSpellDatabaseAccess().getSkipNLAndComments2ParserRuleCall_1_2_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SpellDatabase__Group_1_2_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SpellDatabase__Group_1_2_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SpellDatabase__Group_1_2_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSpellDatabaseAccess().getCsvEntriesAssignment_1_2_3_1()); }
(rule__SpellDatabase__CsvEntriesAssignment_1_2_3_1)
{ after(grammarAccess.getSpellDatabaseAccess().getCsvEntriesAssignment_1_2_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AstriumDatabase__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AstriumDatabase__Group__0__Impl
	rule__AstriumDatabase__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AstriumDatabase__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAstriumDatabaseAccess().getAstriumDatabaseAction_0()); }
(

)
{ after(grammarAccess.getAstriumDatabaseAccess().getAstriumDatabaseAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AstriumDatabase__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AstriumDatabase__Group__1__Impl
	rule__AstriumDatabase__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AstriumDatabase__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAstriumDatabaseAccess().getGroup_1()); }
(rule__AstriumDatabase__Group_1__0)*
{ after(grammarAccess.getAstriumDatabaseAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AstriumDatabase__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AstriumDatabase__Group__2__Impl
	rule__AstriumDatabase__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__AstriumDatabase__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAstriumDatabaseAccess().getEND_FILE_HEADERKeyword_2()); }

	END_FILE_HEADER 

{ after(grammarAccess.getAstriumDatabaseAccess().getEND_FILE_HEADERKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AstriumDatabase__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AstriumDatabase__Group__3__Impl
	rule__AstriumDatabase__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__AstriumDatabase__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAstriumDatabaseAccess().getSkipNLAndCommentsParserRuleCall_3()); }
	ruleSkipNLAndComments
{ after(grammarAccess.getAstriumDatabaseAccess().getSkipNLAndCommentsParserRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AstriumDatabase__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AstriumDatabase__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AstriumDatabase__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAstriumDatabaseAccess().getGroup_4()); }
(rule__AstriumDatabase__Group_4__0)*
{ after(grammarAccess.getAstriumDatabaseAccess().getGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__AstriumDatabase__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AstriumDatabase__Group_1__0__Impl
	rule__AstriumDatabase__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AstriumDatabase__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAstriumDatabaseAccess().getEntriesAssignment_1_0()); }
(rule__AstriumDatabase__EntriesAssignment_1_0)
{ after(grammarAccess.getAstriumDatabaseAccess().getEntriesAssignment_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AstriumDatabase__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AstriumDatabase__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AstriumDatabase__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAstriumDatabaseAccess().getSkipNLAndCommentsParserRuleCall_1_1()); }
	ruleSkipNLAndComments
{ after(grammarAccess.getAstriumDatabaseAccess().getSkipNLAndCommentsParserRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AstriumDatabase__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AstriumDatabase__Group_4__0__Impl
	rule__AstriumDatabase__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AstriumDatabase__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAstriumDatabaseAccess().getEntriesAssignment_4_0()); }
(rule__AstriumDatabase__EntriesAssignment_4_0)
{ after(grammarAccess.getAstriumDatabaseAccess().getEntriesAssignment_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AstriumDatabase__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AstriumDatabase__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AstriumDatabase__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAstriumDatabaseAccess().getSkipNLAndCommentsParserRuleCall_4_1()); }
	ruleSkipNLAndComments
{ after(grammarAccess.getAstriumDatabaseAccess().getSkipNLAndCommentsParserRuleCall_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AstriumVariableEntry__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AstriumVariableEntry__Group_0__0__Impl
	rule__AstriumVariableEntry__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AstriumVariableEntry__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAstriumVariableEntryAccess().getAstriumVariableCommentAction_0_0()); }
(

)
{ after(grammarAccess.getAstriumVariableEntryAccess().getAstriumVariableCommentAction_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AstriumVariableEntry__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AstriumVariableEntry__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AstriumVariableEntry__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAstriumVariableEntryAccess().getCommentAssignment_0_1()); }
(rule__AstriumVariableEntry__CommentAssignment_0_1)
{ after(grammarAccess.getAstriumVariableEntryAccess().getCommentAssignment_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AstriumVariableEntry__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AstriumVariableEntry__Group_1__0__Impl
	rule__AstriumVariableEntry__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AstriumVariableEntry__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAstriumVariableEntryAccess().getAstriumVariableEntryAction_1_0()); }
(

)
{ after(grammarAccess.getAstriumVariableEntryAccess().getAstriumVariableEntryAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AstriumVariableEntry__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AstriumVariableEntry__Group_1__1__Impl
	rule__AstriumVariableEntry__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AstriumVariableEntry__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAstriumVariableEntryAccess().getDOLLARTerminalRuleCall_1_1()); }
	RULE_DOLLAR
{ after(grammarAccess.getAstriumVariableEntryAccess().getDOLLARTerminalRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AstriumVariableEntry__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AstriumVariableEntry__Group_1__2__Impl
	rule__AstriumVariableEntry__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__AstriumVariableEntry__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAstriumVariableEntryAccess().getNameAssignment_1_2()); }
(rule__AstriumVariableEntry__NameAssignment_1_2)
{ after(grammarAccess.getAstriumVariableEntryAccess().getNameAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AstriumVariableEntry__Group_1__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AstriumVariableEntry__Group_1__3__Impl
	rule__AstriumVariableEntry__Group_1__4
;
finally {
	restoreStackSize(stackSize);
}

rule__AstriumVariableEntry__Group_1__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAstriumVariableEntryAccess().getCOLONTerminalRuleCall_1_3()); }
	RULE_COLON
{ after(grammarAccess.getAstriumVariableEntryAccess().getCOLONTerminalRuleCall_1_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AstriumVariableEntry__Group_1__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AstriumVariableEntry__Group_1__4__Impl
	rule__AstriumVariableEntry__Group_1__5
;
finally {
	restoreStackSize(stackSize);
}

rule__AstriumVariableEntry__Group_1__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAstriumVariableEntryAccess().getEqualsSignKeyword_1_4()); }

	EqualsSign 

{ after(grammarAccess.getAstriumVariableEntryAccess().getEqualsSignKeyword_1_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AstriumVariableEntry__Group_1__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AstriumVariableEntry__Group_1__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AstriumVariableEntry__Group_1__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAstriumVariableEntryAccess().getAlternatives_1_5()); }
(rule__AstriumVariableEntry__Alternatives_1_5)?
{ after(grammarAccess.getAstriumVariableEntryAccess().getAlternatives_1_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__AstriumHeaderEntry__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AstriumHeaderEntry__Group_0__0__Impl
	rule__AstriumHeaderEntry__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AstriumHeaderEntry__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAstriumHeaderEntryAccess().getAstriumHeaderCommentAction_0_0()); }
(

)
{ after(grammarAccess.getAstriumHeaderEntryAccess().getAstriumHeaderCommentAction_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AstriumHeaderEntry__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AstriumHeaderEntry__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AstriumHeaderEntry__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAstriumHeaderEntryAccess().getCommentAssignment_0_1()); }
(rule__AstriumHeaderEntry__CommentAssignment_0_1)
{ after(grammarAccess.getAstriumHeaderEntryAccess().getCommentAssignment_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AstriumHeaderEntry__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AstriumHeaderEntry__Group_1__0__Impl
	rule__AstriumHeaderEntry__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AstriumHeaderEntry__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAstriumHeaderEntryAccess().getAstriumHeaderEntryAction_1_0()); }
(

)
{ after(grammarAccess.getAstriumHeaderEntryAccess().getAstriumHeaderEntryAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AstriumHeaderEntry__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AstriumHeaderEntry__Group_1__1__Impl
	rule__AstriumHeaderEntry__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AstriumHeaderEntry__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAstriumHeaderEntryAccess().getNameAssignment_1_1()); }
(rule__AstriumHeaderEntry__NameAssignment_1_1)
{ after(grammarAccess.getAstriumHeaderEntryAccess().getNameAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AstriumHeaderEntry__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AstriumHeaderEntry__Group_1__2__Impl
	rule__AstriumHeaderEntry__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__AstriumHeaderEntry__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAstriumHeaderEntryAccess().getCOLONTerminalRuleCall_1_2()); }
	RULE_COLON
{ after(grammarAccess.getAstriumHeaderEntryAccess().getCOLONTerminalRuleCall_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AstriumHeaderEntry__Group_1__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AstriumHeaderEntry__Group_1__3__Impl
	rule__AstriumHeaderEntry__Group_1__4
;
finally {
	restoreStackSize(stackSize);
}

rule__AstriumHeaderEntry__Group_1__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAstriumHeaderEntryAccess().getEqualsSignKeyword_1_3()); }

	EqualsSign 

{ after(grammarAccess.getAstriumHeaderEntryAccess().getEqualsSignKeyword_1_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AstriumHeaderEntry__Group_1__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AstriumHeaderEntry__Group_1__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AstriumHeaderEntry__Group_1__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAstriumHeaderEntryAccess().getAlternatives_1_4()); }
(rule__AstriumHeaderEntry__Alternatives_1_4)?
{ after(grammarAccess.getAstriumHeaderEntryAccess().getAlternatives_1_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__SkipNLAndComments2__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SkipNLAndComments2__Group__0__Impl
	rule__SkipNLAndComments2__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SkipNLAndComments2__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getSkipNLAndComments2Access().getNLTerminalRuleCall_0()); }
(	RULE_NL)
{ after(grammarAccess.getSkipNLAndComments2Access().getNLTerminalRuleCall_0()); }
)
(
{ before(grammarAccess.getSkipNLAndComments2Access().getNLTerminalRuleCall_0()); }
(	RULE_NL)*
{ after(grammarAccess.getSkipNLAndComments2Access().getNLTerminalRuleCall_0()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SkipNLAndComments2__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SkipNLAndComments2__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SkipNLAndComments2__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSkipNLAndComments2Access().getSkipNLAndCommentsParserRuleCall_1()); }
(	ruleSkipNLAndComments)
{ after(grammarAccess.getSkipNLAndComments2Access().getSkipNLAndCommentsParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__CSVCommand__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CSVCommand__Group__0__Impl
	rule__CSVCommand__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CSVCommand__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCSVCommandAccess().getCMDTerminalRuleCall_0()); }
	RULE_CMD
{ after(grammarAccess.getCSVCommandAccess().getCMDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CSVCommand__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CSVCommand__Group__1__Impl
	rule__CSVCommand__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CSVCommand__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCSVCommandAccess().getCommaKeyword_1()); }

	Comma 

{ after(grammarAccess.getCSVCommandAccess().getCommaKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CSVCommand__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CSVCommand__Group__2__Impl
	rule__CSVCommand__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__CSVCommand__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCSVCommandAccess().getCommandAssignment_2()); }
(rule__CSVCommand__CommandAssignment_2)
{ after(grammarAccess.getCSVCommandAccess().getCommandAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CSVCommand__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CSVCommand__Group__3__Impl
	rule__CSVCommand__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__CSVCommand__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCSVCommandAccess().getGroup_3()); }
(rule__CSVCommand__Group_3__0)?
{ after(grammarAccess.getCSVCommandAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CSVCommand__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CSVCommand__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CSVCommand__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCSVCommandAccess().getCommaKeyword_4()); }
(
	Comma 
)*
{ after(grammarAccess.getCSVCommandAccess().getCommaKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__CSVCommand__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CSVCommand__Group_3__0__Impl
	rule__CSVCommand__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CSVCommand__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCSVCommandAccess().getCommaKeyword_3_0()); }

	Comma 

{ after(grammarAccess.getCSVCommandAccess().getCommaKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CSVCommand__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CSVCommand__Group_3__1__Impl
	rule__CSVCommand__Group_3__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CSVCommand__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCSVCommandAccess().getArgsAssignment_3_1()); }
(rule__CSVCommand__ArgsAssignment_3_1)
{ after(grammarAccess.getCSVCommandAccess().getArgsAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CSVCommand__Group_3__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CSVCommand__Group_3__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CSVCommand__Group_3__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCSVCommandAccess().getGroup_3_2()); }
(rule__CSVCommand__Group_3_2__0)*
{ after(grammarAccess.getCSVCommandAccess().getGroup_3_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__CSVCommand__Group_3_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CSVCommand__Group_3_2__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CSVCommand__Group_3_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCSVCommandAccess().getGroup_3_2_0()); }
(rule__CSVCommand__Group_3_2_0__0)
{ after(grammarAccess.getCSVCommandAccess().getGroup_3_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__CSVCommand__Group_3_2_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CSVCommand__Group_3_2_0__0__Impl
	rule__CSVCommand__Group_3_2_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CSVCommand__Group_3_2_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCSVCommandAccess().getSkipNLAndComments2ParserRuleCall_3_2_0_0()); }
	ruleSkipNLAndComments2
{ after(grammarAccess.getCSVCommandAccess().getSkipNLAndComments2ParserRuleCall_3_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CSVCommand__Group_3_2_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CSVCommand__Group_3_2_0__1__Impl
	rule__CSVCommand__Group_3_2_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CSVCommand__Group_3_2_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCSVCommandAccess().getCommaKeyword_3_2_0_1()); }

	Comma 

{ after(grammarAccess.getCSVCommandAccess().getCommaKeyword_3_2_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CSVCommand__Group_3_2_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CSVCommand__Group_3_2_0__2__Impl
	rule__CSVCommand__Group_3_2_0__3
;
finally {
	restoreStackSize(stackSize);
}

rule__CSVCommand__Group_3_2_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCSVCommandAccess().getCommaKeyword_3_2_0_2()); }

	Comma 

{ after(grammarAccess.getCSVCommandAccess().getCommaKeyword_3_2_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CSVCommand__Group_3_2_0__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CSVCommand__Group_3_2_0__3__Impl
	rule__CSVCommand__Group_3_2_0__4
;
finally {
	restoreStackSize(stackSize);
}

rule__CSVCommand__Group_3_2_0__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCSVCommandAccess().getArgsAssignment_3_2_0_3()); }
(rule__CSVCommand__ArgsAssignment_3_2_0_3)
{ after(grammarAccess.getCSVCommandAccess().getArgsAssignment_3_2_0_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CSVCommand__Group_3_2_0__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CSVCommand__Group_3_2_0__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CSVCommand__Group_3_2_0__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCSVCommandAccess().getCommaKeyword_3_2_0_4()); }
(
	Comma 
)*
{ after(grammarAccess.getCSVCommandAccess().getCommaKeyword_3_2_0_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__TCArgs__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TCArgs__Group__0__Impl
	rule__TCArgs__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TCArgs__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTCArgsAccess().getTcNameAssignment_0()); }
(rule__TCArgs__TcNameAssignment_0)
{ after(grammarAccess.getTCArgsAccess().getTcNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TCArgs__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TCArgs__Group__1__Impl
	rule__TCArgs__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TCArgs__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTCArgsAccess().getCommaKeyword_1()); }

	Comma 

{ after(grammarAccess.getTCArgsAccess().getCommaKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TCArgs__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TCArgs__Group__2__Impl
	rule__TCArgs__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__TCArgs__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTCArgsAccess().getTcValueAssignment_2()); }
(rule__TCArgs__TcValueAssignment_2)
{ after(grammarAccess.getTCArgsAccess().getTcValueAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TCArgs__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TCArgs__Group__3__Impl
	rule__TCArgs__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__TCArgs__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTCArgsAccess().getCommaKeyword_3()); }

	Comma 

{ after(grammarAccess.getTCArgsAccess().getCommaKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TCArgs__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TCArgs__Group__4__Impl
	rule__TCArgs__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__TCArgs__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTCArgsAccess().getTcModAssignment_4()); }
(rule__TCArgs__TcModAssignment_4)
{ after(grammarAccess.getTCArgsAccess().getTcModAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TCArgs__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TCArgs__Group__5__Impl
	rule__TCArgs__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__TCArgs__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTCArgsAccess().getGroup_5()); }
(rule__TCArgs__Group_5__0)?
{ after(grammarAccess.getTCArgsAccess().getGroup_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TCArgs__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TCArgs__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TCArgs__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTCArgsAccess().getCommaKeyword_6()); }
(
	Comma 
)*
{ after(grammarAccess.getTCArgsAccess().getCommaKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__TCArgs__Group_5__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TCArgs__Group_5__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TCArgs__Group_5__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTCArgsAccess().getGroup_5_0()); }
(rule__TCArgs__Group_5_0__0)
{ after(grammarAccess.getTCArgsAccess().getGroup_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__TCArgs__Group_5_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TCArgs__Group_5_0__0__Impl
	rule__TCArgs__Group_5_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TCArgs__Group_5_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTCArgsAccess().getCommaKeyword_5_0_0()); }

	Comma 

{ after(grammarAccess.getTCArgsAccess().getCommaKeyword_5_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TCArgs__Group_5_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TCArgs__Group_5_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TCArgs__Group_5_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTCArgsAccess().getToleranceAssignment_5_0_1()); }
(rule__TCArgs__ToleranceAssignment_5_0_1)?
{ after(grammarAccess.getTCArgsAccess().getToleranceAssignment_5_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__CSVTelemetry__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CSVTelemetry__Group__0__Impl
	rule__CSVTelemetry__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CSVTelemetry__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCSVTelemetryAccess().getTMTerminalRuleCall_0()); }
	RULE_TM
{ after(grammarAccess.getCSVTelemetryAccess().getTMTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CSVTelemetry__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CSVTelemetry__Group__1__Impl
	rule__CSVTelemetry__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CSVTelemetry__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCSVTelemetryAccess().getCommaKeyword_1()); }

	Comma 

{ after(grammarAccess.getCSVTelemetryAccess().getCommaKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CSVTelemetry__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CSVTelemetry__Group__2__Impl
	rule__CSVTelemetry__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__CSVTelemetry__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCSVTelemetryAccess().getCommaKeyword_2()); }

	Comma 

{ after(grammarAccess.getCSVTelemetryAccess().getCommaKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CSVTelemetry__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CSVTelemetry__Group__3__Impl
	rule__CSVTelemetry__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__CSVTelemetry__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCSVTelemetryAccess().getTmArgAssignment_3()); }
(rule__CSVTelemetry__TmArgAssignment_3)
{ after(grammarAccess.getCSVTelemetryAccess().getTmArgAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CSVTelemetry__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CSVTelemetry__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CSVTelemetry__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCSVTelemetryAccess().getCommaKeyword_4()); }
(
	Comma 
)*
{ after(grammarAccess.getCSVTelemetryAccess().getCommaKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__CSVSpell__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CSVSpell__Group__0__Impl
	rule__CSVSpell__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CSVSpell__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCSVSpellAccess().getSPELLTerminalRuleCall_0()); }
	RULE_SPELL
{ after(grammarAccess.getCSVSpellAccess().getSPELLTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CSVSpell__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CSVSpell__Group__1__Impl
	rule__CSVSpell__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CSVSpell__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCSVSpellAccess().getCommaKeyword_1()); }

	Comma 

{ after(grammarAccess.getCSVSpellAccess().getCommaKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CSVSpell__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CSVSpell__Group__2__Impl
	rule__CSVSpell__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__CSVSpell__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCSVSpellAccess().getCmdAssignment_2()); }
(rule__CSVSpell__CmdAssignment_2)
{ after(grammarAccess.getCSVSpellAccess().getCmdAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CSVSpell__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CSVSpell__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CSVSpell__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCSVSpellAccess().getCommaKeyword_3()); }
(
	Comma 
)*
{ after(grammarAccess.getCSVSpellAccess().getCommaKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__SpellCommand__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SpellCommand__Group_0__0__Impl
	rule__SpellCommand__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SpellCommand__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSpellCommandAccess().getWaitCommandAction_0_0()); }
(

)
{ after(grammarAccess.getSpellCommandAccess().getWaitCommandAction_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SpellCommand__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SpellCommand__Group_0__1__Impl
	rule__SpellCommand__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SpellCommand__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSpellCommandAccess().getWAITTerminalRuleCall_0_1()); }
	RULE_WAIT
{ after(grammarAccess.getSpellCommandAccess().getWAITTerminalRuleCall_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SpellCommand__Group_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SpellCommand__Group_0__2__Impl
	rule__SpellCommand__Group_0__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SpellCommand__Group_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSpellCommandAccess().getCommaKeyword_0_2()); }

	Comma 

{ after(grammarAccess.getSpellCommandAccess().getCommaKeyword_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SpellCommand__Group_0__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SpellCommand__Group_0__3__Impl
	rule__SpellCommand__Group_0__4
;
finally {
	restoreStackSize(stackSize);
}

rule__SpellCommand__Group_0__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSpellCommandAccess().getValueAssignment_0_3()); }
(rule__SpellCommand__ValueAssignment_0_3)
{ after(grammarAccess.getSpellCommandAccess().getValueAssignment_0_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SpellCommand__Group_0__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SpellCommand__Group_0__4__Impl
	rule__SpellCommand__Group_0__5
;
finally {
	restoreStackSize(stackSize);
}

rule__SpellCommand__Group_0__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSpellCommandAccess().getCommaKeyword_0_4()); }

	Comma 

{ after(grammarAccess.getSpellCommandAccess().getCommaKeyword_0_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SpellCommand__Group_0__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SpellCommand__Group_0__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SpellCommand__Group_0__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSpellCommandAccess().getUnitAssignment_0_5()); }
(rule__SpellCommand__UnitAssignment_0_5)
{ after(grammarAccess.getSpellCommandAccess().getUnitAssignment_0_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__SpellCommand__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SpellCommand__Group_1__0__Impl
	rule__SpellCommand__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SpellCommand__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSpellCommandAccess().getPauseCommandAction_1_0()); }
(

)
{ after(grammarAccess.getSpellCommandAccess().getPauseCommandAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SpellCommand__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SpellCommand__Group_1__1__Impl
	rule__SpellCommand__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SpellCommand__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSpellCommandAccess().getPAUSETerminalRuleCall_1_1()); }
	RULE_PAUSE
{ after(grammarAccess.getSpellCommandAccess().getPAUSETerminalRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SpellCommand__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SpellCommand__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SpellCommand__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSpellCommandAccess().getCommaKeyword_1_2()); }
(
	Comma 
)*
{ after(grammarAccess.getSpellCommandAccess().getCommaKeyword_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__DatabaseEntry__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DatabaseEntry__Group__0__Impl
	rule__DatabaseEntry__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DatabaseEntry__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDatabaseEntryAccess().getNameAssignment_0()); }
(rule__DatabaseEntry__NameAssignment_0)
{ after(grammarAccess.getDatabaseEntryAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DatabaseEntry__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DatabaseEntry__Group__1__Impl
	rule__DatabaseEntry__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DatabaseEntry__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDatabaseEntryAccess().getWSTerminalRuleCall_1()); }
(	RULE_WS)?
{ after(grammarAccess.getDatabaseEntryAccess().getWSTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DatabaseEntry__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DatabaseEntry__Group__2__Impl
	rule__DatabaseEntry__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__DatabaseEntry__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDatabaseEntryAccess().getSkipped_NLParserRuleCall_2()); }
	ruleSkipped_NL
{ after(grammarAccess.getDatabaseEntryAccess().getSkipped_NLParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DatabaseEntry__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DatabaseEntry__Group__3__Impl
	rule__DatabaseEntry__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__DatabaseEntry__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDatabaseEntryAccess().getWSTerminalRuleCall_3()); }
(	RULE_WS)?
{ after(grammarAccess.getDatabaseEntryAccess().getWSTerminalRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DatabaseEntry__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DatabaseEntry__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DatabaseEntry__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDatabaseEntryAccess().getValueAssignment_4()); }
(rule__DatabaseEntry__ValueAssignment_4)?
{ after(grammarAccess.getDatabaseEntryAccess().getValueAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Lambda_Stmt__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Lambda_Stmt__Group__0__Impl
	rule__Lambda_Stmt__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Lambda_Stmt__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLambda_StmtAccess().getLambda_StmtAction_0()); }
(

)
{ after(grammarAccess.getLambda_StmtAccess().getLambda_StmtAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Lambda_Stmt__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Lambda_Stmt__Group__1__Impl
	rule__Lambda_Stmt__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Lambda_Stmt__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLambda_StmtAccess().getLAMBDATerminalRuleCall_1()); }
	RULE_LAMBDA
{ after(grammarAccess.getLambda_StmtAccess().getLAMBDATerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Lambda_Stmt__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Lambda_Stmt__Group__2__Impl
	rule__Lambda_Stmt__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Lambda_Stmt__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLambda_StmtAccess().getVariablesAssignment_2()); }
(rule__Lambda_Stmt__VariablesAssignment_2)?
{ after(grammarAccess.getLambda_StmtAccess().getVariablesAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Lambda_Stmt__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Lambda_Stmt__Group__3__Impl
	rule__Lambda_Stmt__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Lambda_Stmt__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLambda_StmtAccess().getCOLONTerminalRuleCall_3()); }
	RULE_COLON
{ after(grammarAccess.getLambda_StmtAccess().getCOLONTerminalRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Lambda_Stmt__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Lambda_Stmt__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Lambda_Stmt__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLambda_StmtAccess().getValAssignment_4()); }
(rule__Lambda_Stmt__ValAssignment_4)?
{ after(grammarAccess.getLambda_StmtAccess().getValAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Lambda_Partial_Func__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Lambda_Partial_Func__Group_1__0__Impl
	rule__Lambda_Partial_Func__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Lambda_Partial_Func__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLambda_Partial_FuncAccess().getLAMBDATerminalRuleCall_1_0()); }
	RULE_LAMBDA
{ after(grammarAccess.getLambda_Partial_FuncAccess().getLAMBDATerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Lambda_Partial_Func__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Lambda_Partial_Func__Group_1__1__Impl
	rule__Lambda_Partial_Func__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Lambda_Partial_Func__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLambda_Partial_FuncAccess().getLambda_VarsParserRuleCall_1_1()); }
(	ruleLambda_Vars)?
{ after(grammarAccess.getLambda_Partial_FuncAccess().getLambda_VarsParserRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Lambda_Partial_Func__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Lambda_Partial_Func__Group_1__2__Impl
	rule__Lambda_Partial_Func__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Lambda_Partial_Func__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLambda_Partial_FuncAccess().getCOLONTerminalRuleCall_1_2()); }
	RULE_COLON
{ after(grammarAccess.getLambda_Partial_FuncAccess().getCOLONTerminalRuleCall_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Lambda_Partial_Func__Group_1__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Lambda_Partial_Func__Group_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Lambda_Partial_Func__Group_1__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLambda_Partial_FuncAccess().getLambda_FunctionParserRuleCall_1_3()); }
(	ruleLambda_Function)?
{ after(grammarAccess.getLambda_Partial_FuncAccess().getLambda_FunctionParserRuleCall_1_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Lambda_Vars__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Lambda_Vars__Group__0__Impl
	rule__Lambda_Vars__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Lambda_Vars__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLambda_VarsAccess().getIDTerminalRuleCall_0()); }
	RULE_ID
{ after(grammarAccess.getLambda_VarsAccess().getIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Lambda_Vars__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Lambda_Vars__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Lambda_Vars__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLambda_VarsAccess().getGroup_1()); }
(rule__Lambda_Vars__Group_1__0)*
{ after(grammarAccess.getLambda_VarsAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Lambda_Vars__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Lambda_Vars__Group_1__0__Impl
	rule__Lambda_Vars__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Lambda_Vars__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLambda_VarsAccess().getCommaKeyword_1_0()); }

	Comma 

{ after(grammarAccess.getLambda_VarsAccess().getCommaKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Lambda_Vars__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Lambda_Vars__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Lambda_Vars__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLambda_VarsAccess().getIDTerminalRuleCall_1_1()); }
	RULE_ID
{ after(grammarAccess.getLambda_VarsAccess().getIDTerminalRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Tuple__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Tuple__Group__0__Impl
	rule__Tuple__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Tuple__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTupleAccess().getTupleAction_0()); }
(

)
{ after(grammarAccess.getTupleAccess().getTupleAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Tuple__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Tuple__Group__1__Impl
	rule__Tuple__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Tuple__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTupleAccess().getLeftParenthesisKeyword_1()); }

	LeftParenthesis 

{ after(grammarAccess.getTupleAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Tuple__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Tuple__Group__2__Impl
	rule__Tuple__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Tuple__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTupleAccess().getGroup_2()); }
(rule__Tuple__Group_2__0)?
{ after(grammarAccess.getTupleAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Tuple__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Tuple__Group__3__Impl
	rule__Tuple__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Tuple__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTupleAccess().getSkipped_NLParserRuleCall_3()); }
	ruleSkipped_NL
{ after(grammarAccess.getTupleAccess().getSkipped_NLParserRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Tuple__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Tuple__Group__4__Impl
	rule__Tuple__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Tuple__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTupleAccess().getCommaKeyword_4()); }
(
	Comma 
)?
{ after(grammarAccess.getTupleAccess().getCommaKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Tuple__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Tuple__Group__5__Impl
	rule__Tuple__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Tuple__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTupleAccess().getSkipped_NLParserRuleCall_5()); }
	ruleSkipped_NL
{ after(grammarAccess.getTupleAccess().getSkipped_NLParserRuleCall_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Tuple__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Tuple__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Tuple__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTupleAccess().getRightParenthesisKeyword_6()); }

	RightParenthesis 

{ after(grammarAccess.getTupleAccess().getRightParenthesisKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__Tuple__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Tuple__Group_2__0__Impl
	rule__Tuple__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Tuple__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTupleAccess().getSkipped_NLParserRuleCall_2_0()); }
	ruleSkipped_NL
{ after(grammarAccess.getTupleAccess().getSkipped_NLParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Tuple__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Tuple__Group_2__1__Impl
	rule__Tuple__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Tuple__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTupleAccess().getValuesAssignment_2_1()); }
(rule__Tuple__ValuesAssignment_2_1)
{ after(grammarAccess.getTupleAccess().getValuesAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Tuple__Group_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Tuple__Group_2__2__Impl
	rule__Tuple__Group_2__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Tuple__Group_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTupleAccess().getSkipped_NLParserRuleCall_2_2()); }
	ruleSkipped_NL
{ after(grammarAccess.getTupleAccess().getSkipped_NLParserRuleCall_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Tuple__Group_2__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Tuple__Group_2__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Tuple__Group_2__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTupleAccess().getGroup_2_3()); }
(rule__Tuple__Group_2_3__0)*
{ after(grammarAccess.getTupleAccess().getGroup_2_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Tuple__Group_2_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Tuple__Group_2_3__0__Impl
	rule__Tuple__Group_2_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Tuple__Group_2_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTupleAccess().getCommaKeyword_2_3_0()); }

	Comma 

{ after(grammarAccess.getTupleAccess().getCommaKeyword_2_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Tuple__Group_2_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Tuple__Group_2_3__1__Impl
	rule__Tuple__Group_2_3__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Tuple__Group_2_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTupleAccess().getSkipped_NLParserRuleCall_2_3_1()); }
	ruleSkipped_NL
{ after(grammarAccess.getTupleAccess().getSkipped_NLParserRuleCall_2_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Tuple__Group_2_3__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Tuple__Group_2_3__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Tuple__Group_2_3__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTupleAccess().getValuesAssignment_2_3_2()); }
(rule__Tuple__ValuesAssignment_2_3_2)
{ after(grammarAccess.getTupleAccess().getValuesAssignment_2_3_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__List__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__List__Group__0__Impl
	rule__List__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__List__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getListAccess().getListAction_0()); }
(

)
{ after(grammarAccess.getListAccess().getListAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__List__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__List__Group__1__Impl
	rule__List__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__List__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getListAccess().getLeftSquareBracketKeyword_1()); }

	LeftSquareBracket 

{ after(grammarAccess.getListAccess().getLeftSquareBracketKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__List__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__List__Group__2__Impl
	rule__List__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__List__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getListAccess().getGroup_2()); }
(rule__List__Group_2__0)?
{ after(grammarAccess.getListAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__List__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__List__Group__3__Impl
	rule__List__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__List__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getListAccess().getSkipped_NLParserRuleCall_3()); }
	ruleSkipped_NL
{ after(grammarAccess.getListAccess().getSkipped_NLParserRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__List__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__List__Group__4__Impl
	rule__List__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__List__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getListAccess().getCommaKeyword_4()); }
(
	Comma 
)?
{ after(grammarAccess.getListAccess().getCommaKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__List__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__List__Group__5__Impl
	rule__List__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__List__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getListAccess().getSkipped_NLParserRuleCall_5()); }
	ruleSkipped_NL
{ after(grammarAccess.getListAccess().getSkipped_NLParserRuleCall_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__List__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__List__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__List__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getListAccess().getRightSquareBracketKeyword_6()); }

	RightSquareBracket 

{ after(grammarAccess.getListAccess().getRightSquareBracketKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__List__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__List__Group_2__0__Impl
	rule__List__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__List__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getListAccess().getSkipped_NLParserRuleCall_2_0()); }
	ruleSkipped_NL
{ after(grammarAccess.getListAccess().getSkipped_NLParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__List__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__List__Group_2__1__Impl
	rule__List__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__List__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getListAccess().getValuesAssignment_2_1()); }
(rule__List__ValuesAssignment_2_1)
{ after(grammarAccess.getListAccess().getValuesAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__List__Group_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__List__Group_2__2__Impl
	rule__List__Group_2__3
;
finally {
	restoreStackSize(stackSize);
}

rule__List__Group_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getListAccess().getSkipped_NLParserRuleCall_2_2()); }
	ruleSkipped_NL
{ after(grammarAccess.getListAccess().getSkipped_NLParserRuleCall_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__List__Group_2__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__List__Group_2__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__List__Group_2__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getListAccess().getGroup_2_3()); }
(rule__List__Group_2_3__0)*
{ after(grammarAccess.getListAccess().getGroup_2_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__List__Group_2_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__List__Group_2_3__0__Impl
	rule__List__Group_2_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__List__Group_2_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getListAccess().getCommaKeyword_2_3_0()); }

	Comma 

{ after(grammarAccess.getListAccess().getCommaKeyword_2_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__List__Group_2_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__List__Group_2_3__1__Impl
	rule__List__Group_2_3__2
;
finally {
	restoreStackSize(stackSize);
}

rule__List__Group_2_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getListAccess().getSkipped_NLParserRuleCall_2_3_1()); }
	ruleSkipped_NL
{ after(grammarAccess.getListAccess().getSkipped_NLParserRuleCall_2_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__List__Group_2_3__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__List__Group_2_3__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__List__Group_2_3__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getListAccess().getValuesAssignment_2_3_2()); }
(rule__List__ValuesAssignment_2_3_2)
{ after(grammarAccess.getListAccess().getValuesAssignment_2_3_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Dictionary__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Dictionary__Group__0__Impl
	rule__Dictionary__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Dictionary__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDictionaryAccess().getDicitonaryAction_0()); }
(

)
{ after(grammarAccess.getDictionaryAccess().getDicitonaryAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Dictionary__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Dictionary__Group__1__Impl
	rule__Dictionary__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Dictionary__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDictionaryAccess().getLeftCurlyBracketKeyword_1()); }

	LeftCurlyBracket 

{ after(grammarAccess.getDictionaryAccess().getLeftCurlyBracketKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Dictionary__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Dictionary__Group__2__Impl
	rule__Dictionary__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Dictionary__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDictionaryAccess().getGroup_2()); }
(rule__Dictionary__Group_2__0)?
{ after(grammarAccess.getDictionaryAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Dictionary__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Dictionary__Group__3__Impl
	rule__Dictionary__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Dictionary__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDictionaryAccess().getSkipped_NLParserRuleCall_3()); }
	ruleSkipped_NL
{ after(grammarAccess.getDictionaryAccess().getSkipped_NLParserRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Dictionary__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Dictionary__Group__4__Impl
	rule__Dictionary__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Dictionary__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDictionaryAccess().getCommaKeyword_4()); }
(
	Comma 
)?
{ after(grammarAccess.getDictionaryAccess().getCommaKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Dictionary__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Dictionary__Group__5__Impl
	rule__Dictionary__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Dictionary__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDictionaryAccess().getSkipped_NLParserRuleCall_5()); }
	ruleSkipped_NL
{ after(grammarAccess.getDictionaryAccess().getSkipped_NLParserRuleCall_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Dictionary__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Dictionary__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Dictionary__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDictionaryAccess().getRightCurlyBracketKeyword_6()); }

	RightCurlyBracket 

{ after(grammarAccess.getDictionaryAccess().getRightCurlyBracketKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__Dictionary__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Dictionary__Group_2__0__Impl
	rule__Dictionary__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Dictionary__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDictionaryAccess().getSkipped_NLParserRuleCall_2_0()); }
	ruleSkipped_NL
{ after(grammarAccess.getDictionaryAccess().getSkipped_NLParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Dictionary__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Dictionary__Group_2__1__Impl
	rule__Dictionary__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Dictionary__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDictionaryAccess().getEntriesAssignment_2_1()); }
(rule__Dictionary__EntriesAssignment_2_1)
{ after(grammarAccess.getDictionaryAccess().getEntriesAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Dictionary__Group_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Dictionary__Group_2__2__Impl
	rule__Dictionary__Group_2__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Dictionary__Group_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDictionaryAccess().getSkipped_NLParserRuleCall_2_2()); }
	ruleSkipped_NL
{ after(grammarAccess.getDictionaryAccess().getSkipped_NLParserRuleCall_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Dictionary__Group_2__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Dictionary__Group_2__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Dictionary__Group_2__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDictionaryAccess().getGroup_2_3()); }
(rule__Dictionary__Group_2_3__0)*
{ after(grammarAccess.getDictionaryAccess().getGroup_2_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Dictionary__Group_2_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Dictionary__Group_2_3__0__Impl
	rule__Dictionary__Group_2_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Dictionary__Group_2_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDictionaryAccess().getCommaKeyword_2_3_0()); }

	Comma 

{ after(grammarAccess.getDictionaryAccess().getCommaKeyword_2_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Dictionary__Group_2_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Dictionary__Group_2_3__1__Impl
	rule__Dictionary__Group_2_3__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Dictionary__Group_2_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDictionaryAccess().getSkipped_NLParserRuleCall_2_3_1()); }
	ruleSkipped_NL
{ after(grammarAccess.getDictionaryAccess().getSkipped_NLParserRuleCall_2_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Dictionary__Group_2_3__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Dictionary__Group_2_3__2__Impl
	rule__Dictionary__Group_2_3__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Dictionary__Group_2_3__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDictionaryAccess().getEntriesAssignment_2_3_2()); }
(rule__Dictionary__EntriesAssignment_2_3_2)
{ after(grammarAccess.getDictionaryAccess().getEntriesAssignment_2_3_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Dictionary__Group_2_3__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Dictionary__Group_2_3__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Dictionary__Group_2_3__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDictionaryAccess().getSkipped_NLParserRuleCall_2_3_3()); }
	ruleSkipped_NL
{ after(grammarAccess.getDictionaryAccess().getSkipped_NLParserRuleCall_2_3_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__DictionaryEntry__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DictionaryEntry__Group__0__Impl
	rule__DictionaryEntry__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DictionaryEntry__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDictionaryEntryAccess().getKeyAssignment_0()); }
(rule__DictionaryEntry__KeyAssignment_0)
{ after(grammarAccess.getDictionaryEntryAccess().getKeyAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DictionaryEntry__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DictionaryEntry__Group__1__Impl
	rule__DictionaryEntry__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DictionaryEntry__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDictionaryEntryAccess().getSkipped_NLParserRuleCall_1()); }
	ruleSkipped_NL
{ after(grammarAccess.getDictionaryEntryAccess().getSkipped_NLParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DictionaryEntry__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DictionaryEntry__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DictionaryEntry__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDictionaryEntryAccess().getGroup_2()); }
(rule__DictionaryEntry__Group_2__0)?
{ after(grammarAccess.getDictionaryEntryAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__DictionaryEntry__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DictionaryEntry__Group_2__0__Impl
	rule__DictionaryEntry__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DictionaryEntry__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDictionaryEntryAccess().getCOLONTerminalRuleCall_2_0()); }
	RULE_COLON
{ after(grammarAccess.getDictionaryEntryAccess().getCOLONTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DictionaryEntry__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DictionaryEntry__Group_2__1__Impl
	rule__DictionaryEntry__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DictionaryEntry__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDictionaryEntryAccess().getSkipped_NLParserRuleCall_2_1()); }
	ruleSkipped_NL
{ after(grammarAccess.getDictionaryEntryAccess().getSkipped_NLParserRuleCall_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DictionaryEntry__Group_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DictionaryEntry__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DictionaryEntry__Group_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDictionaryEntryAccess().getValueAssignment_2_2()); }
(rule__DictionaryEntry__ValueAssignment_2_2)
{ after(grammarAccess.getDictionaryEntryAccess().getValueAssignment_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__FLOAT_Val__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FLOAT_Val__Group__0__Impl
	rule__FLOAT_Val__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FLOAT_Val__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFLOAT_ValAccess().getAlternatives_0()); }
(rule__FLOAT_Val__Alternatives_0)?
{ after(grammarAccess.getFLOAT_ValAccess().getAlternatives_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FLOAT_Val__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FLOAT_Val__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FLOAT_Val__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFLOAT_ValAccess().getFLOATTerminalRuleCall_1()); }
	RULE_FLOAT
{ after(grammarAccess.getFLOAT_ValAccess().getFLOATTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Skipped_NL__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Skipped_NL__Group__0__Impl
	rule__Skipped_NL__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Skipped_NL__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSkipped_NLAccess().getReverseSolidusKeyword_0()); }

	Backslash 

{ after(grammarAccess.getSkipped_NLAccess().getReverseSolidusKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Skipped_NL__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Skipped_NL__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Skipped_NL__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSkipped_NLAccess().getNLTerminalRuleCall_1()); }
	RULE_NL
{ after(grammarAccess.getSkipped_NLAccess().getNLTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__RELTIME__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RELTIME__Group__0__Impl
	rule__RELTIME__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RELTIME__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRELTIMEAccess().getINTEGERParserRuleCall_0()); }
	ruleINTEGER
{ after(grammarAccess.getRELTIMEAccess().getINTEGERParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RELTIME__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RELTIME__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RELTIME__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRELTIMEAccess().getAlternatives_1()); }
(rule__RELTIME__Alternatives_1)
{ after(grammarAccess.getRELTIMEAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__RELTIME__Group_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RELTIME__Group_1_0__0__Impl
	rule__RELTIME__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RELTIME__Group_1_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRELTIMEAccess().getINTTerminalRuleCall_1_0_0()); }
	RULE_INT
{ after(grammarAccess.getRELTIMEAccess().getINTTerminalRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RELTIME__Group_1_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RELTIME__Group_1_0__1__Impl
	rule__RELTIME__Group_1_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RELTIME__Group_1_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRELTIMEAccess().getCOLONTerminalRuleCall_1_0_1()); }
	RULE_COLON
{ after(grammarAccess.getRELTIMEAccess().getCOLONTerminalRuleCall_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RELTIME__Group_1_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RELTIME__Group_1_0__2__Impl
	rule__RELTIME__Group_1_0__3
;
finally {
	restoreStackSize(stackSize);
}

rule__RELTIME__Group_1_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRELTIMEAccess().getINTTerminalRuleCall_1_0_2()); }
	RULE_INT
{ after(grammarAccess.getRELTIMEAccess().getINTTerminalRuleCall_1_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RELTIME__Group_1_0__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RELTIME__Group_1_0__3__Impl
	rule__RELTIME__Group_1_0__4
;
finally {
	restoreStackSize(stackSize);
}

rule__RELTIME__Group_1_0__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRELTIMEAccess().getCOLONTerminalRuleCall_1_0_3()); }
	RULE_COLON
{ after(grammarAccess.getRELTIMEAccess().getCOLONTerminalRuleCall_1_0_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RELTIME__Group_1_0__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RELTIME__Group_1_0__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RELTIME__Group_1_0__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRELTIMEAccess().getINTTerminalRuleCall_1_0_4()); }
	RULE_INT
{ after(grammarAccess.getRELTIMEAccess().getINTTerminalRuleCall_1_0_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__RELTIME__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RELTIME__Group_1_1__0__Impl
	rule__RELTIME__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RELTIME__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRELTIMEAccess().getCOLONTerminalRuleCall_1_1_0()); }
	RULE_COLON
{ after(grammarAccess.getRELTIMEAccess().getCOLONTerminalRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RELTIME__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RELTIME__Group_1_1__1__Impl
	rule__RELTIME__Group_1_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RELTIME__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRELTIMEAccess().getINTTerminalRuleCall_1_1_1()); }
	RULE_INT
{ after(grammarAccess.getRELTIMEAccess().getINTTerminalRuleCall_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RELTIME__Group_1_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RELTIME__Group_1_1__2__Impl
	rule__RELTIME__Group_1_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__RELTIME__Group_1_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRELTIMEAccess().getCOLONTerminalRuleCall_1_1_2()); }
	RULE_COLON
{ after(grammarAccess.getRELTIMEAccess().getCOLONTerminalRuleCall_1_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RELTIME__Group_1_1__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RELTIME__Group_1_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RELTIME__Group_1_1__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRELTIMEAccess().getINTTerminalRuleCall_1_1_3()); }
	RULE_INT
{ after(grammarAccess.getRELTIMEAccess().getINTTerminalRuleCall_1_1_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__ABSTIME__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ABSTIME__Group_0__0__Impl
	rule__ABSTIME__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ABSTIME__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getABSTIMEAccess().getGroup_0_0()); }
(rule__ABSTIME__Group_0_0__0)
{ after(grammarAccess.getABSTIMEAccess().getGroup_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ABSTIME__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ABSTIME__Group_0__1__Impl
	rule__ABSTIME__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ABSTIME__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getABSTIMEAccess().getAlternatives_0_1()); }
(rule__ABSTIME__Alternatives_0_1)
{ after(grammarAccess.getABSTIMEAccess().getAlternatives_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ABSTIME__Group_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ABSTIME__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ABSTIME__Group_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getABSTIMEAccess().getGroup_0_2()); }
(rule__ABSTIME__Group_0_2__0)?
{ after(grammarAccess.getABSTIMEAccess().getGroup_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ABSTIME__Group_0_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ABSTIME__Group_0_0__0__Impl
	rule__ABSTIME__Group_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ABSTIME__Group_0_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getABSTIMEAccess().getINTTerminalRuleCall_0_0_0()); }
	RULE_INT
{ after(grammarAccess.getABSTIMEAccess().getINTTerminalRuleCall_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ABSTIME__Group_0_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ABSTIME__Group_0_0__1__Impl
	rule__ABSTIME__Group_0_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ABSTIME__Group_0_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getABSTIMEAccess().getMINUSTerminalRuleCall_0_0_1()); }
	RULE_MINUS
{ after(grammarAccess.getABSTIMEAccess().getMINUSTerminalRuleCall_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ABSTIME__Group_0_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ABSTIME__Group_0_0__2__Impl
	rule__ABSTIME__Group_0_0__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ABSTIME__Group_0_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getABSTIMEAccess().getAlternatives_0_0_2()); }
(rule__ABSTIME__Alternatives_0_0_2)
{ after(grammarAccess.getABSTIMEAccess().getAlternatives_0_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ABSTIME__Group_0_0__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ABSTIME__Group_0_0__3__Impl
	rule__ABSTIME__Group_0_0__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ABSTIME__Group_0_0__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getABSTIMEAccess().getMINUSTerminalRuleCall_0_0_3()); }
	RULE_MINUS
{ after(grammarAccess.getABSTIMEAccess().getMINUSTerminalRuleCall_0_0_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ABSTIME__Group_0_0__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ABSTIME__Group_0_0__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ABSTIME__Group_0_0__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getABSTIMEAccess().getINTTerminalRuleCall_0_0_4()); }
	RULE_INT
{ after(grammarAccess.getABSTIMEAccess().getINTTerminalRuleCall_0_0_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__ABSTIME__Group_0_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ABSTIME__Group_0_2__0__Impl
	rule__ABSTIME__Group_0_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ABSTIME__Group_0_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getABSTIMEAccess().getINTTerminalRuleCall_0_2_0()); }
	RULE_INT
{ after(grammarAccess.getABSTIMEAccess().getINTTerminalRuleCall_0_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ABSTIME__Group_0_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ABSTIME__Group_0_2__1__Impl
	rule__ABSTIME__Group_0_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ABSTIME__Group_0_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getABSTIMEAccess().getCOLONTerminalRuleCall_0_2_1()); }
	RULE_COLON
{ after(grammarAccess.getABSTIMEAccess().getCOLONTerminalRuleCall_0_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ABSTIME__Group_0_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ABSTIME__Group_0_2__2__Impl
	rule__ABSTIME__Group_0_2__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ABSTIME__Group_0_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getABSTIMEAccess().getINTTerminalRuleCall_0_2_2()); }
	RULE_INT
{ after(grammarAccess.getABSTIMEAccess().getINTTerminalRuleCall_0_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ABSTIME__Group_0_2__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ABSTIME__Group_0_2__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ABSTIME__Group_0_2__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getABSTIMEAccess().getGroup_0_2_3()); }
(rule__ABSTIME__Group_0_2_3__0)?
{ after(grammarAccess.getABSTIMEAccess().getGroup_0_2_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__ABSTIME__Group_0_2_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ABSTIME__Group_0_2_3__0__Impl
	rule__ABSTIME__Group_0_2_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ABSTIME__Group_0_2_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getABSTIMEAccess().getCOLONTerminalRuleCall_0_2_3_0()); }
	RULE_COLON
{ after(grammarAccess.getABSTIMEAccess().getCOLONTerminalRuleCall_0_2_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ABSTIME__Group_0_2_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ABSTIME__Group_0_2_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ABSTIME__Group_0_2_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getABSTIMEAccess().getINTTerminalRuleCall_0_2_3_1()); }
	RULE_INT
{ after(grammarAccess.getABSTIMEAccess().getINTTerminalRuleCall_0_2_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ABSTIME__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ABSTIME__Group_1__0__Impl
	rule__ABSTIME__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ABSTIME__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getABSTIMEAccess().getGroup_1_0()); }
(rule__ABSTIME__Group_1_0__0)
{ after(grammarAccess.getABSTIMEAccess().getGroup_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ABSTIME__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ABSTIME__Group_1__1__Impl
	rule__ABSTIME__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ABSTIME__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getABSTIMEAccess().getAlternatives_1_1()); }
(rule__ABSTIME__Alternatives_1_1)
{ after(grammarAccess.getABSTIMEAccess().getAlternatives_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ABSTIME__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ABSTIME__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ABSTIME__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getABSTIMEAccess().getGroup_1_2()); }
(rule__ABSTIME__Group_1_2__0)?
{ after(grammarAccess.getABSTIMEAccess().getGroup_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ABSTIME__Group_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ABSTIME__Group_1_0__0__Impl
	rule__ABSTIME__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ABSTIME__Group_1_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getABSTIMEAccess().getINTTerminalRuleCall_1_0_0()); }
	RULE_INT
{ after(grammarAccess.getABSTIMEAccess().getINTTerminalRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ABSTIME__Group_1_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ABSTIME__Group_1_0__1__Impl
	rule__ABSTIME__Group_1_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ABSTIME__Group_1_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getABSTIMEAccess().getSolidusKeyword_1_0_1()); }

	Solidus 

{ after(grammarAccess.getABSTIMEAccess().getSolidusKeyword_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ABSTIME__Group_1_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ABSTIME__Group_1_0__2__Impl
	rule__ABSTIME__Group_1_0__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ABSTIME__Group_1_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getABSTIMEAccess().getAlternatives_1_0_2()); }
(rule__ABSTIME__Alternatives_1_0_2)
{ after(grammarAccess.getABSTIMEAccess().getAlternatives_1_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ABSTIME__Group_1_0__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ABSTIME__Group_1_0__3__Impl
	rule__ABSTIME__Group_1_0__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ABSTIME__Group_1_0__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getABSTIMEAccess().getSolidusKeyword_1_0_3()); }

	Solidus 

{ after(grammarAccess.getABSTIMEAccess().getSolidusKeyword_1_0_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ABSTIME__Group_1_0__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ABSTIME__Group_1_0__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ABSTIME__Group_1_0__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getABSTIMEAccess().getINTTerminalRuleCall_1_0_4()); }
	RULE_INT
{ after(grammarAccess.getABSTIMEAccess().getINTTerminalRuleCall_1_0_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__ABSTIME__Group_1_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ABSTIME__Group_1_2__0__Impl
	rule__ABSTIME__Group_1_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ABSTIME__Group_1_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getABSTIMEAccess().getINTTerminalRuleCall_1_2_0()); }
	RULE_INT
{ after(grammarAccess.getABSTIMEAccess().getINTTerminalRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ABSTIME__Group_1_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ABSTIME__Group_1_2__1__Impl
	rule__ABSTIME__Group_1_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ABSTIME__Group_1_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getABSTIMEAccess().getCOLONTerminalRuleCall_1_2_1()); }
	RULE_COLON
{ after(grammarAccess.getABSTIMEAccess().getCOLONTerminalRuleCall_1_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ABSTIME__Group_1_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ABSTIME__Group_1_2__2__Impl
	rule__ABSTIME__Group_1_2__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ABSTIME__Group_1_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getABSTIMEAccess().getINTTerminalRuleCall_1_2_2()); }
	RULE_INT
{ after(grammarAccess.getABSTIMEAccess().getINTTerminalRuleCall_1_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ABSTIME__Group_1_2__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ABSTIME__Group_1_2__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ABSTIME__Group_1_2__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getABSTIMEAccess().getGroup_1_2_3()); }
(rule__ABSTIME__Group_1_2_3__0)?
{ after(grammarAccess.getABSTIMEAccess().getGroup_1_2_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__ABSTIME__Group_1_2_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ABSTIME__Group_1_2_3__0__Impl
	rule__ABSTIME__Group_1_2_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ABSTIME__Group_1_2_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getABSTIMEAccess().getCOLONTerminalRuleCall_1_2_3_0()); }
	RULE_COLON
{ after(grammarAccess.getABSTIMEAccess().getCOLONTerminalRuleCall_1_2_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ABSTIME__Group_1_2_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ABSTIME__Group_1_2_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ABSTIME__Group_1_2_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getABSTIMEAccess().getINTTerminalRuleCall_1_2_3_1()); }
	RULE_INT
{ after(grammarAccess.getABSTIMEAccess().getINTTerminalRuleCall_1_2_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ID_STMT__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ID_STMT__Group__0__Impl
	rule__ID_STMT__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ID_STMT__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getID_STMTAccess().getIDTerminalRuleCall_0()); }
	RULE_ID
{ after(grammarAccess.getID_STMTAccess().getIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ID_STMT__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ID_STMT__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ID_STMT__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getID_STMTAccess().getAlternatives_1()); }
(rule__ID_STMT__Alternatives_1)*
{ after(grammarAccess.getID_STMTAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ASTRIUM_ID__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ASTRIUM_ID__Group__0__Impl
	rule__ASTRIUM_ID__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ASTRIUM_ID__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getASTRIUM_IDAccess().getIDTerminalRuleCall_0()); }
	RULE_ID
{ after(grammarAccess.getASTRIUM_IDAccess().getIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ASTRIUM_ID__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ASTRIUM_ID__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ASTRIUM_ID__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getASTRIUM_IDAccess().getIDTerminalRuleCall_1()); }
(	RULE_ID)*
{ after(grammarAccess.getASTRIUM_IDAccess().getIDTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ASTRIUM_TIME__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ASTRIUM_TIME__Group__0__Impl
	rule__ASTRIUM_TIME__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ASTRIUM_TIME__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getASTRIUM_TIMEAccess().getGroup_0()); }
(rule__ASTRIUM_TIME__Group_0__0)?
{ after(grammarAccess.getASTRIUM_TIMEAccess().getGroup_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ASTRIUM_TIME__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ASTRIUM_TIME__Group__1__Impl
	rule__ASTRIUM_TIME__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ASTRIUM_TIME__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getASTRIUM_TIMEAccess().getINTTerminalRuleCall_1()); }
	RULE_INT
{ after(grammarAccess.getASTRIUM_TIMEAccess().getINTTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ASTRIUM_TIME__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ASTRIUM_TIME__Group__2__Impl
	rule__ASTRIUM_TIME__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ASTRIUM_TIME__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getASTRIUM_TIMEAccess().getCOLONTerminalRuleCall_2()); }
	RULE_COLON
{ after(grammarAccess.getASTRIUM_TIMEAccess().getCOLONTerminalRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ASTRIUM_TIME__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ASTRIUM_TIME__Group__3__Impl
	rule__ASTRIUM_TIME__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ASTRIUM_TIME__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getASTRIUM_TIMEAccess().getINTTerminalRuleCall_3()); }
	RULE_INT
{ after(grammarAccess.getASTRIUM_TIMEAccess().getINTTerminalRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ASTRIUM_TIME__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ASTRIUM_TIME__Group__4__Impl
	rule__ASTRIUM_TIME__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__ASTRIUM_TIME__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getASTRIUM_TIMEAccess().getCOLONTerminalRuleCall_4()); }
	RULE_COLON
{ after(grammarAccess.getASTRIUM_TIMEAccess().getCOLONTerminalRuleCall_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ASTRIUM_TIME__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ASTRIUM_TIME__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ASTRIUM_TIME__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getASTRIUM_TIMEAccess().getINTTerminalRuleCall_5()); }
	RULE_INT
{ after(grammarAccess.getASTRIUM_TIMEAccess().getINTTerminalRuleCall_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__ASTRIUM_TIME__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ASTRIUM_TIME__Group_0__0__Impl
	rule__ASTRIUM_TIME__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ASTRIUM_TIME__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getASTRIUM_TIMEAccess().getGroup_0_0()); }
(rule__ASTRIUM_TIME__Group_0_0__0)?
{ after(grammarAccess.getASTRIUM_TIMEAccess().getGroup_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ASTRIUM_TIME__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ASTRIUM_TIME__Group_0__1__Impl
	rule__ASTRIUM_TIME__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ASTRIUM_TIME__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getASTRIUM_TIMEAccess().getINTTerminalRuleCall_0_1()); }
	RULE_INT
{ after(grammarAccess.getASTRIUM_TIMEAccess().getINTTerminalRuleCall_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ASTRIUM_TIME__Group_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ASTRIUM_TIME__Group_0__2__Impl
	rule__ASTRIUM_TIME__Group_0__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ASTRIUM_TIME__Group_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getASTRIUM_TIMEAccess().getIDTerminalRuleCall_0_2()); }
	RULE_ID
{ after(grammarAccess.getASTRIUM_TIMEAccess().getIDTerminalRuleCall_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ASTRIUM_TIME__Group_0__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ASTRIUM_TIME__Group_0__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ASTRIUM_TIME__Group_0__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getASTRIUM_TIMEAccess().getINTTerminalRuleCall_0_3()); }
	RULE_INT
{ after(grammarAccess.getASTRIUM_TIMEAccess().getINTTerminalRuleCall_0_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__ASTRIUM_TIME__Group_0_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ASTRIUM_TIME__Group_0_0__0__Impl
	rule__ASTRIUM_TIME__Group_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ASTRIUM_TIME__Group_0_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getASTRIUM_TIMEAccess().getIDTerminalRuleCall_0_0_0()); }
	RULE_ID
{ after(grammarAccess.getASTRIUM_TIMEAccess().getIDTerminalRuleCall_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ASTRIUM_TIME__Group_0_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ASTRIUM_TIME__Group_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ASTRIUM_TIME__Group_0_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getASTRIUM_TIMEAccess().getFullStopKeyword_0_0_1()); }

	FullStop 

{ after(grammarAccess.getASTRIUM_TIMEAccess().getFullStopKeyword_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__INTEGER__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__INTEGER__Group__0__Impl
	rule__INTEGER__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__INTEGER__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getINTEGERAccess().getAlternatives_0()); }
(rule__INTEGER__Alternatives_0)?
{ after(grammarAccess.getINTEGERAccess().getAlternatives_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__INTEGER__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__INTEGER__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__INTEGER__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getINTEGERAccess().getINTTerminalRuleCall_1()); }
	RULE_INT
{ after(grammarAccess.getINTEGERAccess().getINTTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__SpellDatabase__DatabaseAssignment_1_0_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSpellDatabaseAccess().getDatabaseAstriumDatabaseParserRuleCall_1_0_3_0()); }
	ruleAstriumDatabase{ after(grammarAccess.getSpellDatabaseAccess().getDatabaseAstriumDatabaseParserRuleCall_1_0_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SpellDatabase__DatabaseEntryAssignment_1_1_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSpellDatabaseAccess().getDatabaseEntryDatabaseEntryParserRuleCall_1_1_1_0_0()); }
	ruleDatabaseEntry{ after(grammarAccess.getSpellDatabaseAccess().getDatabaseEntryDatabaseEntryParserRuleCall_1_1_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SpellDatabase__DatabaseEntryAssignment_1_1_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSpellDatabaseAccess().getDatabaseEntryDatabaseEntryParserRuleCall_1_1_1_1_1_0()); }
	ruleDatabaseEntry{ after(grammarAccess.getSpellDatabaseAccess().getDatabaseEntryDatabaseEntryParserRuleCall_1_1_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SpellDatabase__CsvEntriesAssignment_1_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSpellDatabaseAccess().getCsvEntriesCSVEntryParserRuleCall_1_2_1_0()); }
	ruleCSVEntry{ after(grammarAccess.getSpellDatabaseAccess().getCsvEntriesCSVEntryParserRuleCall_1_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SpellDatabase__CsvEntriesAssignment_1_2_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSpellDatabaseAccess().getCsvEntriesCSVEntryParserRuleCall_1_2_3_1_0()); }
	ruleCSVEntry{ after(grammarAccess.getSpellDatabaseAccess().getCsvEntriesCSVEntryParserRuleCall_1_2_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AstriumDatabase__EntriesAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAstriumDatabaseAccess().getEntriesAstriumHeaderEntryParserRuleCall_1_0_0()); }
	ruleAstriumHeaderEntry{ after(grammarAccess.getAstriumDatabaseAccess().getEntriesAstriumHeaderEntryParserRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AstriumDatabase__EntriesAssignment_4_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAstriumDatabaseAccess().getEntriesAstriumVariableEntryParserRuleCall_4_0_0()); }
	ruleAstriumVariableEntry{ after(grammarAccess.getAstriumDatabaseAccess().getEntriesAstriumVariableEntryParserRuleCall_4_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AstriumVariableEntry__CommentAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAstriumVariableEntryAccess().getCommentASTRIUM_COMMENTTerminalRuleCall_0_1_0()); }
	RULE_ASTRIUM_COMMENT{ after(grammarAccess.getAstriumVariableEntryAccess().getCommentASTRIUM_COMMENTTerminalRuleCall_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AstriumVariableEntry__NameAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAstriumVariableEntryAccess().getNameASTRIUM_IDParserRuleCall_1_2_0()); }
	ruleASTRIUM_ID{ after(grammarAccess.getAstriumVariableEntryAccess().getNameASTRIUM_IDParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AstriumVariableEntry__AstriumTimeAssignment_1_5_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAstriumVariableEntryAccess().getAstriumTimeASTRIUM_TIMEParserRuleCall_1_5_0_0()); }
	ruleASTRIUM_TIME{ after(grammarAccess.getAstriumVariableEntryAccess().getAstriumTimeASTRIUM_TIMEParserRuleCall_1_5_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AstriumVariableEntry__ValueAssignment_1_5_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAstriumVariableEntryAccess().getValueAtomParserRuleCall_1_5_1_0()); }
	ruleAtom{ after(grammarAccess.getAstriumVariableEntryAccess().getValueAtomParserRuleCall_1_5_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AstriumVariableEntry__SimpleValueAssignment_1_5_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAstriumVariableEntryAccess().getSimpleValueSINGLE_VALUEParserRuleCall_1_5_2_0()); }
	ruleSINGLE_VALUE{ after(grammarAccess.getAstriumVariableEntryAccess().getSimpleValueSINGLE_VALUEParserRuleCall_1_5_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AstriumHeaderEntry__CommentAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAstriumHeaderEntryAccess().getCommentASTRIUM_COMMENTTerminalRuleCall_0_1_0()); }
	RULE_ASTRIUM_COMMENT{ after(grammarAccess.getAstriumHeaderEntryAccess().getCommentASTRIUM_COMMENTTerminalRuleCall_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AstriumHeaderEntry__NameAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAstriumHeaderEntryAccess().getNameASTRIUM_IDParserRuleCall_1_1_0()); }
	ruleASTRIUM_ID{ after(grammarAccess.getAstriumHeaderEntryAccess().getNameASTRIUM_IDParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AstriumHeaderEntry__AstriumTimeAssignment_1_4_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAstriumHeaderEntryAccess().getAstriumTimeASTRIUM_TIMEParserRuleCall_1_4_0_0()); }
	ruleASTRIUM_TIME{ after(grammarAccess.getAstriumHeaderEntryAccess().getAstriumTimeASTRIUM_TIMEParserRuleCall_1_4_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AstriumHeaderEntry__ValueAssignment_1_4_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAstriumHeaderEntryAccess().getValueAtomParserRuleCall_1_4_1_0()); }
	ruleAtom{ after(grammarAccess.getAstriumHeaderEntryAccess().getValueAtomParserRuleCall_1_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AstriumHeaderEntry__SimpleValueAssignment_1_4_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAstriumHeaderEntryAccess().getSimpleValueSINGLE_VALUEParserRuleCall_1_4_2_0()); }
	ruleSINGLE_VALUE{ after(grammarAccess.getAstriumHeaderEntryAccess().getSimpleValueSINGLE_VALUEParserRuleCall_1_4_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CSVCommand__CommandAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCSVCommandAccess().getCommandID_STMTParserRuleCall_2_0()); }
	ruleID_STMT{ after(grammarAccess.getCSVCommandAccess().getCommandID_STMTParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CSVCommand__ArgsAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCSVCommandAccess().getArgsTCArgsParserRuleCall_3_1_0()); }
	ruleTCArgs{ after(grammarAccess.getCSVCommandAccess().getArgsTCArgsParserRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CSVCommand__ArgsAssignment_3_2_0_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCSVCommandAccess().getArgsTCArgsParserRuleCall_3_2_0_3_0()); }
	ruleTCArgs{ after(grammarAccess.getCSVCommandAccess().getArgsTCArgsParserRuleCall_3_2_0_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TCArgs__TcNameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTCArgsAccess().getTcNameTCValueParserRuleCall_0_0()); }
	ruleTCValue{ after(grammarAccess.getTCArgsAccess().getTcNameTCValueParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TCArgs__TcValueAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTCArgsAccess().getTcValueTCValueParserRuleCall_2_0()); }
	ruleTCValue{ after(grammarAccess.getTCArgsAccess().getTcValueTCValueParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TCArgs__TcModAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTCArgsAccess().getTcModSTATE_EXPRTerminalRuleCall_4_0()); }
	RULE_STATE_EXPR{ after(grammarAccess.getTCArgsAccess().getTcModSTATE_EXPRTerminalRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TCArgs__ToleranceAssignment_5_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTCArgsAccess().getTolerancePosIntOrFloatParserRuleCall_5_0_1_0()); }
	rulePosIntOrFloat{ after(grammarAccess.getTCArgsAccess().getTolerancePosIntOrFloatParserRuleCall_5_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CSVTelemetry__TmArgAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCSVTelemetryAccess().getTmArgTCArgsParserRuleCall_3_0()); }
	ruleTCArgs{ after(grammarAccess.getCSVTelemetryAccess().getTmArgTCArgsParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CSVSpell__CmdAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCSVSpellAccess().getCmdSpellCommandParserRuleCall_2_0()); }
	ruleSpellCommand{ after(grammarAccess.getCSVSpellAccess().getCmdSpellCommandParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SpellCommand__ValueAssignment_0_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSpellCommandAccess().getValueIntOrFloatParserRuleCall_0_3_0()); }
	ruleIntOrFloat{ after(grammarAccess.getSpellCommandAccess().getValueIntOrFloatParserRuleCall_0_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SpellCommand__UnitAssignment_0_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSpellCommandAccess().getUnitTIME_EXPRTerminalRuleCall_0_5_0()); }
	RULE_TIME_EXPR{ after(grammarAccess.getSpellCommandAccess().getUnitTIME_EXPRTerminalRuleCall_0_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DatabaseEntry__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDatabaseEntryAccess().getNameKeyValueParserRuleCall_0_0()); }
	ruleKeyValue{ after(grammarAccess.getDatabaseEntryAccess().getNameKeyValueParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DatabaseEntry__ValueAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDatabaseEntryAccess().getValueDatabaseValueParserRuleCall_4_0()); }
	ruleDatabaseValue{ after(grammarAccess.getDatabaseEntryAccess().getValueDatabaseValueParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Lambda_Stmt__VariablesAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLambda_StmtAccess().getVariablesLambda_VarsParserRuleCall_2_0()); }
	ruleLambda_Vars{ after(grammarAccess.getLambda_StmtAccess().getVariablesLambda_VarsParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Lambda_Stmt__ValAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLambda_StmtAccess().getValLambda_FunctionParserRuleCall_4_0()); }
	ruleLambda_Function{ after(grammarAccess.getLambda_StmtAccess().getValLambda_FunctionParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Tuple__ValuesAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTupleAccess().getValuesAlternatives_2_1_0()); }
(rule__Tuple__ValuesAlternatives_2_1_0)
{ after(grammarAccess.getTupleAccess().getValuesAlternatives_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Tuple__ValuesAssignment_2_3_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTupleAccess().getValuesAlternatives_2_3_2_0()); }
(rule__Tuple__ValuesAlternatives_2_3_2_0)
{ after(grammarAccess.getTupleAccess().getValuesAlternatives_2_3_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__List__ValuesAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getListAccess().getValuesAlternatives_2_1_0()); }
(rule__List__ValuesAlternatives_2_1_0)
{ after(grammarAccess.getListAccess().getValuesAlternatives_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__List__ValuesAssignment_2_3_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getListAccess().getValuesAlternatives_2_3_2_0()); }
(rule__List__ValuesAlternatives_2_3_2_0)
{ after(grammarAccess.getListAccess().getValuesAlternatives_2_3_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Dictionary__EntriesAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDictionaryAccess().getEntriesDictionaryEntryParserRuleCall_2_1_0()); }
	ruleDictionaryEntry{ after(grammarAccess.getDictionaryAccess().getEntriesDictionaryEntryParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Dictionary__EntriesAssignment_2_3_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDictionaryAccess().getEntriesDictionaryEntryParserRuleCall_2_3_2_0()); }
	ruleDictionaryEntry{ after(grammarAccess.getDictionaryAccess().getEntriesDictionaryEntryParserRuleCall_2_3_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DictionaryEntry__KeyAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDictionaryEntryAccess().getKeyAlternatives_0_0()); }
(rule__DictionaryEntry__KeyAlternatives_0_0)
{ after(grammarAccess.getDictionaryEntryAccess().getKeyAlternatives_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DictionaryEntry__ValueAssignment_2_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDictionaryEntryAccess().getValueAlternatives_2_2_0()); }
(rule__DictionaryEntry__ValueAlternatives_2_2_0)
{ after(grammarAccess.getDictionaryEntryAccess().getValueAlternatives_2_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RelDate__ValAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelDateAccess().getValRELTIMEParserRuleCall_0()); }
	ruleRELTIME{ after(grammarAccess.getRelDateAccess().getValRELTIMEParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Date__ValAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDateAccess().getValABSTIMEParserRuleCall_0()); }
	ruleABSTIME{ after(grammarAccess.getDateAccess().getValABSTIMEParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Boolean__ValAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanAccess().getValBOOL_EXPRTerminalRuleCall_0()); }
	RULE_BOOL_EXPR{ after(grammarAccess.getBooleanAccess().getValBOOL_EXPRTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StringValue__ValAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringValueAccess().getValSTRINGTerminalRuleCall_0()); }
	RULE_STRING{ after(grammarAccess.getStringValueAccess().getValSTRINGTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Number__ValAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberAccess().getValBIN_HEX_OCTTerminalRuleCall_0_0()); }
	RULE_BIN_HEX_OCT{ after(grammarAccess.getNumberAccess().getValBIN_HEX_OCTTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Number__ValIntAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberAccess().getValIntINTEGERParserRuleCall_1_0()); }
	ruleINTEGER{ after(grammarAccess.getNumberAccess().getValIntINTEGERParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Number__ValStrAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberAccess().getValStrFLOAT_ValParserRuleCall_2_0()); }
	ruleFLOAT_Val{ after(grammarAccess.getNumberAccess().getValStrFLOAT_ValParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


