/*
* generated by Xtext
*/
package lu.ses.engineering.spell.ui.labeling

import com.google.inject.Inject
import lu.ses.engineering.spell.spellDatabase.Atom
import lu.ses.engineering.spell.spellDatabase.CSVCommand
import lu.ses.engineering.spell.spellDatabase.CSVSpell
import lu.ses.engineering.spell.spellDatabase.CSVTelemetry
import lu.ses.engineering.spell.spellDatabase.DatabaseEntry
import lu.ses.engineering.spell.spellDatabase.Date
import lu.ses.engineering.spell.spellDatabase.Dictionary
import lu.ses.engineering.spell.spellDatabase.DictionaryEntry
import lu.ses.engineering.spell.spellDatabase.List
import lu.ses.engineering.spell.spellDatabase.PauseCommand
import lu.ses.engineering.spell.spellDatabase.StringValue
import lu.ses.engineering.spell.spellDatabase.TCArgs
import lu.ses.engineering.spell.spellDatabase.Tuple
import lu.ses.engineering.spell.spellDatabase.WaitCommand
import lu.ses.engineering.spell.spellDatabase.Number
import lu.ses.engineering.spell.spellDatabase.Boolean
import org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider
import org.eclipse.xtext.ui.label.DefaultEObjectLabelProvider

/**
 * Provides labels for a EObjects.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#labelProvider
 */
class SpellDatabaseLabelProvider extends DefaultEObjectLabelProvider {

	@Inject
	new(AdapterFactoryLabelProvider delegate) {
		super(delegate);
	}

	// Labels and icons can be computed like this:
	
	def text(Tuple ele) {
		'(...)'	
	}
	
	def text(Dictionary ele) {
		'{...}'	
	}
	
	def text(List ele) {
		'[...]'
	}
	
	def text(CSVTelemetry e){
		'Verify ' + e.tmArg.tcName + ' == ' +  e.tmArg.tcValue + ' (' + e.tmArg.tcMod + ')' 
	}
	
	def text(CSVCommand e){
		'Send ' + e.command  
	}
	
	def text(TCArgs e){
		if (e.tolerance != null){
			e.tcName + ' = ' + e.tcValue + ' (' + e.tcMod + ') Tolerance=' + e.tolerance
		} else{
			e.tcName + ' = ' + e.tcValue + ' (' + e.tcMod + ')' 
		}
		
	}
	
	def text(CSVSpell s){
		doGetText(s.cmd)
	}
	
	def text(WaitCommand e){
		'Wait ' + e.value + ' ' + e.unit + 'S'
	}	
	
	def text(PauseCommand e){
		'Pause'		
	}		
	
	def text(Number e) {
		if (e.^val == null){
			if (e.valStr != null){
				e.valStr	
			} else {
				e.valInt.toString
				
			}
			
		} else {
			e.^val
		}
	}
	
	def text(DatabaseEntry e){
		e.name + ' = ' + doGetText(e.value) 
	}
	
	def text(StringValue e) {
		e.^val
	}
	
	def text(Boolean e) {
		e.^val
	}
	
	def text(Date e) {
		e.^val
	}
	def text(DictionaryEntry e){
		if (e.key instanceof Atom){
			if (e.value instanceof Atom){
				doGetText(e.key) + " : " + doGetText(e.value)
			} else {
				doGetText(e.key) + " : " + doGetText(e.value)
			}
		} else if (e.value instanceof Atom){
			doGetText(e.key) + " : " + doGetText(e.value)
		} else {
			null
		}
	}
	// Labels and icons can be computed like this:
	
//	def text(Greeting ele) {
//		'A greeting to ' + ele.name
//	}
//
//	def image(Greeting ele) {
//		'Greeting.gif'
//	}
}
