/*
* generated by Xtext
*/
package lu.ses.engineering.spell.ui.outline

import lu.ses.engineering.spell.spellDatabase.Atom
import lu.ses.engineering.spell.spellDatabase.CSVEntry
import lu.ses.engineering.spell.spellDatabase.CSVSpell
import lu.ses.engineering.spell.spellDatabase.CSVTelemetry
import lu.ses.engineering.spell.spellDatabase.DatabaseEntry
import lu.ses.engineering.spell.spellDatabase.DictionaryEntry
import lu.ses.engineering.spell.spellDatabase.PauseCommand
import lu.ses.engineering.spell.spellDatabase.SpellDatabase
import lu.ses.engineering.spell.spellDatabase.WaitCommand
import org.eclipse.xtext.ui.editor.outline.IOutlineNode
import org.eclipse.xtext.ui.editor.outline.impl.DefaultOutlineTreeProvider
import org.eclipse.xtext.ui.editor.outline.impl.DocumentRootNode

/**
 * Customization of the default outline structure.
 *
 * see http://www.eclipse.org/Xtext/documentation.html#outline
 */
class SpellDatabaseOutlineTreeProvider extends DefaultOutlineTreeProvider {
	def _createChildren(DocumentRootNode parentNode,SpellDatabase db) {
		
    	//for (DatabaseEntry e : db.databaseEntry) {
    	//	createNode(parentNode, e);
    	//}
    	//for (CSVEntry e : db.csvEntries) {
    	//	createNode(parentNode, e);
    	//}
    }
    def _isLeaf(SpellDatabase e){
		true 
	}
    def _isLeaf(CSVTelemetry e){
		true 
	}
    def _isLeaf(DictionaryEntry e){
    	e.key instanceof Atom && (e.value instanceof Atom || e.value == null)
    }
    
    def _isLeaf(DatabaseEntry e){
    	e.value instanceof Atom
    }
    
    def _isLeaf(WaitCommand w){
    	true
    }
    def _isLeaf(PauseCommand w){
    	true
    }
    
    def _createChildren(IOutlineNode parentNode,CSVSpell s){
    	createChildren(parentNode, s.cmd);
    }
    
	def _createChildren(IOutlineNode parentNode,DatabaseEntry e) {
    	if (!(e.value instanceof Atom)){    		
    		createChildren(parentNode, e.value);		
    	}
    }
    
	def _createChildren(IOutlineNode parentNode,DictionaryEntry e) {
    	if (e.key instanceof Atom){
    		if (!(e.value instanceof Atom)){
    			if (e.value != null)
    				createChildren(parentNode, e.value);
    		}    		
    	} else {
    		createNode(parentNode, e.key);
    		createNode(parentNode, e.value);
    	}
    }
}
