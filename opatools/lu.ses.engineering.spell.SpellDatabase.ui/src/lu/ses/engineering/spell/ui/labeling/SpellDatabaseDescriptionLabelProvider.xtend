/*
* generated by Xtext
*/
package lu.ses.engineering.spell.ui.labeling

import lu.ses.engineering.spell.spellDatabase.StringValue
import lu.ses.engineering.spell.ui.SpellDatabaseUiModule
import org.eclipse.jface.preference.JFacePreferences
import org.eclipse.jface.viewers.StyledString
import org.eclipse.xtext.ui.label.DefaultDescriptionLabelProvider

//import org.eclipse.xtext.resource.IEObjectDescription

/**
 * Provides labels for a IEObjectDescriptions and IResourceDescriptions.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#labelProvider
 */
class SpellDatabaseDescriptionLabelProvider extends DefaultDescriptionLabelProvider  {

	def getStyledText(StringValue strValue){
		var tmValue = strValue.^val;
		System.out.println("Testing ("+tmValue+") for getStyledText(...)");
		val db      = SpellDatabaseUiModule.getCurrentDatabase();
		if (tmValue.startsWith("'")){
			tmValue = tmValue.substring(1,tmValue.length()-1);
		}
		if (tmValue.startsWith("T ")){
			tmValue	= tmValue.substring(2);
			if (db.isTelemetryParameter(tmValue)){
				return new StyledString(strValue.^val,StyledString.createColorRegistryStyler(JFacePreferences.QUALIFIER_COLOR,null));
			}
		}
		
		if (tmValue.startsWith("C ")){
			tmValue	= tmValue.substring(2);
			if (db.isTelemetryParameter(tmValue)){
				return new StyledString(strValue.^val,StyledString.createColorRegistryStyler(JFacePreferences.QUALIFIER_COLOR,null));
			}
		}
		if (db.isTelemetryParameter(tmValue)){
			return new StyledString(strValue.^val,StyledString.createColorRegistryStyler(JFacePreferences.QUALIFIER_COLOR,null));
		}
		if (db.isTelemetryParameter(tmValue)){
			return new StyledString(strValue.^val,StyledString.createColorRegistryStyler(JFacePreferences.QUALIFIER_COLOR,null));
		}
	}
	def styledText(StringValue strValue){
		var tmValue = strValue.^val;
		System.out.println("Testing ("+tmValue+") for styledText(...)");
		val db      = SpellDatabaseUiModule.getCurrentDatabase();
		if (tmValue.startsWith("'")){
			tmValue = tmValue.substring(1,tmValue.length()-1);
		}
		if (tmValue.startsWith("T ")){
			tmValue	= tmValue.substring(2);
			if (db.isTelemetryParameter(tmValue)){
				return new StyledString(strValue.^val,StyledString.createColorRegistryStyler(JFacePreferences.QUALIFIER_COLOR,null));
			}
		}
		
		if (tmValue.startsWith("C ")){
			tmValue	= tmValue.substring(2);
			if (db.isTelemetryParameter(tmValue)){
				return new StyledString(strValue.^val,StyledString.createColorRegistryStyler(JFacePreferences.QUALIFIER_COLOR,null));
			}
		}
		if (db.isTelemetryParameter(tmValue)){
			return new StyledString(strValue.^val,StyledString.createColorRegistryStyler(JFacePreferences.QUALIFIER_COLOR,null));
		}
		if (db.isTelemetryParameter(tmValue)){
			return new StyledString(strValue.^val,StyledString.createColorRegistryStyler(JFacePreferences.QUALIFIER_COLOR,null));
		}
	}
	
	// Labels and icons can be computed like this:
	def text(StringValue strValue){
		var tmValue = strValue.^val;
		System.out.println("Testing ("+tmValue+") for text(...)");
		val db      = SpellDatabaseUiModule.getCurrentDatabase();
		if (tmValue.startsWith("'")){
			tmValue = tmValue.substring(1,tmValue.length()-1);
		}
		if (tmValue.startsWith("T ")){
			tmValue	= tmValue.substring(2);
			if (db.isTelemetryParameter(tmValue)){
				return new StyledString(strValue.^val,StyledString.createColorRegistryStyler(JFacePreferences.QUALIFIER_COLOR,null));
			}
		}
		
		if (tmValue.startsWith("C ")){
			tmValue	= tmValue.substring(2);
			if (db.isTelemetryParameter(tmValue)){
				return new StyledString(strValue.^val,StyledString.createColorRegistryStyler(JFacePreferences.QUALIFIER_COLOR,null));
			}
		}
		if (db.isTelemetryParameter(tmValue)){
			return new StyledString(strValue.^val,StyledString.createColorRegistryStyler(JFacePreferences.QUALIFIER_COLOR,null));
		}
		if (db.isTelemetryParameter(tmValue)){
			return new StyledString(strValue.^val,StyledString.createColorRegistryStyler(JFacePreferences.QUALIFIER_COLOR,null));
		}
	}
	
	
//	override text(IEObjectDescription ele) {
//		ele.name.toString
//	}
//	 
//	override image(IEObjectDescription ele) {
//		ele.EClass.name + '.gif'
//	}	 
}
